
LabExc05andExc06-SPIandCAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000280  00800100  00000f4a  00000fde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800380  00800380  0000125e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ab4  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cce  00000000  00000000  00002fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000313f  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000620  00000000  00000000  00006dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e87b  00000000  00000000  000073dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015a6  00000000  00000000  00015c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  000171fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004783  00000000  00000000  0001739d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__vector_1>
   6:	00 00       	nop
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c0       	rjmp	.+132    	; 0xa6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c0       	rjmp	.+128    	; 0xa6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c0       	rjmp	.+124    	; 0xa6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c0       	rjmp	.+120    	; 0xa6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c0       	rjmp	.+116    	; 0xa6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c0       	rjmp	.+112    	; 0xa6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c0       	rjmp	.+108    	; 0xa6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c0       	rjmp	.+104    	; 0xa6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c0       	rjmp	.+100    	; 0xa6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c0       	rjmp	.+96     	; 0xa6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c0       	rjmp	.+92     	; 0xa6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c1       	rjmp	.+712    	; 0x316 <__vector_19>
  4e:	00 00       	nop
  50:	2a c0       	rjmp	.+84     	; 0xa6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c0       	rjmp	.+80     	; 0xa6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c0       	rjmp	.+76     	; 0xa6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c0       	rjmp	.+72     	; 0xa6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c0       	rjmp	.+68     	; 0xa6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c0       	rjmp	.+64     	; 0xa6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c0       	rjmp	.+60     	; 0xa6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c0       	rjmp	.+56     	; 0xa6 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	13 e0       	ldi	r17, 0x03	; 3
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e4       	ldi	r30, 0x4A	; 74
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 38       	cpi	r26, 0x80	; 128
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a0 e8       	ldi	r26, 0x80	; 128
  96:	b3 e0       	ldi	r27, 0x03	; 3
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 39       	cpi	r26, 0x92	; 146
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	68 d2       	rcall	.+1232   	; 0x574 <main>
  a4:	50 c7       	rjmp	.+3744   	; 0xf46 <_exit>

000000a6 <__bad_interrupt>:
  a6:	ac cf       	rjmp	.-168    	; 0x0 <__vectors>

000000a8 <can_init>:
		message->data[i]=mcp2515_read(MCP_RXB0D0+i);
	}
	
	ptr->intFlagRX0=0; //reset flag after msg fetch
	return 1; //message fetched from RX0 buffer
}
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
  ac:	df d0       	rcall	.+446    	; 0x26c <mcp2515_reset>
  ae:	c0 38       	cpi	r28, 0x80	; 128
  b0:	e9 f0       	breq	.+58     	; 0xec <can_init+0x44>
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	9f 93       	push	r25
  b8:	8f 93       	push	r24
  ba:	46 d4       	rcall	.+2188   	; 0x948 <printf>
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	ca d0       	rcall	.+404    	; 0x254 <mcp2515_read>
  c0:	1f 92       	push	r1
  c2:	8f 93       	push	r24
  c4:	89 e3       	ldi	r24, 0x39	; 57
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	9f 93       	push	r25
  ca:	8f 93       	push	r24
  cc:	3d d4       	rcall	.+2170   	; 0x948 <printf>
  ce:	8f e5       	ldi	r24, 0x5F	; 95
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	9f 93       	push	r25
  d4:	8f 93       	push	r24
  d6:	38 d4       	rcall	.+2160   	; 0x948 <printf>
  d8:	8d b7       	in	r24, 0x3d	; 61
  da:	9e b7       	in	r25, 0x3e	; 62
  dc:	08 96       	adiw	r24, 0x08	; 8
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	9e bf       	out	0x3e, r25	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	8d bf       	out	0x3d, r24	; 61
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	33 c0       	rjmp	.+102    	; 0x152 <can_init+0xaa>
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	c1 d0       	rcall	.+386    	; 0x276 <mcp2515_bit_modify>
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	bd d0       	rcall	.+378    	; 0x276 <mcp2515_bit_modify>
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	63 ee       	ldi	r22, 0xE3	; 227
 100:	81 e2       	ldi	r24, 0x21	; 33
 102:	b9 d0       	rcall	.+370    	; 0x276 <mcp2515_bit_modify>
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	68 e0       	ldi	r22, 0x08	; 8
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	b5 d0       	rcall	.+362    	; 0x276 <mcp2515_bit_modify>
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	64 e6       	ldi	r22, 0x64	; 100
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	b1 d0       	rcall	.+354    	; 0x276 <mcp2515_bit_modify>
 114:	60 e8       	ldi	r22, 0x80	; 128
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	8e d0       	rcall	.+284    	; 0x236 <mcp2515_write>
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	9b d0       	rcall	.+310    	; 0x254 <mcp2515_read>
 11e:	80 7e       	andi	r24, 0xE0	; 224
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	b1 f0       	breq	.+44     	; 0x150 <can_init+0xa8>
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	9f 93       	push	r25
 12a:	8f 93       	push	r24
 12c:	0d d4       	rcall	.+2074   	; 0x948 <printf>
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	91 d0       	rcall	.+290    	; 0x254 <mcp2515_read>
 132:	1f 92       	push	r1
 134:	8f 93       	push	r24
 136:	89 e3       	ldi	r24, 0x39	; 57
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	9f 93       	push	r25
 13c:	8f 93       	push	r24
 13e:	04 d4       	rcall	.+2056   	; 0x948 <printf>
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	8e ef       	ldi	r24, 0xFE	; 254
 14e:	01 c0       	rjmp	.+2      	; 0x152 <can_init+0xaa>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <can_message_transmit_err_chk>:

uint8_t can_message_transmit_err_chk(void)
{
	uint8_t err=mcp2515_read(MCP_TXB0CTRL);
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	7d d0       	rcall	.+250    	; 0x254 <mcp2515_read>
	
	//TO BE REVIEWED;
	if (err&(1<<4))
 15a:	84 fd       	sbrc	r24, 4
 15c:	06 c0       	rjmp	.+12     	; 0x16a <can_message_transmit_err_chk+0x14>
		return -1;//------------------------------------------------------------------------------------//transmission error detected
	if (err&(1<<5))
 15e:	98 2f       	mov	r25, r24
 160:	90 72       	andi	r25, 0x20	; 32
 162:	85 ff       	sbrs	r24, 5
 164:	03 c0       	rjmp	.+6      	; 0x16c <can_message_transmit_err_chk+0x16>
		return -2;//------------------------------------------------------------------------------------//Message lost arbitration while being sent. (msg with higher priority is being sent instead)
 166:	9e ef       	ldi	r25, 0xFE	; 254
 168:	01 c0       	rjmp	.+2      	; 0x16c <can_message_transmit_err_chk+0x16>
{
	uint8_t err=mcp2515_read(MCP_TXB0CTRL);
	
	//TO BE REVIEWED;
	if (err&(1<<4))
		return -1;//------------------------------------------------------------------------------------//transmission error detected
 16a:	9f ef       	ldi	r25, 0xFF	; 255
	if (err&(1<<5))
		return -2;//------------------------------------------------------------------------------------//Message lost arbitration while being sent. (msg with higher priority is being sent instead)
	
	return 0;//no error detected
}
 16c:	89 2f       	mov	r24, r25
 16e:	08 95       	ret

00000170 <can_message_send>:
		
	return 1;//init. successful
}

uint8_t can_message_send(can_message_t *message)
{
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	uint8_t length = message->length;
 17a:	0a 81       	ldd	r16, Y+2	; 0x02
	uint8_t txreqFlag=(mcp2515_read_status()&(1<<2));//-------------------------------------------------//check txreq bit state using read status instruction
 17c:	90 d0       	rcall	.+288    	; 0x29e <mcp2515_read_status>
	
	if (txreqFlag)
 17e:	82 ff       	sbrs	r24, 2
 180:	02 c0       	rjmp	.+4      	; 0x186 <can_message_send+0x16>
	{
		//for simplicity: we won't try to send a new message if a transmission is already being sent
		return can_message_transmit_err_chk();
 182:	e9 df       	rcall	.-46     	; 0x156 <can_message_transmit_err_chk>
 184:	22 c0       	rjmp	.+68     	; 0x1ca <can_message_send+0x5a>
	}
	
	// setting id; using 11 id bits;
	mcp2515_write(MCP_TXB0SIDH, (uint8_t)(message->id>>3));
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	bc 01       	movw	r22, r24
 18c:	76 95       	lsr	r23
 18e:	67 95       	ror	r22
 190:	76 95       	lsr	r23
 192:	67 95       	ror	r22
 194:	76 95       	lsr	r23
 196:	67 95       	ror	r22
 198:	81 e3       	ldi	r24, 0x31	; 49
 19a:	4d d0       	rcall	.+154    	; 0x236 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (uint8_t)(message->id<<5));
 19c:	68 81       	ld	r22, Y
 19e:	62 95       	swap	r22
 1a0:	66 0f       	add	r22, r22
 1a2:	60 7e       	andi	r22, 0xE0	; 224
 1a4:	82 e3       	ldi	r24, 0x32	; 50
 1a6:	47 d0       	rcall	.+142    	; 0x236 <mcp2515_write>
	
	// setting data length code
	mcp2515_write(MCP_TXB0DLC, length);
 1a8:	60 2f       	mov	r22, r16
 1aa:	85 e3       	ldi	r24, 0x35	; 53
 1ac:	44 d0       	rcall	.+136    	; 0x236 <mcp2515_write>
	
	// setting data
	for (uint8_t i=0;i<length;i++) 
 1ae:	00 23       	and	r16, r16
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <can_message_send+0x54>
 1b2:	23 96       	adiw	r28, 0x03	; 3
 1b4:	0a 5c       	subi	r16, 0xCA	; 202
 1b6:	16 e3       	ldi	r17, 0x36	; 54
	{
		mcp2515_write(MCP_TXB0D0+i, message->data[i]);
 1b8:	69 91       	ld	r22, Y+
 1ba:	81 2f       	mov	r24, r17
 1bc:	3c d0       	rcall	.+120    	; 0x236 <mcp2515_write>
 1be:	1f 5f       	subi	r17, 0xFF	; 255
	
	// setting data length code
	mcp2515_write(MCP_TXB0DLC, length);
	
	// setting data
	for (uint8_t i=0;i<length;i++) 
 1c0:	10 13       	cpse	r17, r16
 1c2:	fa cf       	rjmp	.-12     	; 0x1b8 <can_message_send+0x48>
	{
		mcp2515_write(MCP_TXB0D0+i, message->data[i]);
	}
	
	// Request To Send message using tx0
	mcp2515_rts(0x01);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	76 d0       	rcall	.+236    	; 0x2b4 <mcp2515_rts>
	return 1;	
 1c8:	81 e0       	ldi	r24, 0x01	; 1
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <__vector_1>:
	return 0;//no error detected
}

//interrupt vector for CAN RX0 (CONNECT TO INT0 on atmega to INT pin on mcp2515)
ISR (INT0_vect)
{		
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	if(mcp2515_read(MCP_EFLG)&(1<<6))//-----------------------------------------------------------------//accept message if no overflow detected on RX0 (checking EFLG[6])
 1f6:	8d e2       	ldi	r24, 0x2D	; 45
 1f8:	2d d0       	rcall	.+90     	; 0x254 <mcp2515_read>
 1fa:	86 ff       	sbrs	r24, 6
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <__vector_1+0x30>
	{
		globalStruct *ptr=&globalVar;
		ptr->intFlagRX0=1;//---------------------------------------------------------------------------//flag the interrupt
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 80 03 	sts	0x0380, r24
	}
	
	//clear RX0 interrupt flag (TODO:move to transmit func.??)
	mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	8c e2       	ldi	r24, 0x2C	; 44
 20a:	35 d0       	rcall	.+106    	; 0x276 <mcp2515_bit_modify>
	//clear RX0OVR overflow flag
	mcp2515_bit_modify(MCP_EFLG,0x06,0x00);
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	66 e0       	ldi	r22, 0x06	; 6
 210:	8d e2       	ldi	r24, 0x2D	; 45
 212:	31 d0       	rcall	.+98     	; 0x276 <mcp2515_bit_modify>
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <mcp2515_write>:
#pragma once

#include "MCP2515.h"

void mcp2515_write(uint8_t address, uint8_t data)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	d8 2f       	mov	r29, r24
 23c:	c6 2f       	mov	r28, r22
	spiSlaveSelect();
 23e:	53 d0       	rcall	.+166    	; 0x2e6 <spiSlaveSelect>
	
	spiSendReceiveData(MCP_WRITE); //write
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	4c d0       	rcall	.+152    	; 0x2dc <spiSendReceiveData>
	spiSendReceiveData(address);
 244:	8d 2f       	mov	r24, r29
 246:	4a d0       	rcall	.+148    	; 0x2dc <spiSendReceiveData>
	spiSendReceiveData(data);
 248:	8c 2f       	mov	r24, r28
 24a:	48 d0       	rcall	.+144    	; 0x2dc <spiSendReceiveData>
	
	spiSlaveDeselect();
 24c:	4e d0       	rcall	.+156    	; 0x2ea <spiSlaveDeselect>
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <mcp2515_read>:

uint8_t mcp2515_read(uint8_t address)
{
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	spiSlaveSelect();
 258:	46 d0       	rcall	.+140    	; 0x2e6 <spiSlaveSelect>
	
	spiSendReceiveData(MCP_READ); //read
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	3f d0       	rcall	.+126    	; 0x2dc <spiSendReceiveData>
	spiSendReceiveData(address);
 25e:	8c 2f       	mov	r24, r28
 260:	3d d0       	rcall	.+122    	; 0x2dc <spiSendReceiveData>
	
	data_in = spiSendReceiveData(0xff); // send junk
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	3b d0       	rcall	.+118    	; 0x2dc <spiSendReceiveData>
	
	spiSlaveDeselect();
 266:	41 d0       	rcall	.+130    	; 0x2ea <spiSlaveDeselect>
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <mcp2515_reset>:

void mcp2515_reset(void)
{
	spiSlaveSelect();
 26c:	3c d0       	rcall	.+120    	; 0x2e6 <spiSlaveSelect>
	
	spiSendReceiveData(MCP_RESET); // reset
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	35 d0       	rcall	.+106    	; 0x2dc <spiSendReceiveData>
	
	spiSlaveDeselect();
 272:	3b c0       	rjmp	.+118    	; 0x2ea <spiSlaveDeselect>
 274:	08 95       	ret

00000276 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	18 2f       	mov	r17, r24
 27e:	d6 2f       	mov	r29, r22
 280:	c4 2f       	mov	r28, r20
	spiSlaveSelect();
 282:	31 d0       	rcall	.+98     	; 0x2e6 <spiSlaveSelect>
	
	spiSendReceiveData(MCP_BITMOD); // bit modify
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	2a d0       	rcall	.+84     	; 0x2dc <spiSendReceiveData>
	spiSendReceiveData(address);
 288:	81 2f       	mov	r24, r17
 28a:	28 d0       	rcall	.+80     	; 0x2dc <spiSendReceiveData>
	spiSendReceiveData(mask);
 28c:	8d 2f       	mov	r24, r29
 28e:	26 d0       	rcall	.+76     	; 0x2dc <spiSendReceiveData>
	spiSendReceiveData(data);
 290:	8c 2f       	mov	r24, r28
 292:	24 d0       	rcall	.+72     	; 0x2dc <spiSendReceiveData>
	
	spiSlaveDeselect();
 294:	2a d0       	rcall	.+84     	; 0x2ea <spiSlaveDeselect>
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <mcp2515_read_status>:

uint8_t mcp2515_read_status(void)
{
 29e:	cf 93       	push	r28
	uint8_t data_in;
	
	spiSlaveSelect();
 2a0:	22 d0       	rcall	.+68     	; 0x2e6 <spiSlaveSelect>
	
	spiSendReceiveData(MCP_READ_STATUS); // read status
 2a2:	80 ea       	ldi	r24, 0xA0	; 160
 2a4:	1b d0       	rcall	.+54     	; 0x2dc <spiSendReceiveData>
	data_in = spiSendReceiveData(0xff); // send junk
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	19 d0       	rcall	.+50     	; 0x2dc <spiSendReceiveData>
 2aa:	c8 2f       	mov	r28, r24
	
	
	spiSlaveDeselect();
 2ac:	1e d0       	rcall	.+60     	; 0x2ea <spiSlaveDeselect>
	
	return data_in;
}
 2ae:	8c 2f       	mov	r24, r28
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <mcp2515_rts>:


void mcp2515_rts(uint8_t nnn)
{
 2b4:	cf 93       	push	r28
	uint8_t rts = MCP_RTS;
	
	if(nnn < 8)
 2b6:	88 30       	cpi	r24, 0x08	; 8
 2b8:	18 f4       	brcc	.+6      	; 0x2c0 <mcp2515_rts+0xc>
	{
		rts |= nnn;
 2ba:	c8 2f       	mov	r28, r24
 2bc:	c0 68       	ori	r28, 0x80	; 128
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <mcp2515_rts+0xe>
}


void mcp2515_rts(uint8_t nnn)
{
	uint8_t rts = MCP_RTS;
 2c0:	c0 e8       	ldi	r28, 0x80	; 128
	{
		rts |= nnn;
	}
	//else: ignore command (nnn)
	
	spiSlaveSelect();
 2c2:	11 d0       	rcall	.+34     	; 0x2e6 <spiSlaveSelect>
	spiSendReceiveData(rts);
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0a d0       	rcall	.+20     	; 0x2dc <spiSendReceiveData>
	spiSlaveDeselect();
 2c8:	10 d0       	rcall	.+32     	; 0x2ea <spiSlaveDeselect>
	
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <spiInit>:
#include "SPI.h"

void spiInit()
{
	//MOSI-SCK-SS -> output
	DDRB|= (1<<PB5)|(1<<PB7)|(1<<PB4);
 2ce:	87 b3       	in	r24, 0x17	; 23
 2d0:	80 6b       	ori	r24, 0xB0	; 176
 2d2:	87 bb       	out	0x17, r24	; 23
		
	//MISO -->input
	DDRB&= ~(1<<PB6);
 2d4:	be 98       	cbi	0x17, 6	; 23
		
	//Atmega SPI in master mode, clock rate f_crystal/16
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 2d6:	81 e5       	ldi	r24, 0x51	; 81
 2d8:	8d b9       	out	0x0d, r24	; 13
 2da:	08 95       	ret

000002dc <spiSendReceiveData>:
uint8_t spiSendReceiveData(uint8_t data)
{
	uint8_t dataIn;
	
	//Start data transmission
	SPDR=data;
 2dc:	8f b9       	out	0x0f, r24	; 15
	
	//wait until data is sent/received
	while(!(SPSR&(1<<SPIF)));
 2de:	77 9b       	sbis	0x0e, 7	; 14
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <spiSendReceiveData+0x2>
	
	dataIn = SPDR;
 2e2:	8f b1       	in	r24, 0x0f	; 15
	return dataIn;		
}
 2e4:	08 95       	ret

000002e6 <spiSlaveSelect>:

void spiSlaveSelect(void)
{
	//~SS=0 (select slave)
	PORTB &= ~(1<<PB4);
 2e6:	c4 98       	cbi	0x18, 4	; 24
 2e8:	08 95       	ret

000002ea <spiSlaveDeselect>:
}

void spiSlaveDeselect(void)
{
	//~SS=1 (deselect slave)
	PORTB |= (1<<PB4);
 2ea:	c4 9a       	sbi	0x18, 4	; 24
 2ec:	08 95       	ret

000002ee <usartSendByte>:


//Send a byte using USART
void usartSendByte(uint8_t byteToSend)
{
		while((UCSR0A&(1<<UDRE0))==0);//---------------//Only transmit data if data bus is available (not already transmitting)
 2ee:	5d 9b       	sbis	0x0b, 5	; 11
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <usartSendByte>
		UDR0=byteToSend;//---------------------------//transmit byte
 2f2:	8c b9       	out	0x0c, r24	; 12
 2f4:	08 95       	ret

000002f6 <usartInitialize>:
		#if USART_OPERATING_MODE_U2X
			unsigned int UBRR=(F_CPU / (8UL * USART_BAUDRATE)) - 1; //if integer trunctuation is noticed (...not getting the expected baudrate) due to integer devision, USE: ((F_CPU + USART_BAUD_RATE * 8L) / (USART_BAUD_RATE * 16L) - 1) instead. When doing integer division it is usually better to round to the nearest integer, rather than to the lowest. 
			UCSR0A |= (1<<U2X0);//---------------------------//U2x=1
		#else
			unsigned int UBRR=(F_CPU / (16UL * USART_BAUDRATE)) - 1;
			UCSR0A &= ~(1<<U2X0);//---------------------------//U2X=0
 2f6:	59 98       	cbi	0x0b, 1	; 11
		#endif

		//Set up the baud rate for USART0
		UBRR0L=UBRR;//---------------------------// load lower 8 bits of baud rate value
 2f8:	8f e1       	ldi	r24, 0x1F	; 31
 2fa:	89 b9       	out	0x09, r24	; 9
		UBRR0H=(UBRR>>8);//---------------------------// load upper 8 bits of baud rate value	
 2fc:	10 bc       	out	0x20, r1	; 32
		
		//Enable Tx & Rx
		UCSR0B=(1<<TXEN0)|(1<<RXEN0);
 2fe:	88 e1       	ldi	r24, 0x18	; 24
 300:	8a b9       	out	0x0a, r24	; 10
		/*Configure Data Format: 
			-	Data Bits = 8;
			-	Stop Bits = 2;
			-	Parity = EVEN;		
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)|(1<<UPM01);
 302:	8e ea       	ldi	r24, 0xAE	; 174
 304:	80 bd       	out	0x20, r24	; 32
		*	- Second parameter: optional; used for get functions, ie. receiving a character from the USART.
		*	- BEAWARE that this function uses malloc()
		*/
		if(USART_ENABLE_printf)
		{
			fdevopen(&usartSendByte,NULL);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	87 e7       	ldi	r24, 0x77	; 119
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	d2 d2       	rcall	.+1444   	; 0x8b4 <fdevopen>
		}
		
		
		if(USART_INTERRUPT_RX)
		{
			UCSR0B |= (1<<RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXCIE0)
 310:	57 9a       	sbi	0x0a, 7	; 10
			//Enable the interrupts globally. 
			sei();
 312:	78 94       	sei
 314:	08 95       	ret

00000316 <__vector_19>:
UsartGlobalStruct globalVariables;

//volatile uint8_t byteOfData; //to hold data on RX interrupt
//interrupt if receiving data
ISR (USART0_RXC_vect,ISR_BLOCK)
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	8f 93       	push	r24
	if (USART_INTERRUPT_RX)
	{
		UsartGlobalStruct *ptr=&globalVariables;	
		ptr->RXdata=UDR0;//grab RX byte 
 322:	8c b1       	in	r24, 0x0c	; 12
 324:	80 93 86 03 	sts	0x0386, r24
	}
}
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <xmemInit>:

	//Write address on SRAM
	memoryPosition[address] = data;
	
	return 0;
}
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	85 bf       	out	0x35, r24	; 53
 338:	16 be       	out	0x36, r1	; 54
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	80 bf       	out	0x30, r24	; 48
 33e:	08 95       	ret

00000340 <xmemTest>:
 340:	cf 92       	push	r12
 342:	df 92       	push	r13
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	81 eb       	ldi	r24, 0xB1	; 177
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0a d3       	rcall	.+1556   	; 0x96a <puts>
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	0f 2e       	mov	r0, r31
 360:	f8 ec       	ldi	r31, 0xC8	; 200
 362:	ef 2e       	mov	r14, r31
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	ff 2e       	mov	r15, r31
 368:	f0 2d       	mov	r31, r0
 36a:	8c 2f       	mov	r24, r28
 36c:	80 95       	com	r24
 36e:	fe 01       	movw	r30, r28
 370:	f8 5e       	subi	r31, 0xE8	; 232
 372:	80 83       	st	Z, r24
 374:	90 81       	ld	r25, Z
 376:	98 17       	cp	r25, r24
 378:	a1 f0       	breq	.+40     	; 0x3a2 <xmemTest+0x62>
 37a:	90 81       	ld	r25, Z
 37c:	1f 92       	push	r1
 37e:	8f 93       	push	r24
 380:	1f 92       	push	r1
 382:	9f 93       	push	r25
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	ff 92       	push	r15
 38a:	ef 92       	push	r14
 38c:	dd d2       	rcall	.+1466   	; 0x948 <printf>
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
 392:	8d b7       	in	r24, 0x3d	; 61
 394:	9e b7       	in	r25, 0x3e	; 62
 396:	08 96       	adiw	r24, 0x08	; 8
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	9e bf       	out	0x3e, r25	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	8d bf       	out	0x3d, r24	; 61
 3a2:	21 96       	adiw	r28, 0x01	; 1
 3a4:	c1 15       	cp	r28, r1
 3a6:	98 e0       	ldi	r25, 0x08	; 8
 3a8:	d9 07       	cpc	r29, r25
 3aa:	f9 f6       	brne	.-66     	; 0x36a <xmemTest+0x2a>
 3ac:	e1 2c       	mov	r14, r1
 3ae:	f1 2c       	mov	r15, r1
 3b0:	c0 e0       	ldi	r28, 0x00	; 0
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f8 e0       	ldi	r31, 0x08	; 8
 3b8:	cf 2e       	mov	r12, r31
 3ba:	f2 e0       	ldi	r31, 0x02	; 2
 3bc:	df 2e       	mov	r13, r31
 3be:	f0 2d       	mov	r31, r0
 3c0:	8c 2f       	mov	r24, r28
 3c2:	80 95       	com	r24
 3c4:	fe 01       	movw	r30, r28
 3c6:	f8 5e       	subi	r31, 0xE8	; 232
 3c8:	90 81       	ld	r25, Z
 3ca:	89 17       	cp	r24, r25
 3cc:	a9 f0       	breq	.+42     	; 0x3f8 <xmemTest+0xb8>
 3ce:	90 81       	ld	r25, Z
 3d0:	1f 92       	push	r1
 3d2:	8f 93       	push	r24
 3d4:	1f 92       	push	r1
 3d6:	9f 93       	push	r25
 3d8:	df 93       	push	r29
 3da:	cf 93       	push	r28
 3dc:	df 92       	push	r13
 3de:	cf 92       	push	r12
 3e0:	b3 d2       	rcall	.+1382   	; 0x948 <printf>
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	e8 1a       	sub	r14, r24
 3e6:	f8 0a       	sbc	r15, r24
 3e8:	8d b7       	in	r24, 0x3d	; 61
 3ea:	9e b7       	in	r25, 0x3e	; 62
 3ec:	08 96       	adiw	r24, 0x08	; 8
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	9e bf       	out	0x3e, r25	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	8d bf       	out	0x3d, r24	; 61
 3f8:	21 96       	adiw	r28, 0x01	; 1
 3fa:	c1 15       	cp	r28, r1
 3fc:	98 e0       	ldi	r25, 0x08	; 8
 3fe:	d9 07       	cpc	r29, r25
 400:	f9 f6       	brne	.-66     	; 0x3c0 <xmemTest+0x80>
 402:	ff 92       	push	r15
 404:	ef 92       	push	r14
 406:	1f 93       	push	r17
 408:	0f 93       	push	r16
 40a:	87 e4       	ldi	r24, 0x47	; 71
 40c:	92 e0       	ldi	r25, 0x02	; 2
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	9a d2       	rcall	.+1332   	; 0x948 <printf>
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	08 95       	ret

00000432 <xmemExampleFunction>:
 432:	bf 92       	push	r11
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	87 e9       	ldi	r24, 0x97	; 151
 446:	92 e0       	ldi	r25, 0x02	; 2
 448:	90 d2       	rcall	.+1312   	; 0x96a <puts>
 44a:	80 e4       	ldi	r24, 0x40	; 64
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0b d1       	rcall	.+534    	; 0x666 <malloc>
 450:	7c 01       	movw	r14, r24
 452:	ff 92       	push	r15
 454:	8f 93       	push	r24
 456:	1f 92       	push	r1
 458:	80 e4       	ldi	r24, 0x40	; 64
 45a:	8f 93       	push	r24
 45c:	82 eb       	ldi	r24, 0xB2	; 178
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	9f 93       	push	r25
 462:	8f 93       	push	r24
 464:	71 d2       	rcall	.+1250   	; 0x948 <printf>
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	f7 01       	movw	r30, r14
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	11 92       	st	Z+, r1
 478:	8f 5f       	subi	r24, 0xFF	; 255
 47a:	80 34       	cpi	r24, 0x40	; 64
 47c:	e1 f7       	brne	.-8      	; 0x476 <xmemExampleFunction+0x44>
 47e:	58 c0       	rjmp	.+176    	; 0x530 <__stack+0x31>
 480:	f8 01       	movw	r30, r16
 482:	81 91       	ld	r24, Z+
 484:	8f 01       	movw	r16, r30
 486:	1f 92       	push	r1
 488:	8f 93       	push	r24
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	5c d2       	rcall	.+1208   	; 0x948 <printf>
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	8b 2d       	mov	r24, r11
 49a:	8f 70       	andi	r24, 0x0F	; 15
 49c:	8f 30       	cpi	r24, 0x0F	; 15
 49e:	19 f4       	brne	.+6      	; 0x4a6 <xmemExampleFunction+0x74>
 4a0:	8c e4       	ldi	r24, 0x4C	; 76
 4a2:	93 e0       	ldi	r25, 0x03	; 3
 4a4:	62 d2       	rcall	.+1220   	; 0x96a <puts>
 4a6:	b3 94       	inc	r11
 4a8:	e0 e4       	ldi	r30, 0x40	; 64
 4aa:	be 12       	cpse	r11, r30
 4ac:	e9 cf       	rjmp	.-46     	; 0x480 <xmemExampleFunction+0x4e>
 4ae:	ff 92       	push	r15
 4b0:	ef 92       	push	r14
 4b2:	1f 92       	push	r1
 4b4:	80 e4       	ldi	r24, 0x40	; 64
 4b6:	8f 93       	push	r24
 4b8:	8f ee       	ldi	r24, 0xEF	; 239
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	9f 93       	push	r25
 4be:	8f 93       	push	r24
 4c0:	43 d2       	rcall	.+1158   	; 0x948 <printf>
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	f7 01       	movw	r30, r14
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	81 93       	st	Z+, r24
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 34       	cpi	r24, 0x40	; 64
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <xmemExampleFunction+0xa0>
 4da:	18 c0       	rjmp	.+48     	; 0x50c <__stack+0xd>
 4dc:	f8 01       	movw	r30, r16
 4de:	81 91       	ld	r24, Z+
 4e0:	8f 01       	movw	r16, r30
 4e2:	1f 92       	push	r1
 4e4:	8f 93       	push	r24
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	2e d2       	rcall	.+1116   	; 0x948 <printf>
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	8f 2d       	mov	r24, r15
 4f6:	8f 70       	andi	r24, 0x0F	; 15
 4f8:	8f 30       	cpi	r24, 0x0F	; 15
 4fa:	19 f4       	brne	.+6      	; 0x502 <__stack+0x3>
 4fc:	8c e4       	ldi	r24, 0x4C	; 76
 4fe:	93 e0       	ldi	r25, 0x03	; 3
 500:	34 d2       	rcall	.+1128   	; 0x96a <puts>
 502:	f3 94       	inc	r15
 504:	e0 e4       	ldi	r30, 0x40	; 64
 506:	fe 12       	cpse	r15, r30
 508:	e9 cf       	rjmp	.-46     	; 0x4dc <xmemExampleFunction+0xaa>
 50a:	25 c0       	rjmp	.+74     	; 0x556 <__stack+0x57>
 50c:	f7 01       	movw	r30, r14
 50e:	80 81       	ld	r24, Z
 510:	1f 92       	push	r1
 512:	8f 93       	push	r24
 514:	89 ee       	ldi	r24, 0xE9	; 233
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	9f 93       	push	r25
 51a:	8f 93       	push	r24
 51c:	15 d2       	rcall	.+1066   	; 0x948 <printf>
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	86 01       	movw	r16, r12
 528:	f1 2c       	mov	r15, r1
 52a:	c9 ee       	ldi	r28, 0xE9	; 233
 52c:	d2 e0       	ldi	r29, 0x02	; 2
 52e:	e9 cf       	rjmp	.-46     	; 0x502 <__stack+0x3>
 530:	f7 01       	movw	r30, r14
 532:	81 91       	ld	r24, Z+
 534:	6f 01       	movw	r12, r30
 536:	1f 92       	push	r1
 538:	8f 93       	push	r24
 53a:	89 ee       	ldi	r24, 0xE9	; 233
 53c:	92 e0       	ldi	r25, 0x02	; 2
 53e:	9f 93       	push	r25
 540:	8f 93       	push	r24
 542:	02 d2       	rcall	.+1028   	; 0x948 <printf>
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	86 01       	movw	r16, r12
 54e:	b1 2c       	mov	r11, r1
 550:	c9 ee       	ldi	r28, 0xE9	; 233
 552:	d2 e0       	ldi	r29, 0x02	; 2
 554:	a8 cf       	rjmp	.-176    	; 0x4a6 <xmemExampleFunction+0x74>
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	ef 90       	pop	r14
 562:	df 90       	pop	r13
 564:	cf 90       	pop	r12
 566:	bf 90       	pop	r11
 568:	08 95       	ret

0000056a <xmemReadFrom>:
{
	//Start address for the xmem
	uint8_t *memoryPosition = 0x1800;
	
	//Read address from SRAM
	return memoryPosition[address];
 56a:	98 5e       	subi	r25, 0xE8	; 232
 56c:	fc 01       	movw	r30, r24
 56e:	80 81       	ld	r24, Z
}
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	08 95       	ret

00000574 <main>:
bool interruptOn=false;
uint8_t byteOfData=0;

//main function
int main (void)
{
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	2b 97       	sbiw	r28, 0x0b	; 11
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
	// Initialize external memory interface // NB: "xmemInit()" must be called before any function that uses heap memory!!
	xmemInit(); //enable external memory addressing bits to be moved from this function!
 58e:	d2 de       	rcall	.-604    	; 0x334 <xmemInit>
	
	// dummy for testing USART
	//char *dataString="\r......Booting up.\r";
		
	//init. USART
	usartInitialize();//--------*****-////TO DO: implement light diode blink if(usartInitialize()); else ERROR BLINK CODE.. also write reference for blinking code...
 590:	b2 de       	rcall	.-668    	; 0x2f6 <usartInitialize>
	
	//test external SRAM
	xmemTest();
 592:	d6 de       	rcall	.-596    	; 0x340 <xmemTest>
	xmemExampleFunction();
 594:	4e df       	rcall	.-356    	; 0x432 <xmemExampleFunction>
	printf("\n\r0x%02x",xmemReadFrom(5));
 596:	85 e0       	ldi	r24, 0x05	; 5
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	e7 df       	rcall	.-50     	; 0x56a <xmemReadFrom>
 59c:	9f 93       	push	r25
 59e:	8f 93       	push	r24
 5a0:	87 e7       	ldi	r24, 0x77	; 119
 5a2:	93 e0       	ldi	r25, 0x03	; 3
 5a4:	9f 93       	push	r25
 5a6:	8f 93       	push	r24
 5a8:	cf d1       	rcall	.+926    	; 0x948 <printf>
	//clearScreen();
	//uint8_t column=0,line=0;
	
	
	//SPI stuff
	spiInit();
 5aa:	91 de       	rcall	.-734    	; 0x2ce <spiInit>
	
	//testing mcp2515 driver write, read, 
	/*mcp2515_write(0xda, 0xf3);
	printf("\n\r0x%02x", mcp2515_read(0xda));*/
	
	can_init(MODE_LOOPBACK);
 5ac:	80 e4       	ldi	r24, 0x40	; 64
 5ae:	7c dd       	rcall	.-1288   	; 0xa8 <can_init>
	
	can_message_t message;
	
	message.id = 3;
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	9a 83       	std	Y+2, r25	; 0x02
 5b6:	89 83       	std	Y+1, r24	; 0x01
	message.length = 8;
 5b8:	88 e0       	ldi	r24, 0x08	; 8
 5ba:	8b 83       	std	Y+3, r24	; 0x03
 5bc:	fe 01       	movw	r30, r28
 5be:	34 96       	adiw	r30, 0x04	; 4
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
	for (uint8_t i=0; i<=7; i++)
 5c8:	80 e0       	ldi	r24, 0x00	; 0
	{
		message.data[i]=i;
 5ca:	81 93       	st	Z+, r24
	
	can_message_t message;
	
	message.id = 3;
	message.length = 8;
	for (uint8_t i=0; i<=7; i++)
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	88 30       	cpi	r24, 0x08	; 8
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <main+0x56>
	{
		message.data[i]=i;
	}
	message.data[0] = 0x1b;
 5d2:	8b e1       	ldi	r24, 0x1B	; 27
 5d4:	8c 83       	std	Y+4, r24	; 0x04
	message.data[5] = 0xbb;
 5d6:	8b eb       	ldi	r24, 0xBB	; 187
 5d8:	89 87       	std	Y+9, r24	; 0x09
	
	can_message_send(&message);
 5da:	ce 01       	movw	r24, r28
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	c8 dd       	rcall	.-1136   	; 0x170 <can_message_send>
	
	message.length = 4;
 5e0:	84 e0       	ldi	r24, 0x04	; 4
 5e2:	8b 83       	std	Y+3, r24	; 0x03
	for (uint8_t i=0; i<=7; i++)
	{
		
		message.data[i]=2*i;
 5e4:	1c 82       	std	Y+4, r1	; 0x04
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	9d 83       	std	Y+5, r25	; 0x05
 5ea:	8e 83       	std	Y+6, r24	; 0x06
 5ec:	86 e0       	ldi	r24, 0x06	; 6
 5ee:	8f 83       	std	Y+7, r24	; 0x07
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	88 87       	std	Y+8, r24	; 0x08
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
 5f6:	89 87       	std	Y+9, r24	; 0x09
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
 5fa:	8a 87       	std	Y+10, r24	; 0x0a
 5fc:	8e e0       	ldi	r24, 0x0E	; 14
 5fe:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	
	can_message_send(&message);
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	b5 dd       	rcall	.-1174   	; 0x170 <can_message_send>
	printf("\n\r0x%02x", mcp2515_read(MCP_RXB0D0));
 606:	86 e6       	ldi	r24, 0x66	; 102
 608:	25 de       	rcall	.-950    	; 0x254 <mcp2515_read>
 60a:	1f 92       	push	r1
 60c:	8f 93       	push	r24
 60e:	87 e7       	ldi	r24, 0x77	; 119
 610:	93 e0       	ldi	r25, 0x03	; 3
 612:	9f 93       	push	r25
 614:	8f 93       	push	r24
 616:	98 d1       	rcall	.+816    	; 0x948 <printf>
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 2e       	mov	r0, r31
 622:	f6 e6       	ldi	r31, 0x66	; 102
 624:	ff 2e       	mov	r15, r31
 626:	f0 2d       	mov	r31, r0
		for (uint8_t i=0;i<=7;i++)
		{
			printf("\n\r0x%02x", mcp2515_read(MCP_RXB0D0+i));	
 628:	07 e7       	ldi	r16, 0x77	; 119
 62a:	13 e0       	ldi	r17, 0x03	; 3
 62c:	8f 2d       	mov	r24, r15
 62e:	12 de       	rcall	.-988    	; 0x254 <mcp2515_read>
 630:	1f 92       	push	r1
 632:	8f 93       	push	r24
 634:	1f 93       	push	r17
 636:	0f 93       	push	r16
 638:	87 d1       	rcall	.+782    	; 0x948 <printf>
 63a:	f3 94       	inc	r15
	}
	
	
	can_message_send(&message);
	printf("\n\r0x%02x", mcp2515_read(MCP_RXB0D0));
		for (uint8_t i=0;i<=7;i++)
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	8e e6       	ldi	r24, 0x6E	; 110
 646:	f8 12       	cpse	r15, r24
 648:	f1 cf       	rjmp	.-30     	; 0x62c <main+0xb8>
		{
			printf("\n\r0x%02x", mcp2515_read(MCP_RXB0D0+i));	
		}
		
	
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	2b 96       	adiw	r28, 0x0b	; 11
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	f8 94       	cli
 654:	de bf       	out	0x3e, r29	; 62
 656:	0f be       	out	0x3f, r0	; 63
 658:	cd bf       	out	0x3d, r28	; 61
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	ff 90       	pop	r15
 664:	08 95       	ret

00000666 <malloc>:
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	91 05       	cpc	r25, r1
 66e:	10 f4       	brcc	.+4      	; 0x674 <malloc+0xe>
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	e0 91 8a 03 	lds	r30, 0x038A
 678:	f0 91 8b 03 	lds	r31, 0x038B
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	a0 e0       	ldi	r26, 0x00	; 0
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	30 97       	sbiw	r30, 0x00	; 0
 686:	39 f1       	breq	.+78     	; 0x6d6 <malloc+0x70>
 688:	40 81       	ld	r20, Z
 68a:	51 81       	ldd	r21, Z+1	; 0x01
 68c:	48 17       	cp	r20, r24
 68e:	59 07       	cpc	r21, r25
 690:	b8 f0       	brcs	.+46     	; 0x6c0 <malloc+0x5a>
 692:	48 17       	cp	r20, r24
 694:	59 07       	cpc	r21, r25
 696:	71 f4       	brne	.+28     	; 0x6b4 <malloc+0x4e>
 698:	82 81       	ldd	r24, Z+2	; 0x02
 69a:	93 81       	ldd	r25, Z+3	; 0x03
 69c:	10 97       	sbiw	r26, 0x00	; 0
 69e:	29 f0       	breq	.+10     	; 0x6aa <malloc+0x44>
 6a0:	13 96       	adiw	r26, 0x03	; 3
 6a2:	9c 93       	st	X, r25
 6a4:	8e 93       	st	-X, r24
 6a6:	12 97       	sbiw	r26, 0x02	; 2
 6a8:	2c c0       	rjmp	.+88     	; 0x702 <malloc+0x9c>
 6aa:	90 93 8b 03 	sts	0x038B, r25
 6ae:	80 93 8a 03 	sts	0x038A, r24
 6b2:	27 c0       	rjmp	.+78     	; 0x702 <malloc+0x9c>
 6b4:	21 15       	cp	r18, r1
 6b6:	31 05       	cpc	r19, r1
 6b8:	31 f0       	breq	.+12     	; 0x6c6 <malloc+0x60>
 6ba:	42 17       	cp	r20, r18
 6bc:	53 07       	cpc	r21, r19
 6be:	18 f0       	brcs	.+6      	; 0x6c6 <malloc+0x60>
 6c0:	a9 01       	movw	r20, r18
 6c2:	db 01       	movw	r26, r22
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <malloc+0x62>
 6c6:	ef 01       	movw	r28, r30
 6c8:	9a 01       	movw	r18, r20
 6ca:	bd 01       	movw	r22, r26
 6cc:	df 01       	movw	r26, r30
 6ce:	02 80       	ldd	r0, Z+2	; 0x02
 6d0:	f3 81       	ldd	r31, Z+3	; 0x03
 6d2:	e0 2d       	mov	r30, r0
 6d4:	d7 cf       	rjmp	.-82     	; 0x684 <malloc+0x1e>
 6d6:	21 15       	cp	r18, r1
 6d8:	31 05       	cpc	r19, r1
 6da:	f9 f0       	breq	.+62     	; 0x71a <malloc+0xb4>
 6dc:	28 1b       	sub	r18, r24
 6de:	39 0b       	sbc	r19, r25
 6e0:	24 30       	cpi	r18, 0x04	; 4
 6e2:	31 05       	cpc	r19, r1
 6e4:	80 f4       	brcc	.+32     	; 0x706 <malloc+0xa0>
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ea:	61 15       	cp	r22, r1
 6ec:	71 05       	cpc	r23, r1
 6ee:	21 f0       	breq	.+8      	; 0x6f8 <malloc+0x92>
 6f0:	fb 01       	movw	r30, r22
 6f2:	93 83       	std	Z+3, r25	; 0x03
 6f4:	82 83       	std	Z+2, r24	; 0x02
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <malloc+0x9a>
 6f8:	90 93 8b 03 	sts	0x038B, r25
 6fc:	80 93 8a 03 	sts	0x038A, r24
 700:	fe 01       	movw	r30, r28
 702:	32 96       	adiw	r30, 0x02	; 2
 704:	44 c0       	rjmp	.+136    	; 0x78e <malloc+0x128>
 706:	fe 01       	movw	r30, r28
 708:	e2 0f       	add	r30, r18
 70a:	f3 1f       	adc	r31, r19
 70c:	81 93       	st	Z+, r24
 70e:	91 93       	st	Z+, r25
 710:	22 50       	subi	r18, 0x02	; 2
 712:	31 09       	sbc	r19, r1
 714:	39 83       	std	Y+1, r19	; 0x01
 716:	28 83       	st	Y, r18
 718:	3a c0       	rjmp	.+116    	; 0x78e <malloc+0x128>
 71a:	20 91 88 03 	lds	r18, 0x0388
 71e:	30 91 89 03 	lds	r19, 0x0389
 722:	23 2b       	or	r18, r19
 724:	41 f4       	brne	.+16     	; 0x736 <malloc+0xd0>
 726:	20 91 02 01 	lds	r18, 0x0102
 72a:	30 91 03 01 	lds	r19, 0x0103
 72e:	30 93 89 03 	sts	0x0389, r19
 732:	20 93 88 03 	sts	0x0388, r18
 736:	20 91 00 01 	lds	r18, 0x0100
 73a:	30 91 01 01 	lds	r19, 0x0101
 73e:	21 15       	cp	r18, r1
 740:	31 05       	cpc	r19, r1
 742:	41 f4       	brne	.+16     	; 0x754 <malloc+0xee>
 744:	2d b7       	in	r18, 0x3d	; 61
 746:	3e b7       	in	r19, 0x3e	; 62
 748:	40 91 04 01 	lds	r20, 0x0104
 74c:	50 91 05 01 	lds	r21, 0x0105
 750:	24 1b       	sub	r18, r20
 752:	35 0b       	sbc	r19, r21
 754:	e0 91 88 03 	lds	r30, 0x0388
 758:	f0 91 89 03 	lds	r31, 0x0389
 75c:	e2 17       	cp	r30, r18
 75e:	f3 07       	cpc	r31, r19
 760:	a0 f4       	brcc	.+40     	; 0x78a <malloc+0x124>
 762:	2e 1b       	sub	r18, r30
 764:	3f 0b       	sbc	r19, r31
 766:	28 17       	cp	r18, r24
 768:	39 07       	cpc	r19, r25
 76a:	78 f0       	brcs	.+30     	; 0x78a <malloc+0x124>
 76c:	ac 01       	movw	r20, r24
 76e:	4e 5f       	subi	r20, 0xFE	; 254
 770:	5f 4f       	sbci	r21, 0xFF	; 255
 772:	24 17       	cp	r18, r20
 774:	35 07       	cpc	r19, r21
 776:	48 f0       	brcs	.+18     	; 0x78a <malloc+0x124>
 778:	4e 0f       	add	r20, r30
 77a:	5f 1f       	adc	r21, r31
 77c:	50 93 89 03 	sts	0x0389, r21
 780:	40 93 88 03 	sts	0x0388, r20
 784:	81 93       	st	Z+, r24
 786:	91 93       	st	Z+, r25
 788:	02 c0       	rjmp	.+4      	; 0x78e <malloc+0x128>
 78a:	e0 e0       	ldi	r30, 0x00	; 0
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	cf 01       	movw	r24, r30
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <free>:
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	09 f4       	brne	.+2      	; 0x7a0 <free+0xa>
 79e:	87 c0       	rjmp	.+270    	; 0x8ae <free+0x118>
 7a0:	fc 01       	movw	r30, r24
 7a2:	32 97       	sbiw	r30, 0x02	; 2
 7a4:	13 82       	std	Z+3, r1	; 0x03
 7a6:	12 82       	std	Z+2, r1	; 0x02
 7a8:	c0 91 8a 03 	lds	r28, 0x038A
 7ac:	d0 91 8b 03 	lds	r29, 0x038B
 7b0:	20 97       	sbiw	r28, 0x00	; 0
 7b2:	81 f4       	brne	.+32     	; 0x7d4 <free+0x3e>
 7b4:	20 81       	ld	r18, Z
 7b6:	31 81       	ldd	r19, Z+1	; 0x01
 7b8:	28 0f       	add	r18, r24
 7ba:	39 1f       	adc	r19, r25
 7bc:	80 91 88 03 	lds	r24, 0x0388
 7c0:	90 91 89 03 	lds	r25, 0x0389
 7c4:	82 17       	cp	r24, r18
 7c6:	93 07       	cpc	r25, r19
 7c8:	79 f5       	brne	.+94     	; 0x828 <free+0x92>
 7ca:	f0 93 89 03 	sts	0x0389, r31
 7ce:	e0 93 88 03 	sts	0x0388, r30
 7d2:	6d c0       	rjmp	.+218    	; 0x8ae <free+0x118>
 7d4:	de 01       	movw	r26, r28
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	ae 17       	cp	r26, r30
 7dc:	bf 07       	cpc	r27, r31
 7de:	50 f4       	brcc	.+20     	; 0x7f4 <free+0x5e>
 7e0:	12 96       	adiw	r26, 0x02	; 2
 7e2:	4d 91       	ld	r20, X+
 7e4:	5c 91       	ld	r21, X
 7e6:	13 97       	sbiw	r26, 0x03	; 3
 7e8:	9d 01       	movw	r18, r26
 7ea:	41 15       	cp	r20, r1
 7ec:	51 05       	cpc	r21, r1
 7ee:	09 f1       	breq	.+66     	; 0x832 <free+0x9c>
 7f0:	da 01       	movw	r26, r20
 7f2:	f3 cf       	rjmp	.-26     	; 0x7da <free+0x44>
 7f4:	b3 83       	std	Z+3, r27	; 0x03
 7f6:	a2 83       	std	Z+2, r26	; 0x02
 7f8:	40 81       	ld	r20, Z
 7fa:	51 81       	ldd	r21, Z+1	; 0x01
 7fc:	84 0f       	add	r24, r20
 7fe:	95 1f       	adc	r25, r21
 800:	8a 17       	cp	r24, r26
 802:	9b 07       	cpc	r25, r27
 804:	71 f4       	brne	.+28     	; 0x822 <free+0x8c>
 806:	8d 91       	ld	r24, X+
 808:	9c 91       	ld	r25, X
 80a:	11 97       	sbiw	r26, 0x01	; 1
 80c:	84 0f       	add	r24, r20
 80e:	95 1f       	adc	r25, r21
 810:	02 96       	adiw	r24, 0x02	; 2
 812:	91 83       	std	Z+1, r25	; 0x01
 814:	80 83       	st	Z, r24
 816:	12 96       	adiw	r26, 0x02	; 2
 818:	8d 91       	ld	r24, X+
 81a:	9c 91       	ld	r25, X
 81c:	13 97       	sbiw	r26, 0x03	; 3
 81e:	93 83       	std	Z+3, r25	; 0x03
 820:	82 83       	std	Z+2, r24	; 0x02
 822:	21 15       	cp	r18, r1
 824:	31 05       	cpc	r19, r1
 826:	29 f4       	brne	.+10     	; 0x832 <free+0x9c>
 828:	f0 93 8b 03 	sts	0x038B, r31
 82c:	e0 93 8a 03 	sts	0x038A, r30
 830:	3e c0       	rjmp	.+124    	; 0x8ae <free+0x118>
 832:	d9 01       	movw	r26, r18
 834:	13 96       	adiw	r26, 0x03	; 3
 836:	fc 93       	st	X, r31
 838:	ee 93       	st	-X, r30
 83a:	12 97       	sbiw	r26, 0x02	; 2
 83c:	4d 91       	ld	r20, X+
 83e:	5d 91       	ld	r21, X+
 840:	a4 0f       	add	r26, r20
 842:	b5 1f       	adc	r27, r21
 844:	ea 17       	cp	r30, r26
 846:	fb 07       	cpc	r31, r27
 848:	79 f4       	brne	.+30     	; 0x868 <free+0xd2>
 84a:	80 81       	ld	r24, Z
 84c:	91 81       	ldd	r25, Z+1	; 0x01
 84e:	84 0f       	add	r24, r20
 850:	95 1f       	adc	r25, r21
 852:	02 96       	adiw	r24, 0x02	; 2
 854:	d9 01       	movw	r26, r18
 856:	11 96       	adiw	r26, 0x01	; 1
 858:	9c 93       	st	X, r25
 85a:	8e 93       	st	-X, r24
 85c:	82 81       	ldd	r24, Z+2	; 0x02
 85e:	93 81       	ldd	r25, Z+3	; 0x03
 860:	13 96       	adiw	r26, 0x03	; 3
 862:	9c 93       	st	X, r25
 864:	8e 93       	st	-X, r24
 866:	12 97       	sbiw	r26, 0x02	; 2
 868:	e0 e0       	ldi	r30, 0x00	; 0
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	9b 81       	ldd	r25, Y+3	; 0x03
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	19 f0       	breq	.+6      	; 0x87a <free+0xe4>
 874:	fe 01       	movw	r30, r28
 876:	ec 01       	movw	r28, r24
 878:	f9 cf       	rjmp	.-14     	; 0x86c <free+0xd6>
 87a:	ce 01       	movw	r24, r28
 87c:	02 96       	adiw	r24, 0x02	; 2
 87e:	28 81       	ld	r18, Y
 880:	39 81       	ldd	r19, Y+1	; 0x01
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	20 91 88 03 	lds	r18, 0x0388
 88a:	30 91 89 03 	lds	r19, 0x0389
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	69 f4       	brne	.+26     	; 0x8ae <free+0x118>
 894:	30 97       	sbiw	r30, 0x00	; 0
 896:	29 f4       	brne	.+10     	; 0x8a2 <free+0x10c>
 898:	10 92 8b 03 	sts	0x038B, r1
 89c:	10 92 8a 03 	sts	0x038A, r1
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <free+0x110>
 8a2:	13 82       	std	Z+3, r1	; 0x03
 8a4:	12 82       	std	Z+2, r1	; 0x02
 8a6:	d0 93 89 03 	sts	0x0389, r29
 8aa:	c0 93 88 03 	sts	0x0388, r28
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <fdevopen>:
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	ec 01       	movw	r28, r24
 8be:	8b 01       	movw	r16, r22
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	31 f4       	brne	.+12     	; 0x8d0 <fdevopen+0x1c>
 8c4:	61 15       	cp	r22, r1
 8c6:	71 05       	cpc	r23, r1
 8c8:	19 f4       	brne	.+6      	; 0x8d0 <fdevopen+0x1c>
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	37 c0       	rjmp	.+110    	; 0x93e <fdevopen+0x8a>
 8d0:	6e e0       	ldi	r22, 0x0E	; 14
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	38 d2       	rcall	.+1136   	; 0xd4a <calloc>
 8da:	fc 01       	movw	r30, r24
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	a9 f3       	breq	.-22     	; 0x8ca <fdevopen+0x16>
 8e0:	80 e8       	ldi	r24, 0x80	; 128
 8e2:	83 83       	std	Z+3, r24	; 0x03
 8e4:	01 15       	cp	r16, r1
 8e6:	11 05       	cpc	r17, r1
 8e8:	71 f0       	breq	.+28     	; 0x906 <fdevopen+0x52>
 8ea:	13 87       	std	Z+11, r17	; 0x0b
 8ec:	02 87       	std	Z+10, r16	; 0x0a
 8ee:	81 e8       	ldi	r24, 0x81	; 129
 8f0:	83 83       	std	Z+3, r24	; 0x03
 8f2:	80 91 8c 03 	lds	r24, 0x038C
 8f6:	90 91 8d 03 	lds	r25, 0x038D
 8fa:	89 2b       	or	r24, r25
 8fc:	21 f4       	brne	.+8      	; 0x906 <fdevopen+0x52>
 8fe:	f0 93 8d 03 	sts	0x038D, r31
 902:	e0 93 8c 03 	sts	0x038C, r30
 906:	20 97       	sbiw	r28, 0x00	; 0
 908:	c9 f0       	breq	.+50     	; 0x93c <fdevopen+0x88>
 90a:	d1 87       	std	Z+9, r29	; 0x09
 90c:	c0 87       	std	Z+8, r28	; 0x08
 90e:	83 81       	ldd	r24, Z+3	; 0x03
 910:	82 60       	ori	r24, 0x02	; 2
 912:	83 83       	std	Z+3, r24	; 0x03
 914:	80 91 8e 03 	lds	r24, 0x038E
 918:	90 91 8f 03 	lds	r25, 0x038F
 91c:	89 2b       	or	r24, r25
 91e:	71 f4       	brne	.+28     	; 0x93c <fdevopen+0x88>
 920:	f0 93 8f 03 	sts	0x038F, r31
 924:	e0 93 8e 03 	sts	0x038E, r30
 928:	80 91 90 03 	lds	r24, 0x0390
 92c:	90 91 91 03 	lds	r25, 0x0391
 930:	89 2b       	or	r24, r25
 932:	21 f4       	brne	.+8      	; 0x93c <fdevopen+0x88>
 934:	f0 93 91 03 	sts	0x0391, r31
 938:	e0 93 90 03 	sts	0x0390, r30
 93c:	cf 01       	movw	r24, r30
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <printf>:
 948:	a0 e0       	ldi	r26, 0x00	; 0
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	e9 ea       	ldi	r30, 0xA9	; 169
 94e:	f4 e0       	ldi	r31, 0x04	; 4
 950:	d3 c2       	rjmp	.+1446   	; 0xef8 <__prologue_saves__+0x20>
 952:	fe 01       	movw	r30, r28
 954:	35 96       	adiw	r30, 0x05	; 5
 956:	61 91       	ld	r22, Z+
 958:	71 91       	ld	r23, Z+
 95a:	af 01       	movw	r20, r30
 95c:	80 91 8e 03 	lds	r24, 0x038E
 960:	90 91 8f 03 	lds	r25, 0x038F
 964:	2f d0       	rcall	.+94     	; 0x9c4 <vfprintf>
 966:	e2 e0       	ldi	r30, 0x02	; 2
 968:	e3 c2       	rjmp	.+1478   	; 0xf30 <__epilogue_restores__+0x20>

0000096a <puts>:
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	e0 91 8e 03 	lds	r30, 0x038E
 976:	f0 91 8f 03 	lds	r31, 0x038F
 97a:	23 81       	ldd	r18, Z+3	; 0x03
 97c:	21 ff       	sbrs	r18, 1
 97e:	1b c0       	rjmp	.+54     	; 0x9b6 <puts+0x4c>
 980:	ec 01       	movw	r28, r24
 982:	00 e0       	ldi	r16, 0x00	; 0
 984:	10 e0       	ldi	r17, 0x00	; 0
 986:	89 91       	ld	r24, Y+
 988:	60 91 8e 03 	lds	r22, 0x038E
 98c:	70 91 8f 03 	lds	r23, 0x038F
 990:	db 01       	movw	r26, r22
 992:	18 96       	adiw	r26, 0x08	; 8
 994:	ed 91       	ld	r30, X+
 996:	fc 91       	ld	r31, X
 998:	19 97       	sbiw	r26, 0x09	; 9
 99a:	88 23       	and	r24, r24
 99c:	31 f0       	breq	.+12     	; 0x9aa <puts+0x40>
 99e:	09 95       	icall
 9a0:	89 2b       	or	r24, r25
 9a2:	89 f3       	breq	.-30     	; 0x986 <puts+0x1c>
 9a4:	0f ef       	ldi	r16, 0xFF	; 255
 9a6:	1f ef       	ldi	r17, 0xFF	; 255
 9a8:	ee cf       	rjmp	.-36     	; 0x986 <puts+0x1c>
 9aa:	8a e0       	ldi	r24, 0x0A	; 10
 9ac:	09 95       	icall
 9ae:	89 2b       	or	r24, r25
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <puts+0x4c>
 9b2:	c8 01       	movw	r24, r16
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <puts+0x50>
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	9f ef       	ldi	r25, 0xFF	; 255
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <vfprintf>:
 9c4:	ac e0       	ldi	r26, 0x0C	; 12
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	e7 ee       	ldi	r30, 0xE7	; 231
 9ca:	f4 e0       	ldi	r31, 0x04	; 4
 9cc:	85 c2       	rjmp	.+1290   	; 0xed8 <__prologue_saves__>
 9ce:	7c 01       	movw	r14, r24
 9d0:	6b 01       	movw	r12, r22
 9d2:	8a 01       	movw	r16, r20
 9d4:	fc 01       	movw	r30, r24
 9d6:	17 82       	std	Z+7, r1	; 0x07
 9d8:	16 82       	std	Z+6, r1	; 0x06
 9da:	83 81       	ldd	r24, Z+3	; 0x03
 9dc:	81 ff       	sbrs	r24, 1
 9de:	b0 c1       	rjmp	.+864    	; 0xd40 <vfprintf+0x37c>
 9e0:	ce 01       	movw	r24, r28
 9e2:	01 96       	adiw	r24, 0x01	; 1
 9e4:	4c 01       	movw	r8, r24
 9e6:	f7 01       	movw	r30, r14
 9e8:	93 81       	ldd	r25, Z+3	; 0x03
 9ea:	f6 01       	movw	r30, r12
 9ec:	93 fd       	sbrc	r25, 3
 9ee:	85 91       	lpm	r24, Z+
 9f0:	93 ff       	sbrs	r25, 3
 9f2:	81 91       	ld	r24, Z+
 9f4:	6f 01       	movw	r12, r30
 9f6:	88 23       	and	r24, r24
 9f8:	09 f4       	brne	.+2      	; 0x9fc <vfprintf+0x38>
 9fa:	9e c1       	rjmp	.+828    	; 0xd38 <vfprintf+0x374>
 9fc:	85 32       	cpi	r24, 0x25	; 37
 9fe:	39 f4       	brne	.+14     	; 0xa0e <vfprintf+0x4a>
 a00:	93 fd       	sbrc	r25, 3
 a02:	85 91       	lpm	r24, Z+
 a04:	93 ff       	sbrs	r25, 3
 a06:	81 91       	ld	r24, Z+
 a08:	6f 01       	movw	r12, r30
 a0a:	85 32       	cpi	r24, 0x25	; 37
 a0c:	21 f4       	brne	.+8      	; 0xa16 <vfprintf+0x52>
 a0e:	b7 01       	movw	r22, r14
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	d2 d1       	rcall	.+932    	; 0xdb8 <fputc>
 a14:	e8 cf       	rjmp	.-48     	; 0x9e6 <vfprintf+0x22>
 a16:	51 2c       	mov	r5, r1
 a18:	31 2c       	mov	r3, r1
 a1a:	20 e0       	ldi	r18, 0x00	; 0
 a1c:	20 32       	cpi	r18, 0x20	; 32
 a1e:	a0 f4       	brcc	.+40     	; 0xa48 <vfprintf+0x84>
 a20:	8b 32       	cpi	r24, 0x2B	; 43
 a22:	69 f0       	breq	.+26     	; 0xa3e <vfprintf+0x7a>
 a24:	30 f4       	brcc	.+12     	; 0xa32 <vfprintf+0x6e>
 a26:	80 32       	cpi	r24, 0x20	; 32
 a28:	59 f0       	breq	.+22     	; 0xa40 <vfprintf+0x7c>
 a2a:	83 32       	cpi	r24, 0x23	; 35
 a2c:	69 f4       	brne	.+26     	; 0xa48 <vfprintf+0x84>
 a2e:	20 61       	ori	r18, 0x10	; 16
 a30:	2c c0       	rjmp	.+88     	; 0xa8a <vfprintf+0xc6>
 a32:	8d 32       	cpi	r24, 0x2D	; 45
 a34:	39 f0       	breq	.+14     	; 0xa44 <vfprintf+0x80>
 a36:	80 33       	cpi	r24, 0x30	; 48
 a38:	39 f4       	brne	.+14     	; 0xa48 <vfprintf+0x84>
 a3a:	21 60       	ori	r18, 0x01	; 1
 a3c:	26 c0       	rjmp	.+76     	; 0xa8a <vfprintf+0xc6>
 a3e:	22 60       	ori	r18, 0x02	; 2
 a40:	24 60       	ori	r18, 0x04	; 4
 a42:	23 c0       	rjmp	.+70     	; 0xa8a <vfprintf+0xc6>
 a44:	28 60       	ori	r18, 0x08	; 8
 a46:	21 c0       	rjmp	.+66     	; 0xa8a <vfprintf+0xc6>
 a48:	27 fd       	sbrc	r18, 7
 a4a:	27 c0       	rjmp	.+78     	; 0xa9a <vfprintf+0xd6>
 a4c:	30 ed       	ldi	r19, 0xD0	; 208
 a4e:	38 0f       	add	r19, r24
 a50:	3a 30       	cpi	r19, 0x0A	; 10
 a52:	78 f4       	brcc	.+30     	; 0xa72 <vfprintf+0xae>
 a54:	26 ff       	sbrs	r18, 6
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <vfprintf+0xa0>
 a58:	fa e0       	ldi	r31, 0x0A	; 10
 a5a:	5f 9e       	mul	r5, r31
 a5c:	30 0d       	add	r19, r0
 a5e:	11 24       	eor	r1, r1
 a60:	53 2e       	mov	r5, r19
 a62:	13 c0       	rjmp	.+38     	; 0xa8a <vfprintf+0xc6>
 a64:	8a e0       	ldi	r24, 0x0A	; 10
 a66:	38 9e       	mul	r3, r24
 a68:	30 0d       	add	r19, r0
 a6a:	11 24       	eor	r1, r1
 a6c:	33 2e       	mov	r3, r19
 a6e:	20 62       	ori	r18, 0x20	; 32
 a70:	0c c0       	rjmp	.+24     	; 0xa8a <vfprintf+0xc6>
 a72:	8e 32       	cpi	r24, 0x2E	; 46
 a74:	21 f4       	brne	.+8      	; 0xa7e <vfprintf+0xba>
 a76:	26 fd       	sbrc	r18, 6
 a78:	5f c1       	rjmp	.+702    	; 0xd38 <vfprintf+0x374>
 a7a:	20 64       	ori	r18, 0x40	; 64
 a7c:	06 c0       	rjmp	.+12     	; 0xa8a <vfprintf+0xc6>
 a7e:	8c 36       	cpi	r24, 0x6C	; 108
 a80:	11 f4       	brne	.+4      	; 0xa86 <vfprintf+0xc2>
 a82:	20 68       	ori	r18, 0x80	; 128
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <vfprintf+0xc6>
 a86:	88 36       	cpi	r24, 0x68	; 104
 a88:	41 f4       	brne	.+16     	; 0xa9a <vfprintf+0xd6>
 a8a:	f6 01       	movw	r30, r12
 a8c:	93 fd       	sbrc	r25, 3
 a8e:	85 91       	lpm	r24, Z+
 a90:	93 ff       	sbrs	r25, 3
 a92:	81 91       	ld	r24, Z+
 a94:	6f 01       	movw	r12, r30
 a96:	81 11       	cpse	r24, r1
 a98:	c1 cf       	rjmp	.-126    	; 0xa1c <vfprintf+0x58>
 a9a:	98 2f       	mov	r25, r24
 a9c:	9f 7d       	andi	r25, 0xDF	; 223
 a9e:	95 54       	subi	r25, 0x45	; 69
 aa0:	93 30       	cpi	r25, 0x03	; 3
 aa2:	28 f4       	brcc	.+10     	; 0xaae <vfprintf+0xea>
 aa4:	0c 5f       	subi	r16, 0xFC	; 252
 aa6:	1f 4f       	sbci	r17, 0xFF	; 255
 aa8:	ff e3       	ldi	r31, 0x3F	; 63
 aaa:	f9 83       	std	Y+1, r31	; 0x01
 aac:	0d c0       	rjmp	.+26     	; 0xac8 <vfprintf+0x104>
 aae:	83 36       	cpi	r24, 0x63	; 99
 ab0:	31 f0       	breq	.+12     	; 0xabe <vfprintf+0xfa>
 ab2:	83 37       	cpi	r24, 0x73	; 115
 ab4:	71 f0       	breq	.+28     	; 0xad2 <vfprintf+0x10e>
 ab6:	83 35       	cpi	r24, 0x53	; 83
 ab8:	09 f0       	breq	.+2      	; 0xabc <vfprintf+0xf8>
 aba:	57 c0       	rjmp	.+174    	; 0xb6a <vfprintf+0x1a6>
 abc:	21 c0       	rjmp	.+66     	; 0xb00 <vfprintf+0x13c>
 abe:	f8 01       	movw	r30, r16
 ac0:	80 81       	ld	r24, Z
 ac2:	89 83       	std	Y+1, r24	; 0x01
 ac4:	0e 5f       	subi	r16, 0xFE	; 254
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	44 24       	eor	r4, r4
 aca:	43 94       	inc	r4
 acc:	51 2c       	mov	r5, r1
 ace:	54 01       	movw	r10, r8
 ad0:	14 c0       	rjmp	.+40     	; 0xafa <vfprintf+0x136>
 ad2:	38 01       	movw	r6, r16
 ad4:	f2 e0       	ldi	r31, 0x02	; 2
 ad6:	6f 0e       	add	r6, r31
 ad8:	71 1c       	adc	r7, r1
 ada:	f8 01       	movw	r30, r16
 adc:	a0 80       	ld	r10, Z
 ade:	b1 80       	ldd	r11, Z+1	; 0x01
 ae0:	26 ff       	sbrs	r18, 6
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <vfprintf+0x126>
 ae4:	65 2d       	mov	r22, r5
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <vfprintf+0x12a>
 aea:	6f ef       	ldi	r22, 0xFF	; 255
 aec:	7f ef       	ldi	r23, 0xFF	; 255
 aee:	c5 01       	movw	r24, r10
 af0:	2c 87       	std	Y+12, r18	; 0x0c
 af2:	57 d1       	rcall	.+686    	; 0xda2 <strnlen>
 af4:	2c 01       	movw	r4, r24
 af6:	83 01       	movw	r16, r6
 af8:	2c 85       	ldd	r18, Y+12	; 0x0c
 afa:	2f 77       	andi	r18, 0x7F	; 127
 afc:	22 2e       	mov	r2, r18
 afe:	16 c0       	rjmp	.+44     	; 0xb2c <vfprintf+0x168>
 b00:	38 01       	movw	r6, r16
 b02:	f2 e0       	ldi	r31, 0x02	; 2
 b04:	6f 0e       	add	r6, r31
 b06:	71 1c       	adc	r7, r1
 b08:	f8 01       	movw	r30, r16
 b0a:	a0 80       	ld	r10, Z
 b0c:	b1 80       	ldd	r11, Z+1	; 0x01
 b0e:	26 ff       	sbrs	r18, 6
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <vfprintf+0x154>
 b12:	65 2d       	mov	r22, r5
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <vfprintf+0x158>
 b18:	6f ef       	ldi	r22, 0xFF	; 255
 b1a:	7f ef       	ldi	r23, 0xFF	; 255
 b1c:	c5 01       	movw	r24, r10
 b1e:	2c 87       	std	Y+12, r18	; 0x0c
 b20:	2e d1       	rcall	.+604    	; 0xd7e <strnlen_P>
 b22:	2c 01       	movw	r4, r24
 b24:	2c 85       	ldd	r18, Y+12	; 0x0c
 b26:	20 68       	ori	r18, 0x80	; 128
 b28:	22 2e       	mov	r2, r18
 b2a:	83 01       	movw	r16, r6
 b2c:	23 fc       	sbrc	r2, 3
 b2e:	19 c0       	rjmp	.+50     	; 0xb62 <vfprintf+0x19e>
 b30:	83 2d       	mov	r24, r3
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	48 16       	cp	r4, r24
 b36:	59 06       	cpc	r5, r25
 b38:	a0 f4       	brcc	.+40     	; 0xb62 <vfprintf+0x19e>
 b3a:	b7 01       	movw	r22, r14
 b3c:	80 e2       	ldi	r24, 0x20	; 32
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	3b d1       	rcall	.+630    	; 0xdb8 <fputc>
 b42:	3a 94       	dec	r3
 b44:	f5 cf       	rjmp	.-22     	; 0xb30 <vfprintf+0x16c>
 b46:	f5 01       	movw	r30, r10
 b48:	27 fc       	sbrc	r2, 7
 b4a:	85 91       	lpm	r24, Z+
 b4c:	27 fe       	sbrs	r2, 7
 b4e:	81 91       	ld	r24, Z+
 b50:	5f 01       	movw	r10, r30
 b52:	b7 01       	movw	r22, r14
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	30 d1       	rcall	.+608    	; 0xdb8 <fputc>
 b58:	31 10       	cpse	r3, r1
 b5a:	3a 94       	dec	r3
 b5c:	f1 e0       	ldi	r31, 0x01	; 1
 b5e:	4f 1a       	sub	r4, r31
 b60:	51 08       	sbc	r5, r1
 b62:	41 14       	cp	r4, r1
 b64:	51 04       	cpc	r5, r1
 b66:	79 f7       	brne	.-34     	; 0xb46 <vfprintf+0x182>
 b68:	de c0       	rjmp	.+444    	; 0xd26 <vfprintf+0x362>
 b6a:	84 36       	cpi	r24, 0x64	; 100
 b6c:	11 f0       	breq	.+4      	; 0xb72 <vfprintf+0x1ae>
 b6e:	89 36       	cpi	r24, 0x69	; 105
 b70:	31 f5       	brne	.+76     	; 0xbbe <vfprintf+0x1fa>
 b72:	f8 01       	movw	r30, r16
 b74:	27 ff       	sbrs	r18, 7
 b76:	07 c0       	rjmp	.+14     	; 0xb86 <vfprintf+0x1c2>
 b78:	60 81       	ld	r22, Z
 b7a:	71 81       	ldd	r23, Z+1	; 0x01
 b7c:	82 81       	ldd	r24, Z+2	; 0x02
 b7e:	93 81       	ldd	r25, Z+3	; 0x03
 b80:	0c 5f       	subi	r16, 0xFC	; 252
 b82:	1f 4f       	sbci	r17, 0xFF	; 255
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <vfprintf+0x1d2>
 b86:	60 81       	ld	r22, Z
 b88:	71 81       	ldd	r23, Z+1	; 0x01
 b8a:	88 27       	eor	r24, r24
 b8c:	77 fd       	sbrc	r23, 7
 b8e:	80 95       	com	r24
 b90:	98 2f       	mov	r25, r24
 b92:	0e 5f       	subi	r16, 0xFE	; 254
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	2f 76       	andi	r18, 0x6F	; 111
 b98:	b2 2e       	mov	r11, r18
 b9a:	97 ff       	sbrs	r25, 7
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x1ec>
 b9e:	90 95       	com	r25
 ba0:	80 95       	com	r24
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	20 68       	ori	r18, 0x80	; 128
 bae:	b2 2e       	mov	r11, r18
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	a4 01       	movw	r20, r8
 bb6:	32 d1       	rcall	.+612    	; 0xe1c <__ultoa_invert>
 bb8:	a8 2e       	mov	r10, r24
 bba:	a8 18       	sub	r10, r8
 bbc:	43 c0       	rjmp	.+134    	; 0xc44 <vfprintf+0x280>
 bbe:	85 37       	cpi	r24, 0x75	; 117
 bc0:	29 f4       	brne	.+10     	; 0xbcc <vfprintf+0x208>
 bc2:	2f 7e       	andi	r18, 0xEF	; 239
 bc4:	b2 2e       	mov	r11, r18
 bc6:	2a e0       	ldi	r18, 0x0A	; 10
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	25 c0       	rjmp	.+74     	; 0xc16 <vfprintf+0x252>
 bcc:	f2 2f       	mov	r31, r18
 bce:	f9 7f       	andi	r31, 0xF9	; 249
 bd0:	bf 2e       	mov	r11, r31
 bd2:	8f 36       	cpi	r24, 0x6F	; 111
 bd4:	c1 f0       	breq	.+48     	; 0xc06 <vfprintf+0x242>
 bd6:	18 f4       	brcc	.+6      	; 0xbde <vfprintf+0x21a>
 bd8:	88 35       	cpi	r24, 0x58	; 88
 bda:	79 f0       	breq	.+30     	; 0xbfa <vfprintf+0x236>
 bdc:	ad c0       	rjmp	.+346    	; 0xd38 <vfprintf+0x374>
 bde:	80 37       	cpi	r24, 0x70	; 112
 be0:	19 f0       	breq	.+6      	; 0xbe8 <vfprintf+0x224>
 be2:	88 37       	cpi	r24, 0x78	; 120
 be4:	21 f0       	breq	.+8      	; 0xbee <vfprintf+0x22a>
 be6:	a8 c0       	rjmp	.+336    	; 0xd38 <vfprintf+0x374>
 be8:	2f 2f       	mov	r18, r31
 bea:	20 61       	ori	r18, 0x10	; 16
 bec:	b2 2e       	mov	r11, r18
 bee:	b4 fe       	sbrs	r11, 4
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <vfprintf+0x248>
 bf2:	8b 2d       	mov	r24, r11
 bf4:	84 60       	ori	r24, 0x04	; 4
 bf6:	b8 2e       	mov	r11, r24
 bf8:	09 c0       	rjmp	.+18     	; 0xc0c <vfprintf+0x248>
 bfa:	24 ff       	sbrs	r18, 4
 bfc:	0a c0       	rjmp	.+20     	; 0xc12 <vfprintf+0x24e>
 bfe:	9f 2f       	mov	r25, r31
 c00:	96 60       	ori	r25, 0x06	; 6
 c02:	b9 2e       	mov	r11, r25
 c04:	06 c0       	rjmp	.+12     	; 0xc12 <vfprintf+0x24e>
 c06:	28 e0       	ldi	r18, 0x08	; 8
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	05 c0       	rjmp	.+10     	; 0xc16 <vfprintf+0x252>
 c0c:	20 e1       	ldi	r18, 0x10	; 16
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	02 c0       	rjmp	.+4      	; 0xc16 <vfprintf+0x252>
 c12:	20 e1       	ldi	r18, 0x10	; 16
 c14:	32 e0       	ldi	r19, 0x02	; 2
 c16:	f8 01       	movw	r30, r16
 c18:	b7 fe       	sbrs	r11, 7
 c1a:	07 c0       	rjmp	.+14     	; 0xc2a <vfprintf+0x266>
 c1c:	60 81       	ld	r22, Z
 c1e:	71 81       	ldd	r23, Z+1	; 0x01
 c20:	82 81       	ldd	r24, Z+2	; 0x02
 c22:	93 81       	ldd	r25, Z+3	; 0x03
 c24:	0c 5f       	subi	r16, 0xFC	; 252
 c26:	1f 4f       	sbci	r17, 0xFF	; 255
 c28:	06 c0       	rjmp	.+12     	; 0xc36 <vfprintf+0x272>
 c2a:	60 81       	ld	r22, Z
 c2c:	71 81       	ldd	r23, Z+1	; 0x01
 c2e:	80 e0       	ldi	r24, 0x00	; 0
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	0e 5f       	subi	r16, 0xFE	; 254
 c34:	1f 4f       	sbci	r17, 0xFF	; 255
 c36:	a4 01       	movw	r20, r8
 c38:	f1 d0       	rcall	.+482    	; 0xe1c <__ultoa_invert>
 c3a:	a8 2e       	mov	r10, r24
 c3c:	a8 18       	sub	r10, r8
 c3e:	fb 2d       	mov	r31, r11
 c40:	ff 77       	andi	r31, 0x7F	; 127
 c42:	bf 2e       	mov	r11, r31
 c44:	b6 fe       	sbrs	r11, 6
 c46:	0b c0       	rjmp	.+22     	; 0xc5e <vfprintf+0x29a>
 c48:	2b 2d       	mov	r18, r11
 c4a:	2e 7f       	andi	r18, 0xFE	; 254
 c4c:	a5 14       	cp	r10, r5
 c4e:	50 f4       	brcc	.+20     	; 0xc64 <vfprintf+0x2a0>
 c50:	b4 fe       	sbrs	r11, 4
 c52:	0a c0       	rjmp	.+20     	; 0xc68 <vfprintf+0x2a4>
 c54:	b2 fc       	sbrc	r11, 2
 c56:	08 c0       	rjmp	.+16     	; 0xc68 <vfprintf+0x2a4>
 c58:	2b 2d       	mov	r18, r11
 c5a:	2e 7e       	andi	r18, 0xEE	; 238
 c5c:	05 c0       	rjmp	.+10     	; 0xc68 <vfprintf+0x2a4>
 c5e:	7a 2c       	mov	r7, r10
 c60:	2b 2d       	mov	r18, r11
 c62:	03 c0       	rjmp	.+6      	; 0xc6a <vfprintf+0x2a6>
 c64:	7a 2c       	mov	r7, r10
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <vfprintf+0x2a6>
 c68:	75 2c       	mov	r7, r5
 c6a:	24 ff       	sbrs	r18, 4
 c6c:	0d c0       	rjmp	.+26     	; 0xc88 <vfprintf+0x2c4>
 c6e:	fe 01       	movw	r30, r28
 c70:	ea 0d       	add	r30, r10
 c72:	f1 1d       	adc	r31, r1
 c74:	80 81       	ld	r24, Z
 c76:	80 33       	cpi	r24, 0x30	; 48
 c78:	11 f4       	brne	.+4      	; 0xc7e <vfprintf+0x2ba>
 c7a:	29 7e       	andi	r18, 0xE9	; 233
 c7c:	09 c0       	rjmp	.+18     	; 0xc90 <vfprintf+0x2cc>
 c7e:	22 ff       	sbrs	r18, 2
 c80:	06 c0       	rjmp	.+12     	; 0xc8e <vfprintf+0x2ca>
 c82:	73 94       	inc	r7
 c84:	73 94       	inc	r7
 c86:	04 c0       	rjmp	.+8      	; 0xc90 <vfprintf+0x2cc>
 c88:	82 2f       	mov	r24, r18
 c8a:	86 78       	andi	r24, 0x86	; 134
 c8c:	09 f0       	breq	.+2      	; 0xc90 <vfprintf+0x2cc>
 c8e:	73 94       	inc	r7
 c90:	23 fd       	sbrc	r18, 3
 c92:	12 c0       	rjmp	.+36     	; 0xcb8 <vfprintf+0x2f4>
 c94:	20 ff       	sbrs	r18, 0
 c96:	06 c0       	rjmp	.+12     	; 0xca4 <vfprintf+0x2e0>
 c98:	5a 2c       	mov	r5, r10
 c9a:	73 14       	cp	r7, r3
 c9c:	18 f4       	brcc	.+6      	; 0xca4 <vfprintf+0x2e0>
 c9e:	53 0c       	add	r5, r3
 ca0:	57 18       	sub	r5, r7
 ca2:	73 2c       	mov	r7, r3
 ca4:	73 14       	cp	r7, r3
 ca6:	60 f4       	brcc	.+24     	; 0xcc0 <vfprintf+0x2fc>
 ca8:	b7 01       	movw	r22, r14
 caa:	80 e2       	ldi	r24, 0x20	; 32
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	2c 87       	std	Y+12, r18	; 0x0c
 cb0:	83 d0       	rcall	.+262    	; 0xdb8 <fputc>
 cb2:	73 94       	inc	r7
 cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
 cb6:	f6 cf       	rjmp	.-20     	; 0xca4 <vfprintf+0x2e0>
 cb8:	73 14       	cp	r7, r3
 cba:	10 f4       	brcc	.+4      	; 0xcc0 <vfprintf+0x2fc>
 cbc:	37 18       	sub	r3, r7
 cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <vfprintf+0x2fe>
 cc0:	31 2c       	mov	r3, r1
 cc2:	24 ff       	sbrs	r18, 4
 cc4:	11 c0       	rjmp	.+34     	; 0xce8 <vfprintf+0x324>
 cc6:	b7 01       	movw	r22, r14
 cc8:	80 e3       	ldi	r24, 0x30	; 48
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	2c 87       	std	Y+12, r18	; 0x0c
 cce:	74 d0       	rcall	.+232    	; 0xdb8 <fputc>
 cd0:	2c 85       	ldd	r18, Y+12	; 0x0c
 cd2:	22 ff       	sbrs	r18, 2
 cd4:	16 c0       	rjmp	.+44     	; 0xd02 <vfprintf+0x33e>
 cd6:	21 ff       	sbrs	r18, 1
 cd8:	03 c0       	rjmp	.+6      	; 0xce0 <vfprintf+0x31c>
 cda:	88 e5       	ldi	r24, 0x58	; 88
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x320>
 ce0:	88 e7       	ldi	r24, 0x78	; 120
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	b7 01       	movw	r22, r14
 ce6:	0c c0       	rjmp	.+24     	; 0xd00 <vfprintf+0x33c>
 ce8:	82 2f       	mov	r24, r18
 cea:	86 78       	andi	r24, 0x86	; 134
 cec:	51 f0       	breq	.+20     	; 0xd02 <vfprintf+0x33e>
 cee:	21 fd       	sbrc	r18, 1
 cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <vfprintf+0x332>
 cf2:	80 e2       	ldi	r24, 0x20	; 32
 cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <vfprintf+0x334>
 cf6:	8b e2       	ldi	r24, 0x2B	; 43
 cf8:	27 fd       	sbrc	r18, 7
 cfa:	8d e2       	ldi	r24, 0x2D	; 45
 cfc:	b7 01       	movw	r22, r14
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	5b d0       	rcall	.+182    	; 0xdb8 <fputc>
 d02:	a5 14       	cp	r10, r5
 d04:	30 f4       	brcc	.+12     	; 0xd12 <vfprintf+0x34e>
 d06:	b7 01       	movw	r22, r14
 d08:	80 e3       	ldi	r24, 0x30	; 48
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	55 d0       	rcall	.+170    	; 0xdb8 <fputc>
 d0e:	5a 94       	dec	r5
 d10:	f8 cf       	rjmp	.-16     	; 0xd02 <vfprintf+0x33e>
 d12:	aa 94       	dec	r10
 d14:	f4 01       	movw	r30, r8
 d16:	ea 0d       	add	r30, r10
 d18:	f1 1d       	adc	r31, r1
 d1a:	80 81       	ld	r24, Z
 d1c:	b7 01       	movw	r22, r14
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	4b d0       	rcall	.+150    	; 0xdb8 <fputc>
 d22:	a1 10       	cpse	r10, r1
 d24:	f6 cf       	rjmp	.-20     	; 0xd12 <vfprintf+0x34e>
 d26:	33 20       	and	r3, r3
 d28:	09 f4       	brne	.+2      	; 0xd2c <vfprintf+0x368>
 d2a:	5d ce       	rjmp	.-838    	; 0x9e6 <vfprintf+0x22>
 d2c:	b7 01       	movw	r22, r14
 d2e:	80 e2       	ldi	r24, 0x20	; 32
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	42 d0       	rcall	.+132    	; 0xdb8 <fputc>
 d34:	3a 94       	dec	r3
 d36:	f7 cf       	rjmp	.-18     	; 0xd26 <vfprintf+0x362>
 d38:	f7 01       	movw	r30, r14
 d3a:	86 81       	ldd	r24, Z+6	; 0x06
 d3c:	97 81       	ldd	r25, Z+7	; 0x07
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x380>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	9f ef       	ldi	r25, 0xFF	; 255
 d44:	2c 96       	adiw	r28, 0x0c	; 12
 d46:	e2 e1       	ldi	r30, 0x12	; 18
 d48:	e3 c0       	rjmp	.+454    	; 0xf10 <__epilogue_restores__>

00000d4a <calloc>:
 d4a:	0f 93       	push	r16
 d4c:	1f 93       	push	r17
 d4e:	cf 93       	push	r28
 d50:	df 93       	push	r29
 d52:	86 9f       	mul	r24, r22
 d54:	80 01       	movw	r16, r0
 d56:	87 9f       	mul	r24, r23
 d58:	10 0d       	add	r17, r0
 d5a:	96 9f       	mul	r25, r22
 d5c:	10 0d       	add	r17, r0
 d5e:	11 24       	eor	r1, r1
 d60:	c8 01       	movw	r24, r16
 d62:	81 dc       	rcall	.-1790   	; 0x666 <malloc>
 d64:	ec 01       	movw	r28, r24
 d66:	00 97       	sbiw	r24, 0x00	; 0
 d68:	21 f0       	breq	.+8      	; 0xd72 <calloc+0x28>
 d6a:	a8 01       	movw	r20, r16
 d6c:	60 e0       	ldi	r22, 0x00	; 0
 d6e:	70 e0       	ldi	r23, 0x00	; 0
 d70:	11 d0       	rcall	.+34     	; 0xd94 <memset>
 d72:	ce 01       	movw	r24, r28
 d74:	df 91       	pop	r29
 d76:	cf 91       	pop	r28
 d78:	1f 91       	pop	r17
 d7a:	0f 91       	pop	r16
 d7c:	08 95       	ret

00000d7e <strnlen_P>:
 d7e:	fc 01       	movw	r30, r24
 d80:	05 90       	lpm	r0, Z+
 d82:	61 50       	subi	r22, 0x01	; 1
 d84:	70 40       	sbci	r23, 0x00	; 0
 d86:	01 10       	cpse	r0, r1
 d88:	d8 f7       	brcc	.-10     	; 0xd80 <strnlen_P+0x2>
 d8a:	80 95       	com	r24
 d8c:	90 95       	com	r25
 d8e:	8e 0f       	add	r24, r30
 d90:	9f 1f       	adc	r25, r31
 d92:	08 95       	ret

00000d94 <memset>:
 d94:	dc 01       	movw	r26, r24
 d96:	01 c0       	rjmp	.+2      	; 0xd9a <memset+0x6>
 d98:	6d 93       	st	X+, r22
 d9a:	41 50       	subi	r20, 0x01	; 1
 d9c:	50 40       	sbci	r21, 0x00	; 0
 d9e:	e0 f7       	brcc	.-8      	; 0xd98 <memset+0x4>
 da0:	08 95       	ret

00000da2 <strnlen>:
 da2:	fc 01       	movw	r30, r24
 da4:	61 50       	subi	r22, 0x01	; 1
 da6:	70 40       	sbci	r23, 0x00	; 0
 da8:	01 90       	ld	r0, Z+
 daa:	01 10       	cpse	r0, r1
 dac:	d8 f7       	brcc	.-10     	; 0xda4 <strnlen+0x2>
 dae:	80 95       	com	r24
 db0:	90 95       	com	r25
 db2:	8e 0f       	add	r24, r30
 db4:	9f 1f       	adc	r25, r31
 db6:	08 95       	ret

00000db8 <fputc>:
 db8:	0f 93       	push	r16
 dba:	1f 93       	push	r17
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	18 2f       	mov	r17, r24
 dc2:	09 2f       	mov	r16, r25
 dc4:	eb 01       	movw	r28, r22
 dc6:	8b 81       	ldd	r24, Y+3	; 0x03
 dc8:	81 fd       	sbrc	r24, 1
 dca:	03 c0       	rjmp	.+6      	; 0xdd2 <fputc+0x1a>
 dcc:	8f ef       	ldi	r24, 0xFF	; 255
 dce:	9f ef       	ldi	r25, 0xFF	; 255
 dd0:	20 c0       	rjmp	.+64     	; 0xe12 <fputc+0x5a>
 dd2:	82 ff       	sbrs	r24, 2
 dd4:	10 c0       	rjmp	.+32     	; 0xdf6 <fputc+0x3e>
 dd6:	4e 81       	ldd	r20, Y+6	; 0x06
 dd8:	5f 81       	ldd	r21, Y+7	; 0x07
 dda:	2c 81       	ldd	r18, Y+4	; 0x04
 ddc:	3d 81       	ldd	r19, Y+5	; 0x05
 dde:	42 17       	cp	r20, r18
 de0:	53 07       	cpc	r21, r19
 de2:	7c f4       	brge	.+30     	; 0xe02 <fputc+0x4a>
 de4:	e8 81       	ld	r30, Y
 de6:	f9 81       	ldd	r31, Y+1	; 0x01
 de8:	9f 01       	movw	r18, r30
 dea:	2f 5f       	subi	r18, 0xFF	; 255
 dec:	3f 4f       	sbci	r19, 0xFF	; 255
 dee:	39 83       	std	Y+1, r19	; 0x01
 df0:	28 83       	st	Y, r18
 df2:	10 83       	st	Z, r17
 df4:	06 c0       	rjmp	.+12     	; 0xe02 <fputc+0x4a>
 df6:	e8 85       	ldd	r30, Y+8	; 0x08
 df8:	f9 85       	ldd	r31, Y+9	; 0x09
 dfa:	81 2f       	mov	r24, r17
 dfc:	09 95       	icall
 dfe:	89 2b       	or	r24, r25
 e00:	29 f7       	brne	.-54     	; 0xdcc <fputc+0x14>
 e02:	2e 81       	ldd	r18, Y+6	; 0x06
 e04:	3f 81       	ldd	r19, Y+7	; 0x07
 e06:	2f 5f       	subi	r18, 0xFF	; 255
 e08:	3f 4f       	sbci	r19, 0xFF	; 255
 e0a:	3f 83       	std	Y+7, r19	; 0x07
 e0c:	2e 83       	std	Y+6, r18	; 0x06
 e0e:	81 2f       	mov	r24, r17
 e10:	90 2f       	mov	r25, r16
 e12:	df 91       	pop	r29
 e14:	cf 91       	pop	r28
 e16:	1f 91       	pop	r17
 e18:	0f 91       	pop	r16
 e1a:	08 95       	ret

00000e1c <__ultoa_invert>:
 e1c:	fa 01       	movw	r30, r20
 e1e:	aa 27       	eor	r26, r26
 e20:	28 30       	cpi	r18, 0x08	; 8
 e22:	51 f1       	breq	.+84     	; 0xe78 <__ultoa_invert+0x5c>
 e24:	20 31       	cpi	r18, 0x10	; 16
 e26:	81 f1       	breq	.+96     	; 0xe88 <__ultoa_invert+0x6c>
 e28:	e8 94       	clt
 e2a:	6f 93       	push	r22
 e2c:	6e 7f       	andi	r22, 0xFE	; 254
 e2e:	6e 5f       	subi	r22, 0xFE	; 254
 e30:	7f 4f       	sbci	r23, 0xFF	; 255
 e32:	8f 4f       	sbci	r24, 0xFF	; 255
 e34:	9f 4f       	sbci	r25, 0xFF	; 255
 e36:	af 4f       	sbci	r26, 0xFF	; 255
 e38:	b1 e0       	ldi	r27, 0x01	; 1
 e3a:	3e d0       	rcall	.+124    	; 0xeb8 <__ultoa_invert+0x9c>
 e3c:	b4 e0       	ldi	r27, 0x04	; 4
 e3e:	3c d0       	rcall	.+120    	; 0xeb8 <__ultoa_invert+0x9c>
 e40:	67 0f       	add	r22, r23
 e42:	78 1f       	adc	r23, r24
 e44:	89 1f       	adc	r24, r25
 e46:	9a 1f       	adc	r25, r26
 e48:	a1 1d       	adc	r26, r1
 e4a:	68 0f       	add	r22, r24
 e4c:	79 1f       	adc	r23, r25
 e4e:	8a 1f       	adc	r24, r26
 e50:	91 1d       	adc	r25, r1
 e52:	a1 1d       	adc	r26, r1
 e54:	6a 0f       	add	r22, r26
 e56:	71 1d       	adc	r23, r1
 e58:	81 1d       	adc	r24, r1
 e5a:	91 1d       	adc	r25, r1
 e5c:	a1 1d       	adc	r26, r1
 e5e:	20 d0       	rcall	.+64     	; 0xea0 <__ultoa_invert+0x84>
 e60:	09 f4       	brne	.+2      	; 0xe64 <__ultoa_invert+0x48>
 e62:	68 94       	set
 e64:	3f 91       	pop	r19
 e66:	2a e0       	ldi	r18, 0x0A	; 10
 e68:	26 9f       	mul	r18, r22
 e6a:	11 24       	eor	r1, r1
 e6c:	30 19       	sub	r19, r0
 e6e:	30 5d       	subi	r19, 0xD0	; 208
 e70:	31 93       	st	Z+, r19
 e72:	de f6       	brtc	.-74     	; 0xe2a <__ultoa_invert+0xe>
 e74:	cf 01       	movw	r24, r30
 e76:	08 95       	ret
 e78:	46 2f       	mov	r20, r22
 e7a:	47 70       	andi	r20, 0x07	; 7
 e7c:	40 5d       	subi	r20, 0xD0	; 208
 e7e:	41 93       	st	Z+, r20
 e80:	b3 e0       	ldi	r27, 0x03	; 3
 e82:	0f d0       	rcall	.+30     	; 0xea2 <__ultoa_invert+0x86>
 e84:	c9 f7       	brne	.-14     	; 0xe78 <__ultoa_invert+0x5c>
 e86:	f6 cf       	rjmp	.-20     	; 0xe74 <__ultoa_invert+0x58>
 e88:	46 2f       	mov	r20, r22
 e8a:	4f 70       	andi	r20, 0x0F	; 15
 e8c:	40 5d       	subi	r20, 0xD0	; 208
 e8e:	4a 33       	cpi	r20, 0x3A	; 58
 e90:	18 f0       	brcs	.+6      	; 0xe98 <__ultoa_invert+0x7c>
 e92:	49 5d       	subi	r20, 0xD9	; 217
 e94:	31 fd       	sbrc	r19, 1
 e96:	40 52       	subi	r20, 0x20	; 32
 e98:	41 93       	st	Z+, r20
 e9a:	02 d0       	rcall	.+4      	; 0xea0 <__ultoa_invert+0x84>
 e9c:	a9 f7       	brne	.-22     	; 0xe88 <__ultoa_invert+0x6c>
 e9e:	ea cf       	rjmp	.-44     	; 0xe74 <__ultoa_invert+0x58>
 ea0:	b4 e0       	ldi	r27, 0x04	; 4
 ea2:	a6 95       	lsr	r26
 ea4:	97 95       	ror	r25
 ea6:	87 95       	ror	r24
 ea8:	77 95       	ror	r23
 eaa:	67 95       	ror	r22
 eac:	ba 95       	dec	r27
 eae:	c9 f7       	brne	.-14     	; 0xea2 <__ultoa_invert+0x86>
 eb0:	00 97       	sbiw	r24, 0x00	; 0
 eb2:	61 05       	cpc	r22, r1
 eb4:	71 05       	cpc	r23, r1
 eb6:	08 95       	ret
 eb8:	9b 01       	movw	r18, r22
 eba:	ac 01       	movw	r20, r24
 ebc:	0a 2e       	mov	r0, r26
 ebe:	06 94       	lsr	r0
 ec0:	57 95       	ror	r21
 ec2:	47 95       	ror	r20
 ec4:	37 95       	ror	r19
 ec6:	27 95       	ror	r18
 ec8:	ba 95       	dec	r27
 eca:	c9 f7       	brne	.-14     	; 0xebe <__ultoa_invert+0xa2>
 ecc:	62 0f       	add	r22, r18
 ece:	73 1f       	adc	r23, r19
 ed0:	84 1f       	adc	r24, r20
 ed2:	95 1f       	adc	r25, r21
 ed4:	a0 1d       	adc	r26, r0
 ed6:	08 95       	ret

00000ed8 <__prologue_saves__>:
 ed8:	2f 92       	push	r2
 eda:	3f 92       	push	r3
 edc:	4f 92       	push	r4
 ede:	5f 92       	push	r5
 ee0:	6f 92       	push	r6
 ee2:	7f 92       	push	r7
 ee4:	8f 92       	push	r8
 ee6:	9f 92       	push	r9
 ee8:	af 92       	push	r10
 eea:	bf 92       	push	r11
 eec:	cf 92       	push	r12
 eee:	df 92       	push	r13
 ef0:	ef 92       	push	r14
 ef2:	ff 92       	push	r15
 ef4:	0f 93       	push	r16
 ef6:	1f 93       	push	r17
 ef8:	cf 93       	push	r28
 efa:	df 93       	push	r29
 efc:	cd b7       	in	r28, 0x3d	; 61
 efe:	de b7       	in	r29, 0x3e	; 62
 f00:	ca 1b       	sub	r28, r26
 f02:	db 0b       	sbc	r29, r27
 f04:	0f b6       	in	r0, 0x3f	; 63
 f06:	f8 94       	cli
 f08:	de bf       	out	0x3e, r29	; 62
 f0a:	0f be       	out	0x3f, r0	; 63
 f0c:	cd bf       	out	0x3d, r28	; 61
 f0e:	09 94       	ijmp

00000f10 <__epilogue_restores__>:
 f10:	2a 88       	ldd	r2, Y+18	; 0x12
 f12:	39 88       	ldd	r3, Y+17	; 0x11
 f14:	48 88       	ldd	r4, Y+16	; 0x10
 f16:	5f 84       	ldd	r5, Y+15	; 0x0f
 f18:	6e 84       	ldd	r6, Y+14	; 0x0e
 f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f20:	aa 84       	ldd	r10, Y+10	; 0x0a
 f22:	b9 84       	ldd	r11, Y+9	; 0x09
 f24:	c8 84       	ldd	r12, Y+8	; 0x08
 f26:	df 80       	ldd	r13, Y+7	; 0x07
 f28:	ee 80       	ldd	r14, Y+6	; 0x06
 f2a:	fd 80       	ldd	r15, Y+5	; 0x05
 f2c:	0c 81       	ldd	r16, Y+4	; 0x04
 f2e:	1b 81       	ldd	r17, Y+3	; 0x03
 f30:	aa 81       	ldd	r26, Y+2	; 0x02
 f32:	b9 81       	ldd	r27, Y+1	; 0x01
 f34:	ce 0f       	add	r28, r30
 f36:	d1 1d       	adc	r29, r1
 f38:	0f b6       	in	r0, 0x3f	; 63
 f3a:	f8 94       	cli
 f3c:	de bf       	out	0x3e, r29	; 62
 f3e:	0f be       	out	0x3f, r0	; 63
 f40:	cd bf       	out	0x3d, r28	; 61
 f42:	ed 01       	movw	r28, r26
 f44:	08 95       	ret

00000f46 <_exit>:
 f46:	f8 94       	cli

00000f48 <__stop_program>:
 f48:	ff cf       	rjmp	.-2      	; 0xf48 <__stop_program>
