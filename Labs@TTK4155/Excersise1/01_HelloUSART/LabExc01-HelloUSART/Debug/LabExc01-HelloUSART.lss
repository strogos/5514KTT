
LabExc01-HelloUSART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  000004f0  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001dc  008001dc  00000660  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b7  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d2  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd1  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000d6ad  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  0000f1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000f29e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000355e  00000000  00000000  0000f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c0       	rjmp	.+132    	; 0xa6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c0       	rjmp	.+128    	; 0xa6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c0       	rjmp	.+124    	; 0xa6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c0       	rjmp	.+120    	; 0xa6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c0       	rjmp	.+116    	; 0xa6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c0       	rjmp	.+112    	; 0xa6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c0       	rjmp	.+108    	; 0xa6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c0       	rjmp	.+104    	; 0xa6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c0       	rjmp	.+100    	; 0xa6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c0       	rjmp	.+96     	; 0xa6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c0       	rjmp	.+92     	; 0xa6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7c c0       	rjmp	.+248    	; 0x146 <__vector_19>
  4e:	00 00       	nop
  50:	2a c0       	rjmp	.+84     	; 0xa6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c0       	rjmp	.+80     	; 0xa6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c0       	rjmp	.+76     	; 0xa6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c0       	rjmp	.+72     	; 0xa6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c0       	rjmp	.+68     	; 0xa6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c0       	rjmp	.+64     	; 0xa6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c0       	rjmp	.+60     	; 0xa6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c0       	rjmp	.+56     	; 0xa6 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ef       	ldi	r30, 0xF0	; 240
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 3d       	cpi	r26, 0xDC	; 220
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac ed       	ldi	r26, 0xDC	; 220
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 3e       	cpi	r26, 0xE8	; 232
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	26 d0       	rcall	.+76     	; 0xf0 <main>
  a4:	23 c2       	rjmp	.+1094   	; 0x4ec <_exit>

000000a6 <__bad_interrupt>:
  a6:	ac cf       	rjmp	.-168    	; 0x0 <__vectors>

000000a8 <usartSendByte>:
///<summary>
///Send a byte using USART
///</summary>
void usartSendByte(uint8_t byteToSend)
{
		while((UCSR0A&(1<<UDRE0))==0);//---------------//Only transmit data if data bus is available (not already transmitting)
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usartSendByte>
		UDR0=byteToSend;//---------------------------//transmit byte
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	08 95       	ret

000000b0 <usartInitialize>:
		#if USART_OPERATING_MODE_U2X
			unsigned int UBRR=(F_CPU / (8UL * USART_BAUDRATE)) - 1; //if integer trunctuation is noticed (...not getting the expected baudrate) due to integer devision, USE: ((F_CPU + USART_BAUD_RATE * 8L) / (USART_BAUD_RATE * 16L) - 1) instead. When doing integer division it is usually better to round to the nearest integer, rather than to the lowest. 
			UCSR0A |= (1<<U2X0);//---------------------------//U2x=1
		#else
			unsigned int UBRR=(F_CPU / (16UL * USART_BAUDRATE)) - 1;
			UCSR0A &= ~(1<<U2X0);//---------------------------//U2X=0
  b0:	59 98       	cbi	0x0b, 1	; 11
		#endif

		//Set up the baud rate for USART0
		UBRR0L=UBRR;//---------------------------// load lower 8 bits of baud rate value
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	89 b9       	out	0x09, r24	; 9
		UBRR0H=(UBRR>>8);//---------------------------// load upper 8 bits of baud rate value	
  b6:	10 bc       	out	0x20, r1	; 32
		
		//Enable Tx & Rx
		UCSR0B=(1<<TXEN0)|(1<<RXEN0);
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
				
		/*Configure Data Format: 
			-	Data Bits = 8;
			-	Stop Bits = 2;
			-	Parity = EVEN;		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)|(1<<UPM01);
  bc:	8e ea       	ldi	r24, 0xAE	; 174
  be:	80 bd       	out	0x20, r24	; 32
		*	- First parameter: address to a function which outputs a single character.
		*	- Second parameter: optional; used for get functions, ie. receiving a character from the USART.
		*	- BEAWARE that this function uses malloc()!! VERY resource demanding. 
		*/
		if(USART_ENABLE_PRINTF)
			fdevopen(&usartSendByte,NULL);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	84 e5       	ldi	r24, 0x54	; 84
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	52 c0       	rjmp	.+164    	; 0x16e <fdevopen>
  ca:	08 95       	ret

000000cc <usartReceiveByte>:
///<summary>
/////Receive a byte using USART
///</summary>
uint8_t usartReceiveByte(void)
{
	while((UCSR0A&(1<<RXC0))==0);//---------------------------//wait until data is received
  cc:	5f 9b       	sbis	0x0b, 7	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <usartReceiveByte>
	
	return UDR0;//-------------------------------------------//return received data
  d0:	8c b1       	in	r24, 0x0c	; 12
}
  d2:	08 95       	ret

000000d4 <usartSendDataString>:

///<summary>
///Send a string of data using USART
///</summary>
void usartSendDataString(const char *dataString)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*dataString)
  da:	88 81       	ld	r24, Y
  dc:	88 23       	and	r24, r24
  de:	29 f0       	breq	.+10     	; 0xea <usartSendDataString+0x16>
  e0:	21 96       	adiw	r28, 0x01	; 1
	{
		usartSendByte(*dataString);
  e2:	e2 df       	rcall	.-60     	; 0xa8 <usartSendByte>
///<summary>
///Send a string of data using USART
///</summary>
void usartSendDataString(const char *dataString)
{
	while(*dataString)
  e4:	89 91       	ld	r24, Y+
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <usartSendDataString+0xe>
	{
		usartSendByte(*dataString);
		dataString++;
	}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
	
	// dummy for testing USART
	char *dataString="\r......Booting up.\r";
		
	//init. USART
	usartInitialize();//--------*****-////TO DO: implement light diode blink if(usartInitialize()); else ERROR BLINK CODE.. also write reference for blinking code...
  f0:	df df       	rcall	.-66     	; 0xb0 <usartInitialize>
	
	//Send a string of data
	usartSendDataString(dataString);
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	ee df       	rcall	.-36     	; 0xd4 <usartSendDataString>
	
	if(USART_ENABLE_PRINTF)
		printf("NOTEFICATION: printf() is LINKED to Tx on USART!\r\n");
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	82 d0       	rcall	.+260    	; 0x202 <puts>
	
	//Make some conversation...
	usartSendDataString("Do you want to echo Rx UART data using interrupts?\r\n*Enter 'y' to accept");
  fe:	8c e4       	ldi	r24, 0x4C	; 76
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	e8 df       	rcall	.-48     	; 0xd4 <usartSendDataString>
	if(byteOfData=usartReceiveByte()=='y')
 104:	e3 df       	rcall	.-58     	; 0xcc <usartReceiveByte>
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	89 37       	cpi	r24, 0x79	; 121
 10a:	09 f0       	breq	.+2      	; 0x10e <main+0x1e>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 dc 01 	sts	0x01DC, r25
 112:	99 23       	and	r25, r25
 114:	49 f0       	breq	.+18     	; 0x128 <main+0x38>
	{
		interruptOn=true;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 dd 01 	sts	0x01DD, r24
		UCSR0B |= (1<<RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXCIE0)
 11c:	57 9a       	sbi	0x0a, 7	; 10
		sei(); //macro for enabling interrupts globally (<avr/interrupt.h> must be included)
 11e:	78 94       	sei
		usartSendDataString("->interrupt on Rx is ENABLED\r\n");
 120:	85 e9       	ldi	r24, 0x95	; 149
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	d7 df       	rcall	.-82     	; 0xd4 <usartSendDataString>
 126:	03 c0       	rjmp	.+6      	; 0x12e <main+0x3e>
	}
	else
		usartSendDataString("->interrupt on Rx DISABLED\r\n");
 128:	84 eb       	ldi	r24, 0xB4	; 180
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	d3 df       	rcall	.-90     	; 0xd4 <usartSendDataString>
	
	usartSendDataString("@ECHO ON\r\n");
 12e:	81 ed       	ldi	r24, 0xD1	; 209
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	d0 df       	rcall	.-96     	; 0xd4 <usartSendDataString>
	
	//Program loop
	while(true)
	{
		if(!interruptOn)
 134:	80 91 dd 01 	lds	r24, 0x01DD
 138:	81 11       	cpse	r24, r1
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0x4a>
		{
			//echo received data
			byteOfData=usartReceiveByte();
 13c:	c7 df       	rcall	.-114    	; 0xcc <usartReceiveByte>
 13e:	80 93 dc 01 	sts	0x01DC, r24
			usartSendByte(byteOfData);
 142:	b2 df       	rcall	.-156    	; 0xa8 <usartSendByte>
 144:	f7 cf       	rjmp	.-18     	; 0x134 <main+0x44>

00000146 <__vector_19>:
	}
}

//interrupt function
ISR (USART0_RXC_vect,ISR_BLOCK)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	if (interruptOn)
 152:	80 91 dd 01 	lds	r24, 0x01DD
 156:	88 23       	and	r24, r24
 158:	21 f0       	breq	.+8      	; 0x162 <__vector_19+0x1c>
	{
		byteOfData=UDR0;//grab byte
 15a:	8c b1       	in	r24, 0x0c	; 12
 15c:	80 93 dc 01 	sts	0x01DC, r24
		UDR0=byteOfData;//echo grabbed byte
 160:	8c b9       	out	0x0c, r24	; 12
	}
}
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <fdevopen>:
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	8b 01       	movw	r16, r22
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	31 f4       	brne	.+12     	; 0x18a <fdevopen+0x1c>
 17e:	61 15       	cp	r22, r1
 180:	71 05       	cpc	r23, r1
 182:	19 f4       	brne	.+6      	; 0x18a <fdevopen+0x1c>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	37 c0       	rjmp	.+110    	; 0x1f8 <fdevopen+0x8a>
 18a:	6e e0       	ldi	r22, 0x0E	; 14
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	64 d0       	rcall	.+200    	; 0x25c <calloc>
 194:	fc 01       	movw	r30, r24
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	a9 f3       	breq	.-22     	; 0x184 <fdevopen+0x16>
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	83 83       	std	Z+3, r24	; 0x03
 19e:	01 15       	cp	r16, r1
 1a0:	11 05       	cpc	r17, r1
 1a2:	71 f0       	breq	.+28     	; 0x1c0 <fdevopen+0x52>
 1a4:	13 87       	std	Z+11, r17	; 0x0b
 1a6:	02 87       	std	Z+10, r16	; 0x0a
 1a8:	81 e8       	ldi	r24, 0x81	; 129
 1aa:	83 83       	std	Z+3, r24	; 0x03
 1ac:	80 91 de 01 	lds	r24, 0x01DE
 1b0:	90 91 df 01 	lds	r25, 0x01DF
 1b4:	89 2b       	or	r24, r25
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <fdevopen+0x52>
 1b8:	f0 93 df 01 	sts	0x01DF, r31
 1bc:	e0 93 de 01 	sts	0x01DE, r30
 1c0:	20 97       	sbiw	r28, 0x00	; 0
 1c2:	c9 f0       	breq	.+50     	; 0x1f6 <fdevopen+0x88>
 1c4:	d1 87       	std	Z+9, r29	; 0x09
 1c6:	c0 87       	std	Z+8, r28	; 0x08
 1c8:	83 81       	ldd	r24, Z+3	; 0x03
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	83 83       	std	Z+3, r24	; 0x03
 1ce:	80 91 e0 01 	lds	r24, 0x01E0
 1d2:	90 91 e1 01 	lds	r25, 0x01E1
 1d6:	89 2b       	or	r24, r25
 1d8:	71 f4       	brne	.+28     	; 0x1f6 <fdevopen+0x88>
 1da:	f0 93 e1 01 	sts	0x01E1, r31
 1de:	e0 93 e0 01 	sts	0x01E0, r30
 1e2:	80 91 e2 01 	lds	r24, 0x01E2
 1e6:	90 91 e3 01 	lds	r25, 0x01E3
 1ea:	89 2b       	or	r24, r25
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <fdevopen+0x88>
 1ee:	f0 93 e3 01 	sts	0x01E3, r31
 1f2:	e0 93 e2 01 	sts	0x01E2, r30
 1f6:	cf 01       	movw	r24, r30
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <puts>:
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	e0 91 e0 01 	lds	r30, 0x01E0
 20e:	f0 91 e1 01 	lds	r31, 0x01E1
 212:	23 81       	ldd	r18, Z+3	; 0x03
 214:	21 ff       	sbrs	r18, 1
 216:	1b c0       	rjmp	.+54     	; 0x24e <puts+0x4c>
 218:	ec 01       	movw	r28, r24
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	10 e0       	ldi	r17, 0x00	; 0
 21e:	89 91       	ld	r24, Y+
 220:	60 91 e0 01 	lds	r22, 0x01E0
 224:	70 91 e1 01 	lds	r23, 0x01E1
 228:	db 01       	movw	r26, r22
 22a:	18 96       	adiw	r26, 0x08	; 8
 22c:	ed 91       	ld	r30, X+
 22e:	fc 91       	ld	r31, X
 230:	19 97       	sbiw	r26, 0x09	; 9
 232:	88 23       	and	r24, r24
 234:	31 f0       	breq	.+12     	; 0x242 <puts+0x40>
 236:	09 95       	icall
 238:	89 2b       	or	r24, r25
 23a:	89 f3       	breq	.-30     	; 0x21e <puts+0x1c>
 23c:	0f ef       	ldi	r16, 0xFF	; 255
 23e:	1f ef       	ldi	r17, 0xFF	; 255
 240:	ee cf       	rjmp	.-36     	; 0x21e <puts+0x1c>
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	09 95       	icall
 246:	89 2b       	or	r24, r25
 248:	11 f4       	brne	.+4      	; 0x24e <puts+0x4c>
 24a:	c8 01       	movw	r24, r16
 24c:	02 c0       	rjmp	.+4      	; 0x252 <puts+0x50>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <calloc>:
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	86 9f       	mul	r24, r22
 266:	80 01       	movw	r16, r0
 268:	87 9f       	mul	r24, r23
 26a:	10 0d       	add	r17, r0
 26c:	96 9f       	mul	r25, r22
 26e:	10 0d       	add	r17, r0
 270:	11 24       	eor	r1, r1
 272:	c8 01       	movw	r24, r16
 274:	0d d0       	rcall	.+26     	; 0x290 <malloc>
 276:	ec 01       	movw	r28, r24
 278:	00 97       	sbiw	r24, 0x00	; 0
 27a:	21 f0       	breq	.+8      	; 0x284 <calloc+0x28>
 27c:	a8 01       	movw	r20, r16
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	2d d1       	rcall	.+602    	; 0x4de <memset>
 284:	ce 01       	movw	r24, r28
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <malloc>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	10 f4       	brcc	.+4      	; 0x29e <malloc+0xe>
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	e0 91 e6 01 	lds	r30, 0x01E6
 2a2:	f0 91 e7 01 	lds	r31, 0x01E7
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	30 97       	sbiw	r30, 0x00	; 0
 2b0:	39 f1       	breq	.+78     	; 0x300 <malloc+0x70>
 2b2:	40 81       	ld	r20, Z
 2b4:	51 81       	ldd	r21, Z+1	; 0x01
 2b6:	48 17       	cp	r20, r24
 2b8:	59 07       	cpc	r21, r25
 2ba:	b8 f0       	brcs	.+46     	; 0x2ea <malloc+0x5a>
 2bc:	48 17       	cp	r20, r24
 2be:	59 07       	cpc	r21, r25
 2c0:	71 f4       	brne	.+28     	; 0x2de <malloc+0x4e>
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	93 81       	ldd	r25, Z+3	; 0x03
 2c6:	10 97       	sbiw	r26, 0x00	; 0
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <malloc+0x44>
 2ca:	13 96       	adiw	r26, 0x03	; 3
 2cc:	9c 93       	st	X, r25
 2ce:	8e 93       	st	-X, r24
 2d0:	12 97       	sbiw	r26, 0x02	; 2
 2d2:	2c c0       	rjmp	.+88     	; 0x32c <malloc+0x9c>
 2d4:	90 93 e7 01 	sts	0x01E7, r25
 2d8:	80 93 e6 01 	sts	0x01E6, r24
 2dc:	27 c0       	rjmp	.+78     	; 0x32c <malloc+0x9c>
 2de:	21 15       	cp	r18, r1
 2e0:	31 05       	cpc	r19, r1
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <malloc+0x60>
 2e4:	42 17       	cp	r20, r18
 2e6:	53 07       	cpc	r21, r19
 2e8:	18 f0       	brcs	.+6      	; 0x2f0 <malloc+0x60>
 2ea:	a9 01       	movw	r20, r18
 2ec:	db 01       	movw	r26, r22
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <malloc+0x62>
 2f0:	ef 01       	movw	r28, r30
 2f2:	9a 01       	movw	r18, r20
 2f4:	bd 01       	movw	r22, r26
 2f6:	df 01       	movw	r26, r30
 2f8:	02 80       	ldd	r0, Z+2	; 0x02
 2fa:	f3 81       	ldd	r31, Z+3	; 0x03
 2fc:	e0 2d       	mov	r30, r0
 2fe:	d7 cf       	rjmp	.-82     	; 0x2ae <malloc+0x1e>
 300:	21 15       	cp	r18, r1
 302:	31 05       	cpc	r19, r1
 304:	f9 f0       	breq	.+62     	; 0x344 <malloc+0xb4>
 306:	28 1b       	sub	r18, r24
 308:	39 0b       	sbc	r19, r25
 30a:	24 30       	cpi	r18, 0x04	; 4
 30c:	31 05       	cpc	r19, r1
 30e:	80 f4       	brcc	.+32     	; 0x330 <malloc+0xa0>
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	9b 81       	ldd	r25, Y+3	; 0x03
 314:	61 15       	cp	r22, r1
 316:	71 05       	cpc	r23, r1
 318:	21 f0       	breq	.+8      	; 0x322 <malloc+0x92>
 31a:	fb 01       	movw	r30, r22
 31c:	93 83       	std	Z+3, r25	; 0x03
 31e:	82 83       	std	Z+2, r24	; 0x02
 320:	04 c0       	rjmp	.+8      	; 0x32a <malloc+0x9a>
 322:	90 93 e7 01 	sts	0x01E7, r25
 326:	80 93 e6 01 	sts	0x01E6, r24
 32a:	fe 01       	movw	r30, r28
 32c:	32 96       	adiw	r30, 0x02	; 2
 32e:	44 c0       	rjmp	.+136    	; 0x3b8 <malloc+0x128>
 330:	fe 01       	movw	r30, r28
 332:	e2 0f       	add	r30, r18
 334:	f3 1f       	adc	r31, r19
 336:	81 93       	st	Z+, r24
 338:	91 93       	st	Z+, r25
 33a:	22 50       	subi	r18, 0x02	; 2
 33c:	31 09       	sbc	r19, r1
 33e:	39 83       	std	Y+1, r19	; 0x01
 340:	28 83       	st	Y, r18
 342:	3a c0       	rjmp	.+116    	; 0x3b8 <malloc+0x128>
 344:	20 91 e4 01 	lds	r18, 0x01E4
 348:	30 91 e5 01 	lds	r19, 0x01E5
 34c:	23 2b       	or	r18, r19
 34e:	41 f4       	brne	.+16     	; 0x360 <malloc+0xd0>
 350:	20 91 02 01 	lds	r18, 0x0102
 354:	30 91 03 01 	lds	r19, 0x0103
 358:	30 93 e5 01 	sts	0x01E5, r19
 35c:	20 93 e4 01 	sts	0x01E4, r18
 360:	20 91 00 01 	lds	r18, 0x0100
 364:	30 91 01 01 	lds	r19, 0x0101
 368:	21 15       	cp	r18, r1
 36a:	31 05       	cpc	r19, r1
 36c:	41 f4       	brne	.+16     	; 0x37e <malloc+0xee>
 36e:	2d b7       	in	r18, 0x3d	; 61
 370:	3e b7       	in	r19, 0x3e	; 62
 372:	40 91 04 01 	lds	r20, 0x0104
 376:	50 91 05 01 	lds	r21, 0x0105
 37a:	24 1b       	sub	r18, r20
 37c:	35 0b       	sbc	r19, r21
 37e:	e0 91 e4 01 	lds	r30, 0x01E4
 382:	f0 91 e5 01 	lds	r31, 0x01E5
 386:	e2 17       	cp	r30, r18
 388:	f3 07       	cpc	r31, r19
 38a:	a0 f4       	brcc	.+40     	; 0x3b4 <malloc+0x124>
 38c:	2e 1b       	sub	r18, r30
 38e:	3f 0b       	sbc	r19, r31
 390:	28 17       	cp	r18, r24
 392:	39 07       	cpc	r19, r25
 394:	78 f0       	brcs	.+30     	; 0x3b4 <malloc+0x124>
 396:	ac 01       	movw	r20, r24
 398:	4e 5f       	subi	r20, 0xFE	; 254
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	24 17       	cp	r18, r20
 39e:	35 07       	cpc	r19, r21
 3a0:	48 f0       	brcs	.+18     	; 0x3b4 <malloc+0x124>
 3a2:	4e 0f       	add	r20, r30
 3a4:	5f 1f       	adc	r21, r31
 3a6:	50 93 e5 01 	sts	0x01E5, r21
 3aa:	40 93 e4 01 	sts	0x01E4, r20
 3ae:	81 93       	st	Z+, r24
 3b0:	91 93       	st	Z+, r25
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <malloc+0x128>
 3b4:	e0 e0       	ldi	r30, 0x00	; 0
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	cf 01       	movw	r24, r30
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <free>:
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	09 f4       	brne	.+2      	; 0x3ca <free+0xa>
 3c8:	87 c0       	rjmp	.+270    	; 0x4d8 <free+0x118>
 3ca:	fc 01       	movw	r30, r24
 3cc:	32 97       	sbiw	r30, 0x02	; 2
 3ce:	13 82       	std	Z+3, r1	; 0x03
 3d0:	12 82       	std	Z+2, r1	; 0x02
 3d2:	c0 91 e6 01 	lds	r28, 0x01E6
 3d6:	d0 91 e7 01 	lds	r29, 0x01E7
 3da:	20 97       	sbiw	r28, 0x00	; 0
 3dc:	81 f4       	brne	.+32     	; 0x3fe <free+0x3e>
 3de:	20 81       	ld	r18, Z
 3e0:	31 81       	ldd	r19, Z+1	; 0x01
 3e2:	28 0f       	add	r18, r24
 3e4:	39 1f       	adc	r19, r25
 3e6:	80 91 e4 01 	lds	r24, 0x01E4
 3ea:	90 91 e5 01 	lds	r25, 0x01E5
 3ee:	82 17       	cp	r24, r18
 3f0:	93 07       	cpc	r25, r19
 3f2:	79 f5       	brne	.+94     	; 0x452 <free+0x92>
 3f4:	f0 93 e5 01 	sts	0x01E5, r31
 3f8:	e0 93 e4 01 	sts	0x01E4, r30
 3fc:	6d c0       	rjmp	.+218    	; 0x4d8 <free+0x118>
 3fe:	de 01       	movw	r26, r28
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	ae 17       	cp	r26, r30
 406:	bf 07       	cpc	r27, r31
 408:	50 f4       	brcc	.+20     	; 0x41e <free+0x5e>
 40a:	12 96       	adiw	r26, 0x02	; 2
 40c:	4d 91       	ld	r20, X+
 40e:	5c 91       	ld	r21, X
 410:	13 97       	sbiw	r26, 0x03	; 3
 412:	9d 01       	movw	r18, r26
 414:	41 15       	cp	r20, r1
 416:	51 05       	cpc	r21, r1
 418:	09 f1       	breq	.+66     	; 0x45c <free+0x9c>
 41a:	da 01       	movw	r26, r20
 41c:	f3 cf       	rjmp	.-26     	; 0x404 <free+0x44>
 41e:	b3 83       	std	Z+3, r27	; 0x03
 420:	a2 83       	std	Z+2, r26	; 0x02
 422:	40 81       	ld	r20, Z
 424:	51 81       	ldd	r21, Z+1	; 0x01
 426:	84 0f       	add	r24, r20
 428:	95 1f       	adc	r25, r21
 42a:	8a 17       	cp	r24, r26
 42c:	9b 07       	cpc	r25, r27
 42e:	71 f4       	brne	.+28     	; 0x44c <free+0x8c>
 430:	8d 91       	ld	r24, X+
 432:	9c 91       	ld	r25, X
 434:	11 97       	sbiw	r26, 0x01	; 1
 436:	84 0f       	add	r24, r20
 438:	95 1f       	adc	r25, r21
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	91 83       	std	Z+1, r25	; 0x01
 43e:	80 83       	st	Z, r24
 440:	12 96       	adiw	r26, 0x02	; 2
 442:	8d 91       	ld	r24, X+
 444:	9c 91       	ld	r25, X
 446:	13 97       	sbiw	r26, 0x03	; 3
 448:	93 83       	std	Z+3, r25	; 0x03
 44a:	82 83       	std	Z+2, r24	; 0x02
 44c:	21 15       	cp	r18, r1
 44e:	31 05       	cpc	r19, r1
 450:	29 f4       	brne	.+10     	; 0x45c <free+0x9c>
 452:	f0 93 e7 01 	sts	0x01E7, r31
 456:	e0 93 e6 01 	sts	0x01E6, r30
 45a:	3e c0       	rjmp	.+124    	; 0x4d8 <free+0x118>
 45c:	d9 01       	movw	r26, r18
 45e:	13 96       	adiw	r26, 0x03	; 3
 460:	fc 93       	st	X, r31
 462:	ee 93       	st	-X, r30
 464:	12 97       	sbiw	r26, 0x02	; 2
 466:	4d 91       	ld	r20, X+
 468:	5d 91       	ld	r21, X+
 46a:	a4 0f       	add	r26, r20
 46c:	b5 1f       	adc	r27, r21
 46e:	ea 17       	cp	r30, r26
 470:	fb 07       	cpc	r31, r27
 472:	79 f4       	brne	.+30     	; 0x492 <free+0xd2>
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	84 0f       	add	r24, r20
 47a:	95 1f       	adc	r25, r21
 47c:	02 96       	adiw	r24, 0x02	; 2
 47e:	d9 01       	movw	r26, r18
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	9c 93       	st	X, r25
 484:	8e 93       	st	-X, r24
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	93 81       	ldd	r25, Z+3	; 0x03
 48a:	13 96       	adiw	r26, 0x03	; 3
 48c:	9c 93       	st	X, r25
 48e:	8e 93       	st	-X, r24
 490:	12 97       	sbiw	r26, 0x02	; 2
 492:	e0 e0       	ldi	r30, 0x00	; 0
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	9b 81       	ldd	r25, Y+3	; 0x03
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	19 f0       	breq	.+6      	; 0x4a4 <free+0xe4>
 49e:	fe 01       	movw	r30, r28
 4a0:	ec 01       	movw	r28, r24
 4a2:	f9 cf       	rjmp	.-14     	; 0x496 <free+0xd6>
 4a4:	ce 01       	movw	r24, r28
 4a6:	02 96       	adiw	r24, 0x02	; 2
 4a8:	28 81       	ld	r18, Y
 4aa:	39 81       	ldd	r19, Y+1	; 0x01
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	20 91 e4 01 	lds	r18, 0x01E4
 4b4:	30 91 e5 01 	lds	r19, 0x01E5
 4b8:	28 17       	cp	r18, r24
 4ba:	39 07       	cpc	r19, r25
 4bc:	69 f4       	brne	.+26     	; 0x4d8 <free+0x118>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	29 f4       	brne	.+10     	; 0x4cc <free+0x10c>
 4c2:	10 92 e7 01 	sts	0x01E7, r1
 4c6:	10 92 e6 01 	sts	0x01E6, r1
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <free+0x110>
 4cc:	13 82       	std	Z+3, r1	; 0x03
 4ce:	12 82       	std	Z+2, r1	; 0x02
 4d0:	d0 93 e5 01 	sts	0x01E5, r29
 4d4:	c0 93 e4 01 	sts	0x01E4, r28
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <memset>:
 4de:	dc 01       	movw	r26, r24
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <memset+0x6>
 4e2:	6d 93       	st	X+, r22
 4e4:	41 50       	subi	r20, 0x01	; 1
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	e0 f7       	brcc	.-8      	; 0x4e2 <memset+0x4>
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
