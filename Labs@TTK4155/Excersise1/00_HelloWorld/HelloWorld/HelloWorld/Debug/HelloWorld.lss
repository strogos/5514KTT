
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000b6  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c5  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011d  00000000  00000000  0000035f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000789  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000d900  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  0000e550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000031cc  00000000  00000000  0000e570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	00 00       	nop
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	00 00       	nop
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	00 00       	nop
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	00 00       	nop
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	00 00       	nop
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	00 00       	nop
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	00 00       	nop
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	00 00       	nop
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	00 00       	nop
  34:	25 c0       	rjmp	.+74     	; 0x80 <__bad_interrupt>
  36:	00 00       	nop
  38:	23 c0       	rjmp	.+70     	; 0x80 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	21 c0       	rjmp	.+66     	; 0x80 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1f c0       	rjmp	.+62     	; 0x80 <__bad_interrupt>
  42:	00 00       	nop
  44:	1d c0       	rjmp	.+58     	; 0x80 <__bad_interrupt>
  46:	00 00       	nop
  48:	1b c0       	rjmp	.+54     	; 0x80 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	19 c0       	rjmp	.+50     	; 0x80 <__bad_interrupt>
  4e:	00 00       	nop
  50:	17 c0       	rjmp	.+46     	; 0x80 <__bad_interrupt>
  52:	00 00       	nop
  54:	15 c0       	rjmp	.+42     	; 0x80 <__bad_interrupt>
  56:	00 00       	nop
  58:	13 c0       	rjmp	.+38     	; 0x80 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	11 c0       	rjmp	.+34     	; 0x80 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0f c0       	rjmp	.+30     	; 0x80 <__bad_interrupt>
  62:	00 00       	nop
  64:	0d c0       	rjmp	.+26     	; 0x80 <__bad_interrupt>
  66:	00 00       	nop
  68:	0b c0       	rjmp	.+22     	; 0x80 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	09 c0       	rjmp	.+18     	; 0x80 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	02 d0       	rcall	.+4      	; 0x82 <main>
  7e:	19 c0       	rjmp	.+50     	; 0xb2 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <main>:
int main (void){
	//DDRB = (1<<DDB2);
	
	 // Configure pin as output
	//set_bit(DDRB, DDB0);
	DDRB=0x01;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
  86:	18 ba       	out	0x18, r1	; 24
	
	
	while(true){
		
		PORTB=0x01;
  88:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	3f ef       	ldi	r19, 0xFF	; 255
  8e:	9e e0       	ldi	r25, 0x0E	; 14
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0xe>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x18>
  9a:	00 00       	nop
		_delay_ms(1000);
		PORTB=0x00;
  9c:	18 ba       	out	0x18, r1	; 24
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	3f ef       	ldi	r19, 0xFF	; 255
  a2:	9e e0       	ldi	r25, 0x0E	; 14
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2c>
  ae:	00 00       	nop
  b0:	eb cf       	rjmp	.-42     	; 0x88 <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
