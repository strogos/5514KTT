
LabExc04-OLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  00000e4e  00000ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002da  008002da  000010bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001257  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000958  00000000  00000000  000024ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002213  00000000  00000000  00002e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003fc  00000000  00000000  0000505c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000deb0  00000000  00000000  00005458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ec3  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000141cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003f72  00000000  00000000  000142db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c0       	rjmp	.+132    	; 0xa6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c0       	rjmp	.+128    	; 0xa6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c0       	rjmp	.+124    	; 0xa6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c0       	rjmp	.+120    	; 0xa6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c0       	rjmp	.+116    	; 0xa6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c0       	rjmp	.+112    	; 0xa6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c0       	rjmp	.+108    	; 0xa6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c0       	rjmp	.+104    	; 0xa6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c0       	rjmp	.+100    	; 0xa6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c0       	rjmp	.+96     	; 0xa6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c0       	rjmp	.+92     	; 0xa6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4f c1       	rjmp	.+670    	; 0x2ec <__vector_19>
  4e:	00 00       	nop
  50:	2a c0       	rjmp	.+84     	; 0xa6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c0       	rjmp	.+80     	; 0xa6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c0       	rjmp	.+76     	; 0xa6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c0       	rjmp	.+72     	; 0xa6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c0       	rjmp	.+68     	; 0xa6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c0       	rjmp	.+64     	; 0xa6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c0       	rjmp	.+60     	; 0xa6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c0       	rjmp	.+56     	; 0xa6 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e4       	ldi	r30, 0x4E	; 78
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 3d       	cpi	r26, 0xDA	; 218
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	aa ed       	ldi	r26, 0xDA	; 218
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 3e       	cpi	r26, 0xE6	; 230
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	02 d0       	rcall	.+4      	; 0xa8 <main>
  a4:	d2 c6       	rjmp	.+3492   	; 0xe4a <_exit>

000000a6 <__bad_interrupt>:
  a6:	ac cf       	rjmp	.-168    	; 0x0 <__vectors>

000000a8 <main>:

//main function
int main (void)
{
	// Initialise external memory interface // NB: "xmemInit()" must be called before any function that uses heap memory!!
	xmemInit(); //enable external memory addressing bits to be moved from this function!
  a8:	30 d1       	rcall	.+608    	; 0x30a <xmemInit>
	
	// dummy for testing USART
	//char *dataString="\r......Booting up.\r";
		
	//init. USART
	usartInitialize();//--------*****-////TO DO: implement light diode blink if(usartInitialize()); else ERROR BLINK CODE.. also write reference for blinking code...
  aa:	10 d1       	rcall	.+544    	; 0x2cc <usartInitialize>
	
	//test external SRAM
	xmemTest();
  ac:	34 d1       	rcall	.+616    	; 0x316 <xmemTest>
	xmemExampleFunction();
  ae:	ac d1       	rcall	.+856    	; 0x408 <xmemExampleFunction>
	printf("\n\r0x%02x",xmemReadFrom(5));
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	45 d2       	rcall	.+1162   	; 0x540 <xmemReadFrom>
  b6:	9f 93       	push	r25
  b8:	8f 93       	push	r24
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	9f 93       	push	r25
  c0:	8f 93       	push	r24
  c2:	c4 d3       	rcall	.+1928   	; 0x84c <printf>
	
	uint8_t *test= malloc(4*sizeof(uint8_t));
	//uint8_t array[4];
	
	
	uint8_t buffer1=adcRead(ADC_CH1_JOY_Y_AXIS);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	41 d2       	rcall	.+1154   	; 0x54a <adcRead>
	uint8_t buffer2=adcRead(ADC_CH2_JOY_X_AXIS);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	3f d2       	rcall	.+1150   	; 0x54a <adcRead>
	
	
	
	oledInit();
  cc:	18 d0       	rcall	.+48     	; 0xfe <oledInit>
	clearScreen();
  ce:	b9 d0       	rcall	.+370    	; 0x242 <clearScreen>
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
bool interruptOn=false;
uint8_t byteOfData=0;

//main function
int main (void)
{
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	cd 2f       	mov	r28, r29
	oledInit();
	clearScreen();
	uint8_t column=0,line=0;
	while(true)
	{
		oledPrint(line,column);
  dc:	6c 2f       	mov	r22, r28
  de:	8d 2f       	mov	r24, r29
  e0:	c5 d0       	rcall	.+394    	; 0x26c <oledPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8f e7       	ldi	r24, 0x7F	; 127
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x40>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x4a>
  f2:	00 00       	nop
		_delay_ms(500);
		column ++;
  f4:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(column==8)
  f6:	c8 30       	cpi	r28, 0x08	; 8
  f8:	89 f7       	brne	.-30     	; 0xdc <main+0x34>
		{
			column=0;
			clearScreen();
  fa:	a3 d0       	rcall	.+326    	; 0x242 <clearScreen>
  fc:	ee cf       	rjmp	.-36     	; 0xda <main+0x32>

000000fe <oledInit>:
volatile uint8_t *oledCmdAddress = 0x1000;
volatile uint8_t *oledDataAddress = 0x1200;

void oledInit()
{
	 *oledCmdAddress =0xae; // display off
  fe:	e0 91 08 01 	lds	r30, 0x0108
 102:	f0 91 09 01 	lds	r31, 0x0109
 106:	8e ea       	ldi	r24, 0xAE	; 174
 108:	80 83       	st	Z, r24
	 *oledCmdAddress =0xa1; //segment re-map
 10a:	e0 91 08 01 	lds	r30, 0x0108
 10e:	f0 91 09 01 	lds	r31, 0x0109
 112:	81 ea       	ldi	r24, 0xA1	; 161
 114:	80 83       	st	Z, r24
	 *oledCmdAddress =0xda; //common pads hardware: alternative
 116:	e0 91 08 01 	lds	r30, 0x0108
 11a:	f0 91 09 01 	lds	r31, 0x0109
 11e:	8a ed       	ldi	r24, 0xDA	; 218
 120:	80 83       	st	Z, r24
	 *oledCmdAddress =0x12;
 122:	e0 91 08 01 	lds	r30, 0x0108
 126:	f0 91 09 01 	lds	r31, 0x0109
 12a:	82 e1       	ldi	r24, 0x12	; 18
 12c:	80 83       	st	Z, r24
	 *oledCmdAddress =0xc8; //common output scan direction:com63~com0
 12e:	e0 91 08 01 	lds	r30, 0x0108
 132:	f0 91 09 01 	lds	r31, 0x0109
 136:	88 ec       	ldi	r24, 0xC8	; 200
 138:	80 83       	st	Z, r24
	 *oledCmdAddress =0xa8; //multiplex ration mode:63
 13a:	e0 91 08 01 	lds	r30, 0x0108
 13e:	f0 91 09 01 	lds	r31, 0x0109
 142:	88 ea       	ldi	r24, 0xA8	; 168
 144:	80 83       	st	Z, r24
	 *oledCmdAddress =0x3f;
 146:	e0 91 08 01 	lds	r30, 0x0108
 14a:	f0 91 09 01 	lds	r31, 0x0109
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	80 83       	st	Z, r24
	 *oledCmdAddress =0xd5; //display divide ratio/osc. freq. mode
 152:	e0 91 08 01 	lds	r30, 0x0108
 156:	f0 91 09 01 	lds	r31, 0x0109
 15a:	85 ed       	ldi	r24, 0xD5	; 213
 15c:	80 83       	st	Z, r24
	 *oledCmdAddress =0x80;
 15e:	e0 91 08 01 	lds	r30, 0x0108
 162:	f0 91 09 01 	lds	r31, 0x0109
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	80 83       	st	Z, r24
	 *oledCmdAddress =0x81; //contrast control
 16a:	e0 91 08 01 	lds	r30, 0x0108
 16e:	f0 91 09 01 	lds	r31, 0x0109
 172:	81 e8       	ldi	r24, 0x81	; 129
 174:	80 83       	st	Z, r24
	 *oledCmdAddress =0x10;
 176:	e0 91 08 01 	lds	r30, 0x0108
 17a:	f0 91 09 01 	lds	r31, 0x0109
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	80 83       	st	Z, r24
	 *oledCmdAddress =0xd9; //set pre-charge period
 182:	e0 91 08 01 	lds	r30, 0x0108
 186:	f0 91 09 01 	lds	r31, 0x0109
 18a:	89 ed       	ldi	r24, 0xD9	; 217
 18c:	80 83       	st	Z, r24
	 *oledCmdAddress =0x21;
 18e:	e0 91 08 01 	lds	r30, 0x0108
 192:	f0 91 09 01 	lds	r31, 0x0109
 196:	81 e2       	ldi	r24, 0x21	; 33
 198:	80 83       	st	Z, r24
	 *oledCmdAddress =0x20; //Set Memory Addressing Mode
 19a:	e0 91 08 01 	lds	r30, 0x0108
 19e:	f0 91 09 01 	lds	r31, 0x0109
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	80 83       	st	Z, r24
	 *oledCmdAddress =0x02;
 1a6:	e0 91 08 01 	lds	r30, 0x0108
 1aa:	f0 91 09 01 	lds	r31, 0x0109
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	80 83       	st	Z, r24
	 *oledCmdAddress =0xdb; //VCOM deselect level mode
 1b2:	e0 91 08 01 	lds	r30, 0x0108
 1b6:	f0 91 09 01 	lds	r31, 0x0109
 1ba:	8b ed       	ldi	r24, 0xDB	; 219
 1bc:	80 83       	st	Z, r24
	 *oledCmdAddress =0x30;
 1be:	e0 91 08 01 	lds	r30, 0x0108
 1c2:	f0 91 09 01 	lds	r31, 0x0109
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	80 83       	st	Z, r24
	 *oledCmdAddress =0xad; //master configuration
 1ca:	e0 91 08 01 	lds	r30, 0x0108
 1ce:	f0 91 09 01 	lds	r31, 0x0109
 1d2:	8d ea       	ldi	r24, 0xAD	; 173
 1d4:	80 83       	st	Z, r24
	 *oledCmdAddress =0x00;
 1d6:	e0 91 08 01 	lds	r30, 0x0108
 1da:	f0 91 09 01 	lds	r31, 0x0109
 1de:	10 82       	st	Z, r1
	 *oledCmdAddress =0xa4; //out follows RAM content
 1e0:	e0 91 08 01 	lds	r30, 0x0108
 1e4:	f0 91 09 01 	lds	r31, 0x0109
 1e8:	84 ea       	ldi	r24, 0xA4	; 164
 1ea:	80 83       	st	Z, r24
	 *oledCmdAddress =0xa6; //set normal display
 1ec:	e0 91 08 01 	lds	r30, 0x0108
 1f0:	f0 91 09 01 	lds	r31, 0x0109
 1f4:	86 ea       	ldi	r24, 0xA6	; 166
 1f6:	80 83       	st	Z, r24
	 *oledCmdAddress =0xaf; // display on*/
 1f8:	e0 91 08 01 	lds	r30, 0x0108
 1fc:	f0 91 09 01 	lds	r31, 0x0109
 200:	8f ea       	ldi	r24, 0xAF	; 175
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <setLine>:
}

void setLine(uint8_t line)
{	
	//Set page start address
	*oledCmdAddress=0xB0|line;
 206:	e0 91 08 01 	lds	r30, 0x0108
 20a:	f0 91 09 01 	lds	r31, 0x0109
 20e:	80 6b       	ori	r24, 0xB0	; 176
 210:	80 83       	st	Z, r24
	//Set LOWER Column Start address (Page addr. mode)
	*oledCmdAddress=0x00;
 212:	e0 91 08 01 	lds	r30, 0x0108
 216:	f0 91 09 01 	lds	r31, 0x0109
 21a:	10 82       	st	Z, r1
	//Set HIGHER Column Start address (Page addr. mode)
	*oledCmdAddress=0x10;
 21c:	e0 91 08 01 	lds	r30, 0x0108
 220:	f0 91 09 01 	lds	r31, 0x0109
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <clearLine>:
}

void clearLine(uint8_t line)
{	
	//go to needed line(page)
	setLine(line);
 22a:	ed df       	rcall	.-38     	; 0x206 <setLine>
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	90 e0       	ldi	r25, 0x00	; 0
	for(int k=0; k<128; k++)
	{
		*oledDataAddress=0x00;							
 230:	e0 91 06 01 	lds	r30, 0x0106
 234:	f0 91 07 01 	lds	r31, 0x0107
 238:	10 82       	st	Z, r1
 23a:	01 97       	sbiw	r24, 0x01	; 1

void clearLine(uint8_t line)
{	
	//go to needed line(page)
	setLine(line);
	for(int k=0; k<128; k++)
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	c1 f7       	brne	.-16     	; 0x230 <clearLine+0x6>
	{
		*oledDataAddress=0x00;							
	}
}
 240:	08 95       	ret

00000242 <clearScreen>:

void clearScreen()
{
 242:	cf 93       	push	r28
 244:	c0 e0       	ldi	r28, 0x00	; 0
	//increment through all lines(pages)
	for(int line=0; line<=7; line++)
	{
		clearLine(line);
 246:	8c 2f       	mov	r24, r28
 248:	f0 df       	rcall	.-32     	; 0x22a <clearLine>
 24a:	cf 5f       	subi	r28, 0xFF	; 255
}

void clearScreen()
{
	//increment through all lines(pages)
	for(int line=0; line<=7; line++)
 24c:	c8 30       	cpi	r28, 0x08	; 8
 24e:	d9 f7       	brne	.-10     	; 0x246 <clearScreen+0x4>
	{
		clearLine(line);
	}
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <setColumn>:
}

void setColumn(uint8_t column)
{
	//Set LOWER Column Start address (Page addr. mode)
	*oledCmdAddress=0x00;
 254:	e0 91 08 01 	lds	r30, 0x0108
 258:	f0 91 09 01 	lds	r31, 0x0109
 25c:	10 82       	st	Z, r1
	//Set HIGHER Column Start address (Page addr. mode)
	*oledCmdAddress=0x10|(column);
 25e:	e0 91 08 01 	lds	r30, 0x0108
 262:	f0 91 09 01 	lds	r31, 0x0109
 266:	80 61       	ori	r24, 0x10	; 16
 268:	80 83       	st	Z, r24
 26a:	08 95       	ret

0000026c <oledPrint>:
	 *oledCmdAddress =0xa6; //set normal display
	 *oledCmdAddress =0xaf; // display on*/
}

void oledPrint(uint8_t line,uint8_t column)
{	
 26c:	cf 93       	push	r28
 26e:	c6 2f       	mov	r28, r22
	setLine(line);
 270:	ca df       	rcall	.-108    	; 0x206 <setLine>
	setColumn(column);
 272:	8c 2f       	mov	r24, r28
 274:	ef df       	rcall	.-34     	; 0x254 <setColumn>
	
	//exclamation mark!
	*oledDataAddress=0b00000110;
 276:	e0 91 06 01 	lds	r30, 0x0106
 27a:	f0 91 07 01 	lds	r31, 0x0107
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	80 83       	st	Z, r24
	*oledDataAddress=0b01011111;
 282:	e0 91 06 01 	lds	r30, 0x0106
 286:	f0 91 07 01 	lds	r31, 0x0107
 28a:	9f e5       	ldi	r25, 0x5F	; 95
 28c:	90 83       	st	Z, r25
	*oledDataAddress=0b01011111;
 28e:	e0 91 06 01 	lds	r30, 0x0106
 292:	f0 91 07 01 	lds	r31, 0x0107
 296:	90 83       	st	Z, r25
	*oledDataAddress=0b00000110;
 298:	e0 91 06 01 	lds	r30, 0x0106
 29c:	f0 91 07 01 	lds	r31, 0x0107
 2a0:	80 83       	st	Z, r24
	*oledDataAddress=0b00000000;
 2a2:	e0 91 06 01 	lds	r30, 0x0106
 2a6:	f0 91 07 01 	lds	r31, 0x0107
 2aa:	10 82       	st	Z, r1
	*oledDataAddress=0b00000000;
 2ac:	e0 91 06 01 	lds	r30, 0x0106
 2b0:	f0 91 07 01 	lds	r31, 0x0107
 2b4:	10 82       	st	Z, r1
	*oledDataAddress=0b00000000;	
 2b6:	e0 91 06 01 	lds	r30, 0x0106
 2ba:	f0 91 07 01 	lds	r31, 0x0107
 2be:	10 82       	st	Z, r1
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <usartSendByte>:


//Send a byte using USART
void usartSendByte(uint8_t byteToSend)
{
		while((UCSR0A&(1<<UDRE0))==0);//---------------//Only transmit data if data bus is available (not already transmitting)
 2c4:	5d 9b       	sbis	0x0b, 5	; 11
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <usartSendByte>
		UDR0=byteToSend;//---------------------------//transmit byte
 2c8:	8c b9       	out	0x0c, r24	; 12
 2ca:	08 95       	ret

000002cc <usartInitialize>:
		#if USART_OPERATING_MODE_U2X
			unsigned int UBRR=(F_CPU / (8UL * USART_BAUDRATE)) - 1; //if integer trunctuation is noticed (...not getting the expected baudrate) due to integer devision, USE: ((F_CPU + USART_BAUD_RATE * 8L) / (USART_BAUD_RATE * 16L) - 1) instead. When doing integer division it is usually better to round to the nearest integer, rather than to the lowest. 
			UCSR0A |= (1<<U2X0);//---------------------------//U2x=1
		#else
			unsigned int UBRR=(F_CPU / (16UL * USART_BAUDRATE)) - 1;
			UCSR0A &= ~(1<<U2X0);//---------------------------//U2X=0
 2cc:	59 98       	cbi	0x0b, 1	; 11
		#endif

		//Set up the baud rate for USART0
		UBRR0L=UBRR;//---------------------------// load lower 8 bits of baud rate value
 2ce:	8f e1       	ldi	r24, 0x1F	; 31
 2d0:	89 b9       	out	0x09, r24	; 9
		UBRR0H=(UBRR>>8);//---------------------------// load upper 8 bits of baud rate value	
 2d2:	10 bc       	out	0x20, r1	; 32
		
		//Enable Tx & Rx
		UCSR0B=(1<<TXEN0)|(1<<RXEN0);
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	8a b9       	out	0x0a, r24	; 10
		/*Configure Data Format: 
			-	Data Bits = 8;
			-	Stop Bits = 2;
			-	Parity = EVEN;		
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)|(1<<UPM01);
 2d8:	8e ea       	ldi	r24, 0xAE	; 174
 2da:	80 bd       	out	0x20, r24	; 32
		*	- Second parameter: optional; used for get functions, ie. receiving a character from the USART.
		*	- BEAWARE that this function uses malloc()
		*/
		if(USART_ENABLE_printf)
		{
			fdevopen(&usartSendByte,NULL);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	82 e6       	ldi	r24, 0x62	; 98
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	69 d2       	rcall	.+1234   	; 0x7b8 <fdevopen>
		}
		
		
		if(USART_INTERRUPT_RX)
		{
			UCSR0B |= (1<<RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXCIE0)
 2e6:	57 9a       	sbi	0x0a, 7	; 10
			//Enable the interrupts globally. 
			sei();
 2e8:	78 94       	sei
 2ea:	08 95       	ret

000002ec <__vector_19>:
UsartGlobalStruct globalVariables;

//volatile uint8_t byteOfData; //to hold data on RX interrupt
//interrupt if receiving data
ISR (USART0_RXC_vect,ISR_BLOCK)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
	if (USART_INTERRUPT_RX)
	{
		UsartGlobalStruct *ptr=&globalVariables;	
		ptr->RXdata=UDR0;//grab RX byte 
 2f8:	8c b1       	in	r24, 0x0c	; 12
 2fa:	80 93 da 02 	sts	0x02DA, r24
	}
}
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <xmemInit>:

	//Write address on SRAM
	memoryPosition[address] = data;
	
	return 0;
}
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	85 bf       	out	0x35, r24	; 53
 30e:	16 be       	out	0x36, r1	; 54
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	80 bf       	out	0x30, r24	; 48
 314:	08 95       	ret

00000316 <xmemTest>:
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	83 e1       	ldi	r24, 0x13	; 19
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	a1 d2       	rcall	.+1346   	; 0x86e <puts>
 32c:	00 e0       	ldi	r16, 0x00	; 0
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	d0 e0       	ldi	r29, 0x00	; 0
 334:	0f 2e       	mov	r0, r31
 336:	fa e2       	ldi	r31, 0x2A	; 42
 338:	ef 2e       	mov	r14, r31
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	ff 2e       	mov	r15, r31
 33e:	f0 2d       	mov	r31, r0
 340:	8c 2f       	mov	r24, r28
 342:	80 95       	com	r24
 344:	fe 01       	movw	r30, r28
 346:	f8 5e       	subi	r31, 0xE8	; 232
 348:	80 83       	st	Z, r24
 34a:	90 81       	ld	r25, Z
 34c:	98 17       	cp	r25, r24
 34e:	a1 f0       	breq	.+40     	; 0x378 <xmemTest+0x62>
 350:	90 81       	ld	r25, Z
 352:	1f 92       	push	r1
 354:	8f 93       	push	r24
 356:	1f 92       	push	r1
 358:	9f 93       	push	r25
 35a:	df 93       	push	r29
 35c:	cf 93       	push	r28
 35e:	ff 92       	push	r15
 360:	ef 92       	push	r14
 362:	74 d2       	rcall	.+1256   	; 0x84c <printf>
 364:	0f 5f       	subi	r16, 0xFF	; 255
 366:	1f 4f       	sbci	r17, 0xFF	; 255
 368:	8d b7       	in	r24, 0x3d	; 61
 36a:	9e b7       	in	r25, 0x3e	; 62
 36c:	08 96       	adiw	r24, 0x08	; 8
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	9e bf       	out	0x3e, r25	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	8d bf       	out	0x3d, r24	; 61
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	c1 15       	cp	r28, r1
 37c:	98 e0       	ldi	r25, 0x08	; 8
 37e:	d9 07       	cpc	r29, r25
 380:	f9 f6       	brne	.-66     	; 0x340 <xmemTest+0x2a>
 382:	e1 2c       	mov	r14, r1
 384:	f1 2c       	mov	r15, r1
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
 38a:	0f 2e       	mov	r0, r31
 38c:	fa e6       	ldi	r31, 0x6A	; 106
 38e:	cf 2e       	mov	r12, r31
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	df 2e       	mov	r13, r31
 394:	f0 2d       	mov	r31, r0
 396:	8c 2f       	mov	r24, r28
 398:	80 95       	com	r24
 39a:	fe 01       	movw	r30, r28
 39c:	f8 5e       	subi	r31, 0xE8	; 232
 39e:	90 81       	ld	r25, Z
 3a0:	89 17       	cp	r24, r25
 3a2:	a9 f0       	breq	.+42     	; 0x3ce <xmemTest+0xb8>
 3a4:	90 81       	ld	r25, Z
 3a6:	1f 92       	push	r1
 3a8:	8f 93       	push	r24
 3aa:	1f 92       	push	r1
 3ac:	9f 93       	push	r25
 3ae:	df 93       	push	r29
 3b0:	cf 93       	push	r28
 3b2:	df 92       	push	r13
 3b4:	cf 92       	push	r12
 3b6:	4a d2       	rcall	.+1172   	; 0x84c <printf>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	e8 1a       	sub	r14, r24
 3bc:	f8 0a       	sbc	r15, r24
 3be:	8d b7       	in	r24, 0x3d	; 61
 3c0:	9e b7       	in	r25, 0x3e	; 62
 3c2:	08 96       	adiw	r24, 0x08	; 8
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	9e bf       	out	0x3e, r25	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	8d bf       	out	0x3d, r24	; 61
 3ce:	21 96       	adiw	r28, 0x01	; 1
 3d0:	c1 15       	cp	r28, r1
 3d2:	98 e0       	ldi	r25, 0x08	; 8
 3d4:	d9 07       	cpc	r29, r25
 3d6:	f9 f6       	brne	.-66     	; 0x396 <xmemTest+0x80>
 3d8:	ff 92       	push	r15
 3da:	ef 92       	push	r14
 3dc:	1f 93       	push	r17
 3de:	0f 93       	push	r16
 3e0:	89 ea       	ldi	r24, 0xA9	; 169
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	31 d2       	rcall	.+1122   	; 0x84c <printf>
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret

00000408 <xmemExampleFunction>:
 408:	bf 92       	push	r11
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	89 ef       	ldi	r24, 0xF9	; 249
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	27 d2       	rcall	.+1102   	; 0x86e <puts>
 420:	80 e4       	ldi	r24, 0x40	; 64
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	a2 d0       	rcall	.+324    	; 0x56a <malloc>
 426:	7c 01       	movw	r14, r24
 428:	ff 92       	push	r15
 42a:	8f 93       	push	r24
 42c:	1f 92       	push	r1
 42e:	80 e4       	ldi	r24, 0x40	; 64
 430:	8f 93       	push	r24
 432:	84 e1       	ldi	r24, 0x14	; 20
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	9f 93       	push	r25
 438:	8f 93       	push	r24
 43a:	08 d2       	rcall	.+1040   	; 0x84c <printf>
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	f7 01       	movw	r30, r14
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	11 92       	st	Z+, r1
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	80 34       	cpi	r24, 0x40	; 64
 452:	e1 f7       	brne	.-8      	; 0x44c <xmemExampleFunction+0x44>
 454:	58 c0       	rjmp	.+176    	; 0x506 <__stack+0x7>
 456:	f8 01       	movw	r30, r16
 458:	81 91       	ld	r24, Z+
 45a:	8f 01       	movw	r16, r30
 45c:	1f 92       	push	r1
 45e:	8f 93       	push	r24
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	f3 d1       	rcall	.+998    	; 0x84c <printf>
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	8b 2d       	mov	r24, r11
 470:	8f 70       	andi	r24, 0x0F	; 15
 472:	8f 30       	cpi	r24, 0x0F	; 15
 474:	19 f4       	brne	.+6      	; 0x47c <xmemExampleFunction+0x74>
 476:	8e ea       	ldi	r24, 0xAE	; 174
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	f9 d1       	rcall	.+1010   	; 0x86e <puts>
 47c:	b3 94       	inc	r11
 47e:	e0 e4       	ldi	r30, 0x40	; 64
 480:	be 12       	cpse	r11, r30
 482:	e9 cf       	rjmp	.-46     	; 0x456 <xmemExampleFunction+0x4e>
 484:	ff 92       	push	r15
 486:	ef 92       	push	r14
 488:	1f 92       	push	r1
 48a:	80 e4       	ldi	r24, 0x40	; 64
 48c:	8f 93       	push	r24
 48e:	81 e5       	ldi	r24, 0x51	; 81
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	9f 93       	push	r25
 494:	8f 93       	push	r24
 496:	da d1       	rcall	.+948    	; 0x84c <printf>
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	f7 01       	movw	r30, r14
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	81 93       	st	Z+, r24
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 34       	cpi	r24, 0x40	; 64
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <xmemExampleFunction+0xa0>
 4b0:	18 c0       	rjmp	.+48     	; 0x4e2 <xmemExampleFunction+0xda>
 4b2:	f8 01       	movw	r30, r16
 4b4:	81 91       	ld	r24, Z+
 4b6:	8f 01       	movw	r16, r30
 4b8:	1f 92       	push	r1
 4ba:	8f 93       	push	r24
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	c5 d1       	rcall	.+906    	; 0x84c <printf>
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	8f 2d       	mov	r24, r15
 4cc:	8f 70       	andi	r24, 0x0F	; 15
 4ce:	8f 30       	cpi	r24, 0x0F	; 15
 4d0:	19 f4       	brne	.+6      	; 0x4d8 <xmemExampleFunction+0xd0>
 4d2:	8e ea       	ldi	r24, 0xAE	; 174
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	cb d1       	rcall	.+918    	; 0x86e <puts>
 4d8:	f3 94       	inc	r15
 4da:	e0 e4       	ldi	r30, 0x40	; 64
 4dc:	fe 12       	cpse	r15, r30
 4de:	e9 cf       	rjmp	.-46     	; 0x4b2 <xmemExampleFunction+0xaa>
 4e0:	25 c0       	rjmp	.+74     	; 0x52c <__stack+0x2d>
 4e2:	f7 01       	movw	r30, r14
 4e4:	80 81       	ld	r24, Z
 4e6:	1f 92       	push	r1
 4e8:	8f 93       	push	r24
 4ea:	8b e4       	ldi	r24, 0x4B	; 75
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	9f 93       	push	r25
 4f0:	8f 93       	push	r24
 4f2:	ac d1       	rcall	.+856    	; 0x84c <printf>
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	86 01       	movw	r16, r12
 4fe:	f1 2c       	mov	r15, r1
 500:	cb e4       	ldi	r28, 0x4B	; 75
 502:	d2 e0       	ldi	r29, 0x02	; 2
 504:	e9 cf       	rjmp	.-46     	; 0x4d8 <xmemExampleFunction+0xd0>
 506:	f7 01       	movw	r30, r14
 508:	81 91       	ld	r24, Z+
 50a:	6f 01       	movw	r12, r30
 50c:	1f 92       	push	r1
 50e:	8f 93       	push	r24
 510:	8b e4       	ldi	r24, 0x4B	; 75
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	9f 93       	push	r25
 516:	8f 93       	push	r24
 518:	99 d1       	rcall	.+818    	; 0x84c <printf>
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	86 01       	movw	r16, r12
 524:	b1 2c       	mov	r11, r1
 526:	cb e4       	ldi	r28, 0x4B	; 75
 528:	d2 e0       	ldi	r29, 0x02	; 2
 52a:	a8 cf       	rjmp	.-176    	; 0x47c <xmemExampleFunction+0x74>
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	df 90       	pop	r13
 53a:	cf 90       	pop	r12
 53c:	bf 90       	pop	r11
 53e:	08 95       	ret

00000540 <xmemReadFrom>:
{
	//Start address for the xmem
	uint8_t *memoryPosition = 0x1800;
	
	//Read address from SRAM
	return memoryPosition[address];
 540:	98 5e       	subi	r25, 0xE8	; 232
 542:	fc 01       	movw	r30, r24
 544:	80 81       	ld	r24, Z
}
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	08 95       	ret

0000054a <adcRead>:
	
}
uint8_t adcRead(uint8_t adcChannel)
{
	//check if the channel on the ADC exceeds number of used channels
	if(!(adcChannel<=3)&&(adcChannel>0))
 54a:	84 30       	cpi	r24, 0x04	; 4
 54c:	60 f4       	brcc	.+24     	; 0x566 <adcRead+0x1c>
	
	//set start position for ADC addressing
	volatile uint8_t *adcAddressing = 0x1400;
					
	//Choose address to work with in the ADC based on channel set in adcChannel
	*adcAddressing = (0x04|adcChannel);
 54e:	84 60       	ori	r24, 0x04	; 4
 550:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	81 e4       	ldi	r24, 0x41	; 65
 556:	8a 95       	dec	r24
 558:	f1 f7       	brne	.-4      	; 0x556 <adcRead+0xc>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <adcRead+0x12>
	
	_delay_us(40);//add delay between reads - AT LEAST 40uS if using interrupt for ADC0844CNN (if no delay; adc will read from the prevously selected channel )
		
	//wait for data to be read (..implement interrupt!!!)
	while(PINE & (1<<PINE0));//test PINE0 for changes (pin is cleared)
 55c:	28 99       	sbic	0x05, 0	; 5
 55e:	fe cf       	rjmp	.-4      	; 0x55c <adcRead+0x12>
		
	return *adcAddressing;
 560:	80 91 00 14 	lds	r24, 0x1400
 564:	08 95       	ret
}
uint8_t adcRead(uint8_t adcChannel)
{
	//check if the channel on the ADC exceeds number of used channels
	if(!(adcChannel<=3)&&(adcChannel>0))
		return 0;
 566:	80 e0       	ldi	r24, 0x00	; 0
		
	//wait for data to be read (..implement interrupt!!!)
	while(PINE & (1<<PINE0));//test PINE0 for changes (pin is cleared)
		
	return *adcAddressing;
 568:	08 95       	ret

0000056a <malloc>:
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	10 f4       	brcc	.+4      	; 0x578 <malloc+0xe>
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	e0 91 de 02 	lds	r30, 0x02DE
 57c:	f0 91 df 02 	lds	r31, 0x02DF
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	a0 e0       	ldi	r26, 0x00	; 0
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	39 f1       	breq	.+78     	; 0x5da <malloc+0x70>
 58c:	40 81       	ld	r20, Z
 58e:	51 81       	ldd	r21, Z+1	; 0x01
 590:	48 17       	cp	r20, r24
 592:	59 07       	cpc	r21, r25
 594:	b8 f0       	brcs	.+46     	; 0x5c4 <malloc+0x5a>
 596:	48 17       	cp	r20, r24
 598:	59 07       	cpc	r21, r25
 59a:	71 f4       	brne	.+28     	; 0x5b8 <malloc+0x4e>
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	93 81       	ldd	r25, Z+3	; 0x03
 5a0:	10 97       	sbiw	r26, 0x00	; 0
 5a2:	29 f0       	breq	.+10     	; 0x5ae <malloc+0x44>
 5a4:	13 96       	adiw	r26, 0x03	; 3
 5a6:	9c 93       	st	X, r25
 5a8:	8e 93       	st	-X, r24
 5aa:	12 97       	sbiw	r26, 0x02	; 2
 5ac:	2c c0       	rjmp	.+88     	; 0x606 <malloc+0x9c>
 5ae:	90 93 df 02 	sts	0x02DF, r25
 5b2:	80 93 de 02 	sts	0x02DE, r24
 5b6:	27 c0       	rjmp	.+78     	; 0x606 <malloc+0x9c>
 5b8:	21 15       	cp	r18, r1
 5ba:	31 05       	cpc	r19, r1
 5bc:	31 f0       	breq	.+12     	; 0x5ca <malloc+0x60>
 5be:	42 17       	cp	r20, r18
 5c0:	53 07       	cpc	r21, r19
 5c2:	18 f0       	brcs	.+6      	; 0x5ca <malloc+0x60>
 5c4:	a9 01       	movw	r20, r18
 5c6:	db 01       	movw	r26, r22
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <malloc+0x62>
 5ca:	ef 01       	movw	r28, r30
 5cc:	9a 01       	movw	r18, r20
 5ce:	bd 01       	movw	r22, r26
 5d0:	df 01       	movw	r26, r30
 5d2:	02 80       	ldd	r0, Z+2	; 0x02
 5d4:	f3 81       	ldd	r31, Z+3	; 0x03
 5d6:	e0 2d       	mov	r30, r0
 5d8:	d7 cf       	rjmp	.-82     	; 0x588 <malloc+0x1e>
 5da:	21 15       	cp	r18, r1
 5dc:	31 05       	cpc	r19, r1
 5de:	f9 f0       	breq	.+62     	; 0x61e <malloc+0xb4>
 5e0:	28 1b       	sub	r18, r24
 5e2:	39 0b       	sbc	r19, r25
 5e4:	24 30       	cpi	r18, 0x04	; 4
 5e6:	31 05       	cpc	r19, r1
 5e8:	80 f4       	brcc	.+32     	; 0x60a <malloc+0xa0>
 5ea:	8a 81       	ldd	r24, Y+2	; 0x02
 5ec:	9b 81       	ldd	r25, Y+3	; 0x03
 5ee:	61 15       	cp	r22, r1
 5f0:	71 05       	cpc	r23, r1
 5f2:	21 f0       	breq	.+8      	; 0x5fc <malloc+0x92>
 5f4:	fb 01       	movw	r30, r22
 5f6:	93 83       	std	Z+3, r25	; 0x03
 5f8:	82 83       	std	Z+2, r24	; 0x02
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <malloc+0x9a>
 5fc:	90 93 df 02 	sts	0x02DF, r25
 600:	80 93 de 02 	sts	0x02DE, r24
 604:	fe 01       	movw	r30, r28
 606:	32 96       	adiw	r30, 0x02	; 2
 608:	44 c0       	rjmp	.+136    	; 0x692 <malloc+0x128>
 60a:	fe 01       	movw	r30, r28
 60c:	e2 0f       	add	r30, r18
 60e:	f3 1f       	adc	r31, r19
 610:	81 93       	st	Z+, r24
 612:	91 93       	st	Z+, r25
 614:	22 50       	subi	r18, 0x02	; 2
 616:	31 09       	sbc	r19, r1
 618:	39 83       	std	Y+1, r19	; 0x01
 61a:	28 83       	st	Y, r18
 61c:	3a c0       	rjmp	.+116    	; 0x692 <malloc+0x128>
 61e:	20 91 dc 02 	lds	r18, 0x02DC
 622:	30 91 dd 02 	lds	r19, 0x02DD
 626:	23 2b       	or	r18, r19
 628:	41 f4       	brne	.+16     	; 0x63a <malloc+0xd0>
 62a:	20 91 02 01 	lds	r18, 0x0102
 62e:	30 91 03 01 	lds	r19, 0x0103
 632:	30 93 dd 02 	sts	0x02DD, r19
 636:	20 93 dc 02 	sts	0x02DC, r18
 63a:	20 91 00 01 	lds	r18, 0x0100
 63e:	30 91 01 01 	lds	r19, 0x0101
 642:	21 15       	cp	r18, r1
 644:	31 05       	cpc	r19, r1
 646:	41 f4       	brne	.+16     	; 0x658 <malloc+0xee>
 648:	2d b7       	in	r18, 0x3d	; 61
 64a:	3e b7       	in	r19, 0x3e	; 62
 64c:	40 91 04 01 	lds	r20, 0x0104
 650:	50 91 05 01 	lds	r21, 0x0105
 654:	24 1b       	sub	r18, r20
 656:	35 0b       	sbc	r19, r21
 658:	e0 91 dc 02 	lds	r30, 0x02DC
 65c:	f0 91 dd 02 	lds	r31, 0x02DD
 660:	e2 17       	cp	r30, r18
 662:	f3 07       	cpc	r31, r19
 664:	a0 f4       	brcc	.+40     	; 0x68e <malloc+0x124>
 666:	2e 1b       	sub	r18, r30
 668:	3f 0b       	sbc	r19, r31
 66a:	28 17       	cp	r18, r24
 66c:	39 07       	cpc	r19, r25
 66e:	78 f0       	brcs	.+30     	; 0x68e <malloc+0x124>
 670:	ac 01       	movw	r20, r24
 672:	4e 5f       	subi	r20, 0xFE	; 254
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	24 17       	cp	r18, r20
 678:	35 07       	cpc	r19, r21
 67a:	48 f0       	brcs	.+18     	; 0x68e <malloc+0x124>
 67c:	4e 0f       	add	r20, r30
 67e:	5f 1f       	adc	r21, r31
 680:	50 93 dd 02 	sts	0x02DD, r21
 684:	40 93 dc 02 	sts	0x02DC, r20
 688:	81 93       	st	Z+, r24
 68a:	91 93       	st	Z+, r25
 68c:	02 c0       	rjmp	.+4      	; 0x692 <malloc+0x128>
 68e:	e0 e0       	ldi	r30, 0x00	; 0
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	cf 01       	movw	r24, r30
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <free>:
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <free+0xa>
 6a2:	87 c0       	rjmp	.+270    	; 0x7b2 <free+0x118>
 6a4:	fc 01       	movw	r30, r24
 6a6:	32 97       	sbiw	r30, 0x02	; 2
 6a8:	13 82       	std	Z+3, r1	; 0x03
 6aa:	12 82       	std	Z+2, r1	; 0x02
 6ac:	c0 91 de 02 	lds	r28, 0x02DE
 6b0:	d0 91 df 02 	lds	r29, 0x02DF
 6b4:	20 97       	sbiw	r28, 0x00	; 0
 6b6:	81 f4       	brne	.+32     	; 0x6d8 <free+0x3e>
 6b8:	20 81       	ld	r18, Z
 6ba:	31 81       	ldd	r19, Z+1	; 0x01
 6bc:	28 0f       	add	r18, r24
 6be:	39 1f       	adc	r19, r25
 6c0:	80 91 dc 02 	lds	r24, 0x02DC
 6c4:	90 91 dd 02 	lds	r25, 0x02DD
 6c8:	82 17       	cp	r24, r18
 6ca:	93 07       	cpc	r25, r19
 6cc:	79 f5       	brne	.+94     	; 0x72c <free+0x92>
 6ce:	f0 93 dd 02 	sts	0x02DD, r31
 6d2:	e0 93 dc 02 	sts	0x02DC, r30
 6d6:	6d c0       	rjmp	.+218    	; 0x7b2 <free+0x118>
 6d8:	de 01       	movw	r26, r28
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	ae 17       	cp	r26, r30
 6e0:	bf 07       	cpc	r27, r31
 6e2:	50 f4       	brcc	.+20     	; 0x6f8 <free+0x5e>
 6e4:	12 96       	adiw	r26, 0x02	; 2
 6e6:	4d 91       	ld	r20, X+
 6e8:	5c 91       	ld	r21, X
 6ea:	13 97       	sbiw	r26, 0x03	; 3
 6ec:	9d 01       	movw	r18, r26
 6ee:	41 15       	cp	r20, r1
 6f0:	51 05       	cpc	r21, r1
 6f2:	09 f1       	breq	.+66     	; 0x736 <free+0x9c>
 6f4:	da 01       	movw	r26, r20
 6f6:	f3 cf       	rjmp	.-26     	; 0x6de <free+0x44>
 6f8:	b3 83       	std	Z+3, r27	; 0x03
 6fa:	a2 83       	std	Z+2, r26	; 0x02
 6fc:	40 81       	ld	r20, Z
 6fe:	51 81       	ldd	r21, Z+1	; 0x01
 700:	84 0f       	add	r24, r20
 702:	95 1f       	adc	r25, r21
 704:	8a 17       	cp	r24, r26
 706:	9b 07       	cpc	r25, r27
 708:	71 f4       	brne	.+28     	; 0x726 <free+0x8c>
 70a:	8d 91       	ld	r24, X+
 70c:	9c 91       	ld	r25, X
 70e:	11 97       	sbiw	r26, 0x01	; 1
 710:	84 0f       	add	r24, r20
 712:	95 1f       	adc	r25, r21
 714:	02 96       	adiw	r24, 0x02	; 2
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
 71a:	12 96       	adiw	r26, 0x02	; 2
 71c:	8d 91       	ld	r24, X+
 71e:	9c 91       	ld	r25, X
 720:	13 97       	sbiw	r26, 0x03	; 3
 722:	93 83       	std	Z+3, r25	; 0x03
 724:	82 83       	std	Z+2, r24	; 0x02
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	29 f4       	brne	.+10     	; 0x736 <free+0x9c>
 72c:	f0 93 df 02 	sts	0x02DF, r31
 730:	e0 93 de 02 	sts	0x02DE, r30
 734:	3e c0       	rjmp	.+124    	; 0x7b2 <free+0x118>
 736:	d9 01       	movw	r26, r18
 738:	13 96       	adiw	r26, 0x03	; 3
 73a:	fc 93       	st	X, r31
 73c:	ee 93       	st	-X, r30
 73e:	12 97       	sbiw	r26, 0x02	; 2
 740:	4d 91       	ld	r20, X+
 742:	5d 91       	ld	r21, X+
 744:	a4 0f       	add	r26, r20
 746:	b5 1f       	adc	r27, r21
 748:	ea 17       	cp	r30, r26
 74a:	fb 07       	cpc	r31, r27
 74c:	79 f4       	brne	.+30     	; 0x76c <free+0xd2>
 74e:	80 81       	ld	r24, Z
 750:	91 81       	ldd	r25, Z+1	; 0x01
 752:	84 0f       	add	r24, r20
 754:	95 1f       	adc	r25, r21
 756:	02 96       	adiw	r24, 0x02	; 2
 758:	d9 01       	movw	r26, r18
 75a:	11 96       	adiw	r26, 0x01	; 1
 75c:	9c 93       	st	X, r25
 75e:	8e 93       	st	-X, r24
 760:	82 81       	ldd	r24, Z+2	; 0x02
 762:	93 81       	ldd	r25, Z+3	; 0x03
 764:	13 96       	adiw	r26, 0x03	; 3
 766:	9c 93       	st	X, r25
 768:	8e 93       	st	-X, r24
 76a:	12 97       	sbiw	r26, 0x02	; 2
 76c:	e0 e0       	ldi	r30, 0x00	; 0
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	9b 81       	ldd	r25, Y+3	; 0x03
 774:	00 97       	sbiw	r24, 0x00	; 0
 776:	19 f0       	breq	.+6      	; 0x77e <free+0xe4>
 778:	fe 01       	movw	r30, r28
 77a:	ec 01       	movw	r28, r24
 77c:	f9 cf       	rjmp	.-14     	; 0x770 <free+0xd6>
 77e:	ce 01       	movw	r24, r28
 780:	02 96       	adiw	r24, 0x02	; 2
 782:	28 81       	ld	r18, Y
 784:	39 81       	ldd	r19, Y+1	; 0x01
 786:	82 0f       	add	r24, r18
 788:	93 1f       	adc	r25, r19
 78a:	20 91 dc 02 	lds	r18, 0x02DC
 78e:	30 91 dd 02 	lds	r19, 0x02DD
 792:	28 17       	cp	r18, r24
 794:	39 07       	cpc	r19, r25
 796:	69 f4       	brne	.+26     	; 0x7b2 <free+0x118>
 798:	30 97       	sbiw	r30, 0x00	; 0
 79a:	29 f4       	brne	.+10     	; 0x7a6 <free+0x10c>
 79c:	10 92 df 02 	sts	0x02DF, r1
 7a0:	10 92 de 02 	sts	0x02DE, r1
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <free+0x110>
 7a6:	13 82       	std	Z+3, r1	; 0x03
 7a8:	12 82       	std	Z+2, r1	; 0x02
 7aa:	d0 93 dd 02 	sts	0x02DD, r29
 7ae:	c0 93 dc 02 	sts	0x02DC, r28
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <fdevopen>:
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	ec 01       	movw	r28, r24
 7c2:	8b 01       	movw	r16, r22
 7c4:	00 97       	sbiw	r24, 0x00	; 0
 7c6:	31 f4       	brne	.+12     	; 0x7d4 <fdevopen+0x1c>
 7c8:	61 15       	cp	r22, r1
 7ca:	71 05       	cpc	r23, r1
 7cc:	19 f4       	brne	.+6      	; 0x7d4 <fdevopen+0x1c>
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	37 c0       	rjmp	.+110    	; 0x842 <fdevopen+0x8a>
 7d4:	6e e0       	ldi	r22, 0x0E	; 14
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	38 d2       	rcall	.+1136   	; 0xc4e <calloc>
 7de:	fc 01       	movw	r30, r24
 7e0:	00 97       	sbiw	r24, 0x00	; 0
 7e2:	a9 f3       	breq	.-22     	; 0x7ce <fdevopen+0x16>
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	83 83       	std	Z+3, r24	; 0x03
 7e8:	01 15       	cp	r16, r1
 7ea:	11 05       	cpc	r17, r1
 7ec:	71 f0       	breq	.+28     	; 0x80a <fdevopen+0x52>
 7ee:	13 87       	std	Z+11, r17	; 0x0b
 7f0:	02 87       	std	Z+10, r16	; 0x0a
 7f2:	81 e8       	ldi	r24, 0x81	; 129
 7f4:	83 83       	std	Z+3, r24	; 0x03
 7f6:	80 91 e0 02 	lds	r24, 0x02E0
 7fa:	90 91 e1 02 	lds	r25, 0x02E1
 7fe:	89 2b       	or	r24, r25
 800:	21 f4       	brne	.+8      	; 0x80a <fdevopen+0x52>
 802:	f0 93 e1 02 	sts	0x02E1, r31
 806:	e0 93 e0 02 	sts	0x02E0, r30
 80a:	20 97       	sbiw	r28, 0x00	; 0
 80c:	c9 f0       	breq	.+50     	; 0x840 <fdevopen+0x88>
 80e:	d1 87       	std	Z+9, r29	; 0x09
 810:	c0 87       	std	Z+8, r28	; 0x08
 812:	83 81       	ldd	r24, Z+3	; 0x03
 814:	82 60       	ori	r24, 0x02	; 2
 816:	83 83       	std	Z+3, r24	; 0x03
 818:	80 91 e2 02 	lds	r24, 0x02E2
 81c:	90 91 e3 02 	lds	r25, 0x02E3
 820:	89 2b       	or	r24, r25
 822:	71 f4       	brne	.+28     	; 0x840 <fdevopen+0x88>
 824:	f0 93 e3 02 	sts	0x02E3, r31
 828:	e0 93 e2 02 	sts	0x02E2, r30
 82c:	80 91 e4 02 	lds	r24, 0x02E4
 830:	90 91 e5 02 	lds	r25, 0x02E5
 834:	89 2b       	or	r24, r25
 836:	21 f4       	brne	.+8      	; 0x840 <fdevopen+0x88>
 838:	f0 93 e5 02 	sts	0x02E5, r31
 83c:	e0 93 e4 02 	sts	0x02E4, r30
 840:	cf 01       	movw	r24, r30
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	08 95       	ret

0000084c <printf>:
 84c:	a0 e0       	ldi	r26, 0x00	; 0
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	eb e2       	ldi	r30, 0x2B	; 43
 852:	f4 e0       	ldi	r31, 0x04	; 4
 854:	d3 c2       	rjmp	.+1446   	; 0xdfc <__prologue_saves__+0x20>
 856:	fe 01       	movw	r30, r28
 858:	35 96       	adiw	r30, 0x05	; 5
 85a:	61 91       	ld	r22, Z+
 85c:	71 91       	ld	r23, Z+
 85e:	af 01       	movw	r20, r30
 860:	80 91 e2 02 	lds	r24, 0x02E2
 864:	90 91 e3 02 	lds	r25, 0x02E3
 868:	2f d0       	rcall	.+94     	; 0x8c8 <vfprintf>
 86a:	e2 e0       	ldi	r30, 0x02	; 2
 86c:	e3 c2       	rjmp	.+1478   	; 0xe34 <__epilogue_restores__+0x20>

0000086e <puts>:
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	e0 91 e2 02 	lds	r30, 0x02E2
 87a:	f0 91 e3 02 	lds	r31, 0x02E3
 87e:	23 81       	ldd	r18, Z+3	; 0x03
 880:	21 ff       	sbrs	r18, 1
 882:	1b c0       	rjmp	.+54     	; 0x8ba <puts+0x4c>
 884:	ec 01       	movw	r28, r24
 886:	00 e0       	ldi	r16, 0x00	; 0
 888:	10 e0       	ldi	r17, 0x00	; 0
 88a:	89 91       	ld	r24, Y+
 88c:	60 91 e2 02 	lds	r22, 0x02E2
 890:	70 91 e3 02 	lds	r23, 0x02E3
 894:	db 01       	movw	r26, r22
 896:	18 96       	adiw	r26, 0x08	; 8
 898:	ed 91       	ld	r30, X+
 89a:	fc 91       	ld	r31, X
 89c:	19 97       	sbiw	r26, 0x09	; 9
 89e:	88 23       	and	r24, r24
 8a0:	31 f0       	breq	.+12     	; 0x8ae <puts+0x40>
 8a2:	09 95       	icall
 8a4:	89 2b       	or	r24, r25
 8a6:	89 f3       	breq	.-30     	; 0x88a <puts+0x1c>
 8a8:	0f ef       	ldi	r16, 0xFF	; 255
 8aa:	1f ef       	ldi	r17, 0xFF	; 255
 8ac:	ee cf       	rjmp	.-36     	; 0x88a <puts+0x1c>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	09 95       	icall
 8b2:	89 2b       	or	r24, r25
 8b4:	11 f4       	brne	.+4      	; 0x8ba <puts+0x4c>
 8b6:	c8 01       	movw	r24, r16
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <puts+0x50>
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	9f ef       	ldi	r25, 0xFF	; 255
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	08 95       	ret

000008c8 <vfprintf>:
 8c8:	ac e0       	ldi	r26, 0x0C	; 12
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	e9 e6       	ldi	r30, 0x69	; 105
 8ce:	f4 e0       	ldi	r31, 0x04	; 4
 8d0:	85 c2       	rjmp	.+1290   	; 0xddc <__prologue_saves__>
 8d2:	7c 01       	movw	r14, r24
 8d4:	6b 01       	movw	r12, r22
 8d6:	8a 01       	movw	r16, r20
 8d8:	fc 01       	movw	r30, r24
 8da:	17 82       	std	Z+7, r1	; 0x07
 8dc:	16 82       	std	Z+6, r1	; 0x06
 8de:	83 81       	ldd	r24, Z+3	; 0x03
 8e0:	81 ff       	sbrs	r24, 1
 8e2:	b0 c1       	rjmp	.+864    	; 0xc44 <vfprintf+0x37c>
 8e4:	ce 01       	movw	r24, r28
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	4c 01       	movw	r8, r24
 8ea:	f7 01       	movw	r30, r14
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	f6 01       	movw	r30, r12
 8f0:	93 fd       	sbrc	r25, 3
 8f2:	85 91       	lpm	r24, Z+
 8f4:	93 ff       	sbrs	r25, 3
 8f6:	81 91       	ld	r24, Z+
 8f8:	6f 01       	movw	r12, r30
 8fa:	88 23       	and	r24, r24
 8fc:	09 f4       	brne	.+2      	; 0x900 <vfprintf+0x38>
 8fe:	9e c1       	rjmp	.+828    	; 0xc3c <vfprintf+0x374>
 900:	85 32       	cpi	r24, 0x25	; 37
 902:	39 f4       	brne	.+14     	; 0x912 <vfprintf+0x4a>
 904:	93 fd       	sbrc	r25, 3
 906:	85 91       	lpm	r24, Z+
 908:	93 ff       	sbrs	r25, 3
 90a:	81 91       	ld	r24, Z+
 90c:	6f 01       	movw	r12, r30
 90e:	85 32       	cpi	r24, 0x25	; 37
 910:	21 f4       	brne	.+8      	; 0x91a <vfprintf+0x52>
 912:	b7 01       	movw	r22, r14
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	d2 d1       	rcall	.+932    	; 0xcbc <fputc>
 918:	e8 cf       	rjmp	.-48     	; 0x8ea <vfprintf+0x22>
 91a:	51 2c       	mov	r5, r1
 91c:	31 2c       	mov	r3, r1
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	20 32       	cpi	r18, 0x20	; 32
 922:	a0 f4       	brcc	.+40     	; 0x94c <vfprintf+0x84>
 924:	8b 32       	cpi	r24, 0x2B	; 43
 926:	69 f0       	breq	.+26     	; 0x942 <vfprintf+0x7a>
 928:	30 f4       	brcc	.+12     	; 0x936 <vfprintf+0x6e>
 92a:	80 32       	cpi	r24, 0x20	; 32
 92c:	59 f0       	breq	.+22     	; 0x944 <vfprintf+0x7c>
 92e:	83 32       	cpi	r24, 0x23	; 35
 930:	69 f4       	brne	.+26     	; 0x94c <vfprintf+0x84>
 932:	20 61       	ori	r18, 0x10	; 16
 934:	2c c0       	rjmp	.+88     	; 0x98e <vfprintf+0xc6>
 936:	8d 32       	cpi	r24, 0x2D	; 45
 938:	39 f0       	breq	.+14     	; 0x948 <vfprintf+0x80>
 93a:	80 33       	cpi	r24, 0x30	; 48
 93c:	39 f4       	brne	.+14     	; 0x94c <vfprintf+0x84>
 93e:	21 60       	ori	r18, 0x01	; 1
 940:	26 c0       	rjmp	.+76     	; 0x98e <vfprintf+0xc6>
 942:	22 60       	ori	r18, 0x02	; 2
 944:	24 60       	ori	r18, 0x04	; 4
 946:	23 c0       	rjmp	.+70     	; 0x98e <vfprintf+0xc6>
 948:	28 60       	ori	r18, 0x08	; 8
 94a:	21 c0       	rjmp	.+66     	; 0x98e <vfprintf+0xc6>
 94c:	27 fd       	sbrc	r18, 7
 94e:	27 c0       	rjmp	.+78     	; 0x99e <vfprintf+0xd6>
 950:	30 ed       	ldi	r19, 0xD0	; 208
 952:	38 0f       	add	r19, r24
 954:	3a 30       	cpi	r19, 0x0A	; 10
 956:	78 f4       	brcc	.+30     	; 0x976 <vfprintf+0xae>
 958:	26 ff       	sbrs	r18, 6
 95a:	06 c0       	rjmp	.+12     	; 0x968 <vfprintf+0xa0>
 95c:	fa e0       	ldi	r31, 0x0A	; 10
 95e:	5f 9e       	mul	r5, r31
 960:	30 0d       	add	r19, r0
 962:	11 24       	eor	r1, r1
 964:	53 2e       	mov	r5, r19
 966:	13 c0       	rjmp	.+38     	; 0x98e <vfprintf+0xc6>
 968:	8a e0       	ldi	r24, 0x0A	; 10
 96a:	38 9e       	mul	r3, r24
 96c:	30 0d       	add	r19, r0
 96e:	11 24       	eor	r1, r1
 970:	33 2e       	mov	r3, r19
 972:	20 62       	ori	r18, 0x20	; 32
 974:	0c c0       	rjmp	.+24     	; 0x98e <vfprintf+0xc6>
 976:	8e 32       	cpi	r24, 0x2E	; 46
 978:	21 f4       	brne	.+8      	; 0x982 <vfprintf+0xba>
 97a:	26 fd       	sbrc	r18, 6
 97c:	5f c1       	rjmp	.+702    	; 0xc3c <vfprintf+0x374>
 97e:	20 64       	ori	r18, 0x40	; 64
 980:	06 c0       	rjmp	.+12     	; 0x98e <vfprintf+0xc6>
 982:	8c 36       	cpi	r24, 0x6C	; 108
 984:	11 f4       	brne	.+4      	; 0x98a <vfprintf+0xc2>
 986:	20 68       	ori	r18, 0x80	; 128
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0xc6>
 98a:	88 36       	cpi	r24, 0x68	; 104
 98c:	41 f4       	brne	.+16     	; 0x99e <vfprintf+0xd6>
 98e:	f6 01       	movw	r30, r12
 990:	93 fd       	sbrc	r25, 3
 992:	85 91       	lpm	r24, Z+
 994:	93 ff       	sbrs	r25, 3
 996:	81 91       	ld	r24, Z+
 998:	6f 01       	movw	r12, r30
 99a:	81 11       	cpse	r24, r1
 99c:	c1 cf       	rjmp	.-126    	; 0x920 <vfprintf+0x58>
 99e:	98 2f       	mov	r25, r24
 9a0:	9f 7d       	andi	r25, 0xDF	; 223
 9a2:	95 54       	subi	r25, 0x45	; 69
 9a4:	93 30       	cpi	r25, 0x03	; 3
 9a6:	28 f4       	brcc	.+10     	; 0x9b2 <vfprintf+0xea>
 9a8:	0c 5f       	subi	r16, 0xFC	; 252
 9aa:	1f 4f       	sbci	r17, 0xFF	; 255
 9ac:	ff e3       	ldi	r31, 0x3F	; 63
 9ae:	f9 83       	std	Y+1, r31	; 0x01
 9b0:	0d c0       	rjmp	.+26     	; 0x9cc <vfprintf+0x104>
 9b2:	83 36       	cpi	r24, 0x63	; 99
 9b4:	31 f0       	breq	.+12     	; 0x9c2 <vfprintf+0xfa>
 9b6:	83 37       	cpi	r24, 0x73	; 115
 9b8:	71 f0       	breq	.+28     	; 0x9d6 <vfprintf+0x10e>
 9ba:	83 35       	cpi	r24, 0x53	; 83
 9bc:	09 f0       	breq	.+2      	; 0x9c0 <vfprintf+0xf8>
 9be:	57 c0       	rjmp	.+174    	; 0xa6e <vfprintf+0x1a6>
 9c0:	21 c0       	rjmp	.+66     	; 0xa04 <vfprintf+0x13c>
 9c2:	f8 01       	movw	r30, r16
 9c4:	80 81       	ld	r24, Z
 9c6:	89 83       	std	Y+1, r24	; 0x01
 9c8:	0e 5f       	subi	r16, 0xFE	; 254
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	44 24       	eor	r4, r4
 9ce:	43 94       	inc	r4
 9d0:	51 2c       	mov	r5, r1
 9d2:	54 01       	movw	r10, r8
 9d4:	14 c0       	rjmp	.+40     	; 0x9fe <vfprintf+0x136>
 9d6:	38 01       	movw	r6, r16
 9d8:	f2 e0       	ldi	r31, 0x02	; 2
 9da:	6f 0e       	add	r6, r31
 9dc:	71 1c       	adc	r7, r1
 9de:	f8 01       	movw	r30, r16
 9e0:	a0 80       	ld	r10, Z
 9e2:	b1 80       	ldd	r11, Z+1	; 0x01
 9e4:	26 ff       	sbrs	r18, 6
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <vfprintf+0x126>
 9e8:	65 2d       	mov	r22, r5
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <vfprintf+0x12a>
 9ee:	6f ef       	ldi	r22, 0xFF	; 255
 9f0:	7f ef       	ldi	r23, 0xFF	; 255
 9f2:	c5 01       	movw	r24, r10
 9f4:	2c 87       	std	Y+12, r18	; 0x0c
 9f6:	57 d1       	rcall	.+686    	; 0xca6 <strnlen>
 9f8:	2c 01       	movw	r4, r24
 9fa:	83 01       	movw	r16, r6
 9fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 9fe:	2f 77       	andi	r18, 0x7F	; 127
 a00:	22 2e       	mov	r2, r18
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <vfprintf+0x168>
 a04:	38 01       	movw	r6, r16
 a06:	f2 e0       	ldi	r31, 0x02	; 2
 a08:	6f 0e       	add	r6, r31
 a0a:	71 1c       	adc	r7, r1
 a0c:	f8 01       	movw	r30, r16
 a0e:	a0 80       	ld	r10, Z
 a10:	b1 80       	ldd	r11, Z+1	; 0x01
 a12:	26 ff       	sbrs	r18, 6
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <vfprintf+0x154>
 a16:	65 2d       	mov	r22, r5
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <vfprintf+0x158>
 a1c:	6f ef       	ldi	r22, 0xFF	; 255
 a1e:	7f ef       	ldi	r23, 0xFF	; 255
 a20:	c5 01       	movw	r24, r10
 a22:	2c 87       	std	Y+12, r18	; 0x0c
 a24:	2e d1       	rcall	.+604    	; 0xc82 <strnlen_P>
 a26:	2c 01       	movw	r4, r24
 a28:	2c 85       	ldd	r18, Y+12	; 0x0c
 a2a:	20 68       	ori	r18, 0x80	; 128
 a2c:	22 2e       	mov	r2, r18
 a2e:	83 01       	movw	r16, r6
 a30:	23 fc       	sbrc	r2, 3
 a32:	19 c0       	rjmp	.+50     	; 0xa66 <vfprintf+0x19e>
 a34:	83 2d       	mov	r24, r3
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	48 16       	cp	r4, r24
 a3a:	59 06       	cpc	r5, r25
 a3c:	a0 f4       	brcc	.+40     	; 0xa66 <vfprintf+0x19e>
 a3e:	b7 01       	movw	r22, r14
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	3b d1       	rcall	.+630    	; 0xcbc <fputc>
 a46:	3a 94       	dec	r3
 a48:	f5 cf       	rjmp	.-22     	; 0xa34 <vfprintf+0x16c>
 a4a:	f5 01       	movw	r30, r10
 a4c:	27 fc       	sbrc	r2, 7
 a4e:	85 91       	lpm	r24, Z+
 a50:	27 fe       	sbrs	r2, 7
 a52:	81 91       	ld	r24, Z+
 a54:	5f 01       	movw	r10, r30
 a56:	b7 01       	movw	r22, r14
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	30 d1       	rcall	.+608    	; 0xcbc <fputc>
 a5c:	31 10       	cpse	r3, r1
 a5e:	3a 94       	dec	r3
 a60:	f1 e0       	ldi	r31, 0x01	; 1
 a62:	4f 1a       	sub	r4, r31
 a64:	51 08       	sbc	r5, r1
 a66:	41 14       	cp	r4, r1
 a68:	51 04       	cpc	r5, r1
 a6a:	79 f7       	brne	.-34     	; 0xa4a <vfprintf+0x182>
 a6c:	de c0       	rjmp	.+444    	; 0xc2a <vfprintf+0x362>
 a6e:	84 36       	cpi	r24, 0x64	; 100
 a70:	11 f0       	breq	.+4      	; 0xa76 <vfprintf+0x1ae>
 a72:	89 36       	cpi	r24, 0x69	; 105
 a74:	31 f5       	brne	.+76     	; 0xac2 <vfprintf+0x1fa>
 a76:	f8 01       	movw	r30, r16
 a78:	27 ff       	sbrs	r18, 7
 a7a:	07 c0       	rjmp	.+14     	; 0xa8a <vfprintf+0x1c2>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	82 81       	ldd	r24, Z+2	; 0x02
 a82:	93 81       	ldd	r25, Z+3	; 0x03
 a84:	0c 5f       	subi	r16, 0xFC	; 252
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <vfprintf+0x1d2>
 a8a:	60 81       	ld	r22, Z
 a8c:	71 81       	ldd	r23, Z+1	; 0x01
 a8e:	88 27       	eor	r24, r24
 a90:	77 fd       	sbrc	r23, 7
 a92:	80 95       	com	r24
 a94:	98 2f       	mov	r25, r24
 a96:	0e 5f       	subi	r16, 0xFE	; 254
 a98:	1f 4f       	sbci	r17, 0xFF	; 255
 a9a:	2f 76       	andi	r18, 0x6F	; 111
 a9c:	b2 2e       	mov	r11, r18
 a9e:	97 ff       	sbrs	r25, 7
 aa0:	09 c0       	rjmp	.+18     	; 0xab4 <vfprintf+0x1ec>
 aa2:	90 95       	com	r25
 aa4:	80 95       	com	r24
 aa6:	70 95       	com	r23
 aa8:	61 95       	neg	r22
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	20 68       	ori	r18, 0x80	; 128
 ab2:	b2 2e       	mov	r11, r18
 ab4:	2a e0       	ldi	r18, 0x0A	; 10
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	a4 01       	movw	r20, r8
 aba:	32 d1       	rcall	.+612    	; 0xd20 <__ultoa_invert>
 abc:	a8 2e       	mov	r10, r24
 abe:	a8 18       	sub	r10, r8
 ac0:	43 c0       	rjmp	.+134    	; 0xb48 <vfprintf+0x280>
 ac2:	85 37       	cpi	r24, 0x75	; 117
 ac4:	29 f4       	brne	.+10     	; 0xad0 <vfprintf+0x208>
 ac6:	2f 7e       	andi	r18, 0xEF	; 239
 ac8:	b2 2e       	mov	r11, r18
 aca:	2a e0       	ldi	r18, 0x0A	; 10
 acc:	30 e0       	ldi	r19, 0x00	; 0
 ace:	25 c0       	rjmp	.+74     	; 0xb1a <vfprintf+0x252>
 ad0:	f2 2f       	mov	r31, r18
 ad2:	f9 7f       	andi	r31, 0xF9	; 249
 ad4:	bf 2e       	mov	r11, r31
 ad6:	8f 36       	cpi	r24, 0x6F	; 111
 ad8:	c1 f0       	breq	.+48     	; 0xb0a <vfprintf+0x242>
 ada:	18 f4       	brcc	.+6      	; 0xae2 <vfprintf+0x21a>
 adc:	88 35       	cpi	r24, 0x58	; 88
 ade:	79 f0       	breq	.+30     	; 0xafe <vfprintf+0x236>
 ae0:	ad c0       	rjmp	.+346    	; 0xc3c <vfprintf+0x374>
 ae2:	80 37       	cpi	r24, 0x70	; 112
 ae4:	19 f0       	breq	.+6      	; 0xaec <vfprintf+0x224>
 ae6:	88 37       	cpi	r24, 0x78	; 120
 ae8:	21 f0       	breq	.+8      	; 0xaf2 <vfprintf+0x22a>
 aea:	a8 c0       	rjmp	.+336    	; 0xc3c <vfprintf+0x374>
 aec:	2f 2f       	mov	r18, r31
 aee:	20 61       	ori	r18, 0x10	; 16
 af0:	b2 2e       	mov	r11, r18
 af2:	b4 fe       	sbrs	r11, 4
 af4:	0d c0       	rjmp	.+26     	; 0xb10 <vfprintf+0x248>
 af6:	8b 2d       	mov	r24, r11
 af8:	84 60       	ori	r24, 0x04	; 4
 afa:	b8 2e       	mov	r11, r24
 afc:	09 c0       	rjmp	.+18     	; 0xb10 <vfprintf+0x248>
 afe:	24 ff       	sbrs	r18, 4
 b00:	0a c0       	rjmp	.+20     	; 0xb16 <vfprintf+0x24e>
 b02:	9f 2f       	mov	r25, r31
 b04:	96 60       	ori	r25, 0x06	; 6
 b06:	b9 2e       	mov	r11, r25
 b08:	06 c0       	rjmp	.+12     	; 0xb16 <vfprintf+0x24e>
 b0a:	28 e0       	ldi	r18, 0x08	; 8
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	05 c0       	rjmp	.+10     	; 0xb1a <vfprintf+0x252>
 b10:	20 e1       	ldi	r18, 0x10	; 16
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x252>
 b16:	20 e1       	ldi	r18, 0x10	; 16
 b18:	32 e0       	ldi	r19, 0x02	; 2
 b1a:	f8 01       	movw	r30, r16
 b1c:	b7 fe       	sbrs	r11, 7
 b1e:	07 c0       	rjmp	.+14     	; 0xb2e <vfprintf+0x266>
 b20:	60 81       	ld	r22, Z
 b22:	71 81       	ldd	r23, Z+1	; 0x01
 b24:	82 81       	ldd	r24, Z+2	; 0x02
 b26:	93 81       	ldd	r25, Z+3	; 0x03
 b28:	0c 5f       	subi	r16, 0xFC	; 252
 b2a:	1f 4f       	sbci	r17, 0xFF	; 255
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <vfprintf+0x272>
 b2e:	60 81       	ld	r22, Z
 b30:	71 81       	ldd	r23, Z+1	; 0x01
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	0e 5f       	subi	r16, 0xFE	; 254
 b38:	1f 4f       	sbci	r17, 0xFF	; 255
 b3a:	a4 01       	movw	r20, r8
 b3c:	f1 d0       	rcall	.+482    	; 0xd20 <__ultoa_invert>
 b3e:	a8 2e       	mov	r10, r24
 b40:	a8 18       	sub	r10, r8
 b42:	fb 2d       	mov	r31, r11
 b44:	ff 77       	andi	r31, 0x7F	; 127
 b46:	bf 2e       	mov	r11, r31
 b48:	b6 fe       	sbrs	r11, 6
 b4a:	0b c0       	rjmp	.+22     	; 0xb62 <vfprintf+0x29a>
 b4c:	2b 2d       	mov	r18, r11
 b4e:	2e 7f       	andi	r18, 0xFE	; 254
 b50:	a5 14       	cp	r10, r5
 b52:	50 f4       	brcc	.+20     	; 0xb68 <vfprintf+0x2a0>
 b54:	b4 fe       	sbrs	r11, 4
 b56:	0a c0       	rjmp	.+20     	; 0xb6c <vfprintf+0x2a4>
 b58:	b2 fc       	sbrc	r11, 2
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <vfprintf+0x2a4>
 b5c:	2b 2d       	mov	r18, r11
 b5e:	2e 7e       	andi	r18, 0xEE	; 238
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <vfprintf+0x2a4>
 b62:	7a 2c       	mov	r7, r10
 b64:	2b 2d       	mov	r18, r11
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <vfprintf+0x2a6>
 b68:	7a 2c       	mov	r7, r10
 b6a:	01 c0       	rjmp	.+2      	; 0xb6e <vfprintf+0x2a6>
 b6c:	75 2c       	mov	r7, r5
 b6e:	24 ff       	sbrs	r18, 4
 b70:	0d c0       	rjmp	.+26     	; 0xb8c <vfprintf+0x2c4>
 b72:	fe 01       	movw	r30, r28
 b74:	ea 0d       	add	r30, r10
 b76:	f1 1d       	adc	r31, r1
 b78:	80 81       	ld	r24, Z
 b7a:	80 33       	cpi	r24, 0x30	; 48
 b7c:	11 f4       	brne	.+4      	; 0xb82 <vfprintf+0x2ba>
 b7e:	29 7e       	andi	r18, 0xE9	; 233
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <vfprintf+0x2cc>
 b82:	22 ff       	sbrs	r18, 2
 b84:	06 c0       	rjmp	.+12     	; 0xb92 <vfprintf+0x2ca>
 b86:	73 94       	inc	r7
 b88:	73 94       	inc	r7
 b8a:	04 c0       	rjmp	.+8      	; 0xb94 <vfprintf+0x2cc>
 b8c:	82 2f       	mov	r24, r18
 b8e:	86 78       	andi	r24, 0x86	; 134
 b90:	09 f0       	breq	.+2      	; 0xb94 <vfprintf+0x2cc>
 b92:	73 94       	inc	r7
 b94:	23 fd       	sbrc	r18, 3
 b96:	12 c0       	rjmp	.+36     	; 0xbbc <vfprintf+0x2f4>
 b98:	20 ff       	sbrs	r18, 0
 b9a:	06 c0       	rjmp	.+12     	; 0xba8 <vfprintf+0x2e0>
 b9c:	5a 2c       	mov	r5, r10
 b9e:	73 14       	cp	r7, r3
 ba0:	18 f4       	brcc	.+6      	; 0xba8 <vfprintf+0x2e0>
 ba2:	53 0c       	add	r5, r3
 ba4:	57 18       	sub	r5, r7
 ba6:	73 2c       	mov	r7, r3
 ba8:	73 14       	cp	r7, r3
 baa:	60 f4       	brcc	.+24     	; 0xbc4 <vfprintf+0x2fc>
 bac:	b7 01       	movw	r22, r14
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	2c 87       	std	Y+12, r18	; 0x0c
 bb4:	83 d0       	rcall	.+262    	; 0xcbc <fputc>
 bb6:	73 94       	inc	r7
 bb8:	2c 85       	ldd	r18, Y+12	; 0x0c
 bba:	f6 cf       	rjmp	.-20     	; 0xba8 <vfprintf+0x2e0>
 bbc:	73 14       	cp	r7, r3
 bbe:	10 f4       	brcc	.+4      	; 0xbc4 <vfprintf+0x2fc>
 bc0:	37 18       	sub	r3, r7
 bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <vfprintf+0x2fe>
 bc4:	31 2c       	mov	r3, r1
 bc6:	24 ff       	sbrs	r18, 4
 bc8:	11 c0       	rjmp	.+34     	; 0xbec <vfprintf+0x324>
 bca:	b7 01       	movw	r22, r14
 bcc:	80 e3       	ldi	r24, 0x30	; 48
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	2c 87       	std	Y+12, r18	; 0x0c
 bd2:	74 d0       	rcall	.+232    	; 0xcbc <fputc>
 bd4:	2c 85       	ldd	r18, Y+12	; 0x0c
 bd6:	22 ff       	sbrs	r18, 2
 bd8:	16 c0       	rjmp	.+44     	; 0xc06 <vfprintf+0x33e>
 bda:	21 ff       	sbrs	r18, 1
 bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <vfprintf+0x31c>
 bde:	88 e5       	ldi	r24, 0x58	; 88
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <vfprintf+0x320>
 be4:	88 e7       	ldi	r24, 0x78	; 120
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	b7 01       	movw	r22, r14
 bea:	0c c0       	rjmp	.+24     	; 0xc04 <vfprintf+0x33c>
 bec:	82 2f       	mov	r24, r18
 bee:	86 78       	andi	r24, 0x86	; 134
 bf0:	51 f0       	breq	.+20     	; 0xc06 <vfprintf+0x33e>
 bf2:	21 fd       	sbrc	r18, 1
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <vfprintf+0x332>
 bf6:	80 e2       	ldi	r24, 0x20	; 32
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <vfprintf+0x334>
 bfa:	8b e2       	ldi	r24, 0x2B	; 43
 bfc:	27 fd       	sbrc	r18, 7
 bfe:	8d e2       	ldi	r24, 0x2D	; 45
 c00:	b7 01       	movw	r22, r14
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	5b d0       	rcall	.+182    	; 0xcbc <fputc>
 c06:	a5 14       	cp	r10, r5
 c08:	30 f4       	brcc	.+12     	; 0xc16 <vfprintf+0x34e>
 c0a:	b7 01       	movw	r22, r14
 c0c:	80 e3       	ldi	r24, 0x30	; 48
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	55 d0       	rcall	.+170    	; 0xcbc <fputc>
 c12:	5a 94       	dec	r5
 c14:	f8 cf       	rjmp	.-16     	; 0xc06 <vfprintf+0x33e>
 c16:	aa 94       	dec	r10
 c18:	f4 01       	movw	r30, r8
 c1a:	ea 0d       	add	r30, r10
 c1c:	f1 1d       	adc	r31, r1
 c1e:	80 81       	ld	r24, Z
 c20:	b7 01       	movw	r22, r14
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	4b d0       	rcall	.+150    	; 0xcbc <fputc>
 c26:	a1 10       	cpse	r10, r1
 c28:	f6 cf       	rjmp	.-20     	; 0xc16 <vfprintf+0x34e>
 c2a:	33 20       	and	r3, r3
 c2c:	09 f4       	brne	.+2      	; 0xc30 <vfprintf+0x368>
 c2e:	5d ce       	rjmp	.-838    	; 0x8ea <vfprintf+0x22>
 c30:	b7 01       	movw	r22, r14
 c32:	80 e2       	ldi	r24, 0x20	; 32
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	42 d0       	rcall	.+132    	; 0xcbc <fputc>
 c38:	3a 94       	dec	r3
 c3a:	f7 cf       	rjmp	.-18     	; 0xc2a <vfprintf+0x362>
 c3c:	f7 01       	movw	r30, r14
 c3e:	86 81       	ldd	r24, Z+6	; 0x06
 c40:	97 81       	ldd	r25, Z+7	; 0x07
 c42:	02 c0       	rjmp	.+4      	; 0xc48 <vfprintf+0x380>
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	9f ef       	ldi	r25, 0xFF	; 255
 c48:	2c 96       	adiw	r28, 0x0c	; 12
 c4a:	e2 e1       	ldi	r30, 0x12	; 18
 c4c:	e3 c0       	rjmp	.+454    	; 0xe14 <__epilogue_restores__>

00000c4e <calloc>:
 c4e:	0f 93       	push	r16
 c50:	1f 93       	push	r17
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
 c56:	86 9f       	mul	r24, r22
 c58:	80 01       	movw	r16, r0
 c5a:	87 9f       	mul	r24, r23
 c5c:	10 0d       	add	r17, r0
 c5e:	96 9f       	mul	r25, r22
 c60:	10 0d       	add	r17, r0
 c62:	11 24       	eor	r1, r1
 c64:	c8 01       	movw	r24, r16
 c66:	81 dc       	rcall	.-1790   	; 0x56a <malloc>
 c68:	ec 01       	movw	r28, r24
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	21 f0       	breq	.+8      	; 0xc76 <calloc+0x28>
 c6e:	a8 01       	movw	r20, r16
 c70:	60 e0       	ldi	r22, 0x00	; 0
 c72:	70 e0       	ldi	r23, 0x00	; 0
 c74:	11 d0       	rcall	.+34     	; 0xc98 <memset>
 c76:	ce 01       	movw	r24, r28
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	1f 91       	pop	r17
 c7e:	0f 91       	pop	r16
 c80:	08 95       	ret

00000c82 <strnlen_P>:
 c82:	fc 01       	movw	r30, r24
 c84:	05 90       	lpm	r0, Z+
 c86:	61 50       	subi	r22, 0x01	; 1
 c88:	70 40       	sbci	r23, 0x00	; 0
 c8a:	01 10       	cpse	r0, r1
 c8c:	d8 f7       	brcc	.-10     	; 0xc84 <strnlen_P+0x2>
 c8e:	80 95       	com	r24
 c90:	90 95       	com	r25
 c92:	8e 0f       	add	r24, r30
 c94:	9f 1f       	adc	r25, r31
 c96:	08 95       	ret

00000c98 <memset>:
 c98:	dc 01       	movw	r26, r24
 c9a:	01 c0       	rjmp	.+2      	; 0xc9e <memset+0x6>
 c9c:	6d 93       	st	X+, r22
 c9e:	41 50       	subi	r20, 0x01	; 1
 ca0:	50 40       	sbci	r21, 0x00	; 0
 ca2:	e0 f7       	brcc	.-8      	; 0xc9c <memset+0x4>
 ca4:	08 95       	ret

00000ca6 <strnlen>:
 ca6:	fc 01       	movw	r30, r24
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 90       	ld	r0, Z+
 cae:	01 10       	cpse	r0, r1
 cb0:	d8 f7       	brcc	.-10     	; 0xca8 <strnlen+0x2>
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	8e 0f       	add	r24, r30
 cb8:	9f 1f       	adc	r25, r31
 cba:	08 95       	ret

00000cbc <fputc>:
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	18 2f       	mov	r17, r24
 cc6:	09 2f       	mov	r16, r25
 cc8:	eb 01       	movw	r28, r22
 cca:	8b 81       	ldd	r24, Y+3	; 0x03
 ccc:	81 fd       	sbrc	r24, 1
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <fputc+0x1a>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	20 c0       	rjmp	.+64     	; 0xd16 <fputc+0x5a>
 cd6:	82 ff       	sbrs	r24, 2
 cd8:	10 c0       	rjmp	.+32     	; 0xcfa <fputc+0x3e>
 cda:	4e 81       	ldd	r20, Y+6	; 0x06
 cdc:	5f 81       	ldd	r21, Y+7	; 0x07
 cde:	2c 81       	ldd	r18, Y+4	; 0x04
 ce0:	3d 81       	ldd	r19, Y+5	; 0x05
 ce2:	42 17       	cp	r20, r18
 ce4:	53 07       	cpc	r21, r19
 ce6:	7c f4       	brge	.+30     	; 0xd06 <fputc+0x4a>
 ce8:	e8 81       	ld	r30, Y
 cea:	f9 81       	ldd	r31, Y+1	; 0x01
 cec:	9f 01       	movw	r18, r30
 cee:	2f 5f       	subi	r18, 0xFF	; 255
 cf0:	3f 4f       	sbci	r19, 0xFF	; 255
 cf2:	39 83       	std	Y+1, r19	; 0x01
 cf4:	28 83       	st	Y, r18
 cf6:	10 83       	st	Z, r17
 cf8:	06 c0       	rjmp	.+12     	; 0xd06 <fputc+0x4a>
 cfa:	e8 85       	ldd	r30, Y+8	; 0x08
 cfc:	f9 85       	ldd	r31, Y+9	; 0x09
 cfe:	81 2f       	mov	r24, r17
 d00:	09 95       	icall
 d02:	89 2b       	or	r24, r25
 d04:	29 f7       	brne	.-54     	; 0xcd0 <fputc+0x14>
 d06:	2e 81       	ldd	r18, Y+6	; 0x06
 d08:	3f 81       	ldd	r19, Y+7	; 0x07
 d0a:	2f 5f       	subi	r18, 0xFF	; 255
 d0c:	3f 4f       	sbci	r19, 0xFF	; 255
 d0e:	3f 83       	std	Y+7, r19	; 0x07
 d10:	2e 83       	std	Y+6, r18	; 0x06
 d12:	81 2f       	mov	r24, r17
 d14:	90 2f       	mov	r25, r16
 d16:	df 91       	pop	r29
 d18:	cf 91       	pop	r28
 d1a:	1f 91       	pop	r17
 d1c:	0f 91       	pop	r16
 d1e:	08 95       	ret

00000d20 <__ultoa_invert>:
 d20:	fa 01       	movw	r30, r20
 d22:	aa 27       	eor	r26, r26
 d24:	28 30       	cpi	r18, 0x08	; 8
 d26:	51 f1       	breq	.+84     	; 0xd7c <__ultoa_invert+0x5c>
 d28:	20 31       	cpi	r18, 0x10	; 16
 d2a:	81 f1       	breq	.+96     	; 0xd8c <__ultoa_invert+0x6c>
 d2c:	e8 94       	clt
 d2e:	6f 93       	push	r22
 d30:	6e 7f       	andi	r22, 0xFE	; 254
 d32:	6e 5f       	subi	r22, 0xFE	; 254
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	af 4f       	sbci	r26, 0xFF	; 255
 d3c:	b1 e0       	ldi	r27, 0x01	; 1
 d3e:	3e d0       	rcall	.+124    	; 0xdbc <__ultoa_invert+0x9c>
 d40:	b4 e0       	ldi	r27, 0x04	; 4
 d42:	3c d0       	rcall	.+120    	; 0xdbc <__ultoa_invert+0x9c>
 d44:	67 0f       	add	r22, r23
 d46:	78 1f       	adc	r23, r24
 d48:	89 1f       	adc	r24, r25
 d4a:	9a 1f       	adc	r25, r26
 d4c:	a1 1d       	adc	r26, r1
 d4e:	68 0f       	add	r22, r24
 d50:	79 1f       	adc	r23, r25
 d52:	8a 1f       	adc	r24, r26
 d54:	91 1d       	adc	r25, r1
 d56:	a1 1d       	adc	r26, r1
 d58:	6a 0f       	add	r22, r26
 d5a:	71 1d       	adc	r23, r1
 d5c:	81 1d       	adc	r24, r1
 d5e:	91 1d       	adc	r25, r1
 d60:	a1 1d       	adc	r26, r1
 d62:	20 d0       	rcall	.+64     	; 0xda4 <__ultoa_invert+0x84>
 d64:	09 f4       	brne	.+2      	; 0xd68 <__ultoa_invert+0x48>
 d66:	68 94       	set
 d68:	3f 91       	pop	r19
 d6a:	2a e0       	ldi	r18, 0x0A	; 10
 d6c:	26 9f       	mul	r18, r22
 d6e:	11 24       	eor	r1, r1
 d70:	30 19       	sub	r19, r0
 d72:	30 5d       	subi	r19, 0xD0	; 208
 d74:	31 93       	st	Z+, r19
 d76:	de f6       	brtc	.-74     	; 0xd2e <__ultoa_invert+0xe>
 d78:	cf 01       	movw	r24, r30
 d7a:	08 95       	ret
 d7c:	46 2f       	mov	r20, r22
 d7e:	47 70       	andi	r20, 0x07	; 7
 d80:	40 5d       	subi	r20, 0xD0	; 208
 d82:	41 93       	st	Z+, r20
 d84:	b3 e0       	ldi	r27, 0x03	; 3
 d86:	0f d0       	rcall	.+30     	; 0xda6 <__ultoa_invert+0x86>
 d88:	c9 f7       	brne	.-14     	; 0xd7c <__ultoa_invert+0x5c>
 d8a:	f6 cf       	rjmp	.-20     	; 0xd78 <__ultoa_invert+0x58>
 d8c:	46 2f       	mov	r20, r22
 d8e:	4f 70       	andi	r20, 0x0F	; 15
 d90:	40 5d       	subi	r20, 0xD0	; 208
 d92:	4a 33       	cpi	r20, 0x3A	; 58
 d94:	18 f0       	brcs	.+6      	; 0xd9c <__ultoa_invert+0x7c>
 d96:	49 5d       	subi	r20, 0xD9	; 217
 d98:	31 fd       	sbrc	r19, 1
 d9a:	40 52       	subi	r20, 0x20	; 32
 d9c:	41 93       	st	Z+, r20
 d9e:	02 d0       	rcall	.+4      	; 0xda4 <__ultoa_invert+0x84>
 da0:	a9 f7       	brne	.-22     	; 0xd8c <__ultoa_invert+0x6c>
 da2:	ea cf       	rjmp	.-44     	; 0xd78 <__ultoa_invert+0x58>
 da4:	b4 e0       	ldi	r27, 0x04	; 4
 da6:	a6 95       	lsr	r26
 da8:	97 95       	ror	r25
 daa:	87 95       	ror	r24
 dac:	77 95       	ror	r23
 dae:	67 95       	ror	r22
 db0:	ba 95       	dec	r27
 db2:	c9 f7       	brne	.-14     	; 0xda6 <__ultoa_invert+0x86>
 db4:	00 97       	sbiw	r24, 0x00	; 0
 db6:	61 05       	cpc	r22, r1
 db8:	71 05       	cpc	r23, r1
 dba:	08 95       	ret
 dbc:	9b 01       	movw	r18, r22
 dbe:	ac 01       	movw	r20, r24
 dc0:	0a 2e       	mov	r0, r26
 dc2:	06 94       	lsr	r0
 dc4:	57 95       	ror	r21
 dc6:	47 95       	ror	r20
 dc8:	37 95       	ror	r19
 dca:	27 95       	ror	r18
 dcc:	ba 95       	dec	r27
 dce:	c9 f7       	brne	.-14     	; 0xdc2 <__ultoa_invert+0xa2>
 dd0:	62 0f       	add	r22, r18
 dd2:	73 1f       	adc	r23, r19
 dd4:	84 1f       	adc	r24, r20
 dd6:	95 1f       	adc	r25, r21
 dd8:	a0 1d       	adc	r26, r0
 dda:	08 95       	ret

00000ddc <__prologue_saves__>:
 ddc:	2f 92       	push	r2
 dde:	3f 92       	push	r3
 de0:	4f 92       	push	r4
 de2:	5f 92       	push	r5
 de4:	6f 92       	push	r6
 de6:	7f 92       	push	r7
 de8:	8f 92       	push	r8
 dea:	9f 92       	push	r9
 dec:	af 92       	push	r10
 dee:	bf 92       	push	r11
 df0:	cf 92       	push	r12
 df2:	df 92       	push	r13
 df4:	ef 92       	push	r14
 df6:	ff 92       	push	r15
 df8:	0f 93       	push	r16
 dfa:	1f 93       	push	r17
 dfc:	cf 93       	push	r28
 dfe:	df 93       	push	r29
 e00:	cd b7       	in	r28, 0x3d	; 61
 e02:	de b7       	in	r29, 0x3e	; 62
 e04:	ca 1b       	sub	r28, r26
 e06:	db 0b       	sbc	r29, r27
 e08:	0f b6       	in	r0, 0x3f	; 63
 e0a:	f8 94       	cli
 e0c:	de bf       	out	0x3e, r29	; 62
 e0e:	0f be       	out	0x3f, r0	; 63
 e10:	cd bf       	out	0x3d, r28	; 61
 e12:	09 94       	ijmp

00000e14 <__epilogue_restores__>:
 e14:	2a 88       	ldd	r2, Y+18	; 0x12
 e16:	39 88       	ldd	r3, Y+17	; 0x11
 e18:	48 88       	ldd	r4, Y+16	; 0x10
 e1a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e1c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e1e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e20:	8c 84       	ldd	r8, Y+12	; 0x0c
 e22:	9b 84       	ldd	r9, Y+11	; 0x0b
 e24:	aa 84       	ldd	r10, Y+10	; 0x0a
 e26:	b9 84       	ldd	r11, Y+9	; 0x09
 e28:	c8 84       	ldd	r12, Y+8	; 0x08
 e2a:	df 80       	ldd	r13, Y+7	; 0x07
 e2c:	ee 80       	ldd	r14, Y+6	; 0x06
 e2e:	fd 80       	ldd	r15, Y+5	; 0x05
 e30:	0c 81       	ldd	r16, Y+4	; 0x04
 e32:	1b 81       	ldd	r17, Y+3	; 0x03
 e34:	aa 81       	ldd	r26, Y+2	; 0x02
 e36:	b9 81       	ldd	r27, Y+1	; 0x01
 e38:	ce 0f       	add	r28, r30
 e3a:	d1 1d       	adc	r29, r1
 e3c:	0f b6       	in	r0, 0x3f	; 63
 e3e:	f8 94       	cli
 e40:	de bf       	out	0x3e, r29	; 62
 e42:	0f be       	out	0x3f, r0	; 63
 e44:	cd bf       	out	0x3d, r28	; 61
 e46:	ed 01       	movw	r28, r26
 e48:	08 95       	ret

00000e4a <_exit>:
 e4a:	f8 94       	cli

00000e4c <__stop_program>:
 e4c:	ff cf       	rjmp	.-2      	; 0xe4c <__stop_program>
