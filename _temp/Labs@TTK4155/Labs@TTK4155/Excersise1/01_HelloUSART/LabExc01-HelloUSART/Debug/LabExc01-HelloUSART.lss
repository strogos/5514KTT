
LabExc01-HelloUSART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001c0  008001c0  0000062a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000492  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d2  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc5  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000d6a6  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  0000f172  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000f22f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000355e  00000000  00000000  0000f27f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c0       	rjmp	.+132    	; 0xa6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c0       	rjmp	.+128    	; 0xa6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c0       	rjmp	.+124    	; 0xa6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c0       	rjmp	.+120    	; 0xa6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c0       	rjmp	.+116    	; 0xa6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c0       	rjmp	.+112    	; 0xa6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c0       	rjmp	.+108    	; 0xa6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c0       	rjmp	.+104    	; 0xa6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c0       	rjmp	.+100    	; 0xa6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c0       	rjmp	.+96     	; 0xa6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c0       	rjmp	.+92     	; 0xa6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6f c0       	rjmp	.+222    	; 0x12c <__vector_19>
  4e:	00 00       	nop
  50:	2a c0       	rjmp	.+84     	; 0xa6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c0       	rjmp	.+80     	; 0xa6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c0       	rjmp	.+76     	; 0xa6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c0       	rjmp	.+72     	; 0xa6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c0       	rjmp	.+68     	; 0xa6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c0       	rjmp	.+64     	; 0xa6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c0       	rjmp	.+60     	; 0xa6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c0       	rjmp	.+56     	; 0xa6 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ed       	ldi	r30, 0xD6	; 214
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 3c       	cpi	r26, 0xC0	; 192
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 ec       	ldi	r26, 0xC0	; 192
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 3c       	cpi	r26, 0xCC	; 204
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	26 d0       	rcall	.+76     	; 0xf0 <main>
  a4:	16 c2       	rjmp	.+1068   	; 0x4d2 <_exit>

000000a6 <__bad_interrupt>:
  a6:	ac cf       	rjmp	.-168    	; 0x0 <__vectors>

000000a8 <usartSendByte>:
///<summary>
///Send a byte using USART
///</summary>
void usartSendByte(uint8_t byteToSend)
{
		while((UCSR0A&(1<<UDRE0))==0);//---------------//Only transmit data if data bus is available (not already transmitting)
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usartSendByte>
		UDR0=byteToSend;//---------------------------//transmit byte
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	08 95       	ret

000000b0 <usartInitialize>:
		#if USART_OPERATING_MODE_U2X
			unsigned int UBRR=(F_CPU / (8UL * USART_BAUDRATE)) - 1; //if integer trunctuation is noticed (...not getting the expected baudrate) due to integer devision, USE: ((F_CPU + USART_BAUD_RATE * 8L) / (USART_BAUD_RATE * 16L) - 1) instead. When doing integer division it is usually better to round to the nearest integer, rather than to the lowest. 
			UCSR0A |= (1<<U2X0);//---------------------------//U2x=1
		#else
			unsigned int UBRR=(F_CPU / (16UL * USART_BAUDRATE)) - 1;
			UCSR0A &= ~(1<<U2X0);//---------------------------//U2X=0
  b0:	59 98       	cbi	0x0b, 1	; 11
		#endif

		//Set up the baud rate for USART0
		UBRR0L=UBRR;//---------------------------// load lower 8 bits of baud rate value
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	89 b9       	out	0x09, r24	; 9
		UBRR0H=(UBRR>>8);//---------------------------// load upper 8 bits of baud rate value	
  b6:	10 bc       	out	0x20, r1	; 32
		
		//Enable Tx & Rx
		UCSR0B=(1<<TXEN0)|(1<<RXEN0);
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
				
		/*Configure Data Format: 
			-	Data Bits = 8;
			-	Stop Bits = 2;
			-	Parity = EVEN;		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)|(1<<UPM01);
  bc:	8e ea       	ldi	r24, 0xAE	; 174
  be:	80 bd       	out	0x20, r24	; 32
		*	- First parameter: address to a function which outputs a single character.
		*	- Second parameter: optional; used for get functions, ie. receiving a character from the USART.
		*	- BEAWARE that this function uses malloc()!! VERY resource demanding. 
		*/
		if(USART_ENABLE_printf)
			fdevopen(&usartSendByte,NULL);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	84 e5       	ldi	r24, 0x54	; 84
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	45 c0       	rjmp	.+138    	; 0x154 <fdevopen>
  ca:	08 95       	ret

000000cc <usartReceiveByte>:
///<summary>
/////Receive a byte using USART
///</summary>
uint8_t usartReceiveByte(void)
{
	while((UCSR0A&(1<<RXC0))==0);//---------------------------//wait until data is received
  cc:	5f 9b       	sbis	0x0b, 7	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <usartReceiveByte>
	
	return UDR0;//-------------------------------------------//return received data
  d0:	8c b1       	in	r24, 0x0c	; 12
}
  d2:	08 95       	ret

000000d4 <usartSendDataString>:

///<summary>
///Send a string of data using USART
///</summary>
void usartSendDataString(const char *dataString)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*dataString)
  da:	88 81       	ld	r24, Y
  dc:	88 23       	and	r24, r24
  de:	29 f0       	breq	.+10     	; 0xea <usartSendDataString+0x16>
  e0:	21 96       	adiw	r28, 0x01	; 1
	{
		usartSendByte(*dataString);
  e2:	e2 df       	rcall	.-60     	; 0xa8 <usartSendByte>
///<summary>
///Send a string of data using USART
///</summary>
void usartSendDataString(const char *dataString)
{
	while(*dataString)
  e4:	89 91       	ld	r24, Y+
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <usartSendDataString+0xe>
	{
		usartSendByte(*dataString);
		dataString++;
	}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
	
	// dummy for testing USART
	char *dataString="\r......Booting up.\r";
		
	//init. USART
	usartInitialize();//--------*****-////TO DO: implement light diode blink if(usartInitialize()); else ERROR BLINK CODE.. also write reference for blinking code...
  f0:	df df       	rcall	.-66     	; 0xb0 <usartInitialize>
	
	//Send a string of data
	usartSendDataString(dataString);
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	ee df       	rcall	.-36     	; 0xd4 <usartSendDataString>
	
	if(USART_ENABLE_printf)
		printf("NOTEFICATION: printf() is LINKED to Tx on USART!\r\n");
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	75 d0       	rcall	.+234    	; 0x1e8 <puts>
	
	//Make some conversation...
	usartSendDataString("Do you want to echo Rx UART data using interrupts?\r\n*Enter 'y' to accept");
  fe:	8c e4       	ldi	r24, 0x4C	; 76
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	e8 df       	rcall	.-48     	; 0xd4 <usartSendDataString>
	if(1)//byteOfData=usartReceiveByte()=='y')
	{
		interruptOn=true;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 c1 01 	sts	0x01C1, r24
		UCSR0B |= (1<<RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXCIE0)
 10a:	57 9a       	sbi	0x0a, 7	; 10
		sei(); //macro for enabling interrupts globally (<avr/interrupt.h> must be included)
 10c:	78 94       	sei
		usartSendDataString("->interrupt on Rx is ENABLED\r\n");
 10e:	85 e9       	ldi	r24, 0x95	; 149
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	e0 df       	rcall	.-64     	; 0xd4 <usartSendDataString>
	}
	else
		usartSendDataString("->interrupt on Rx DISABLED\r\n");
	
	usartSendDataString("@ECHO ON\r\n");
 114:	84 eb       	ldi	r24, 0xB4	; 180
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	dd df       	rcall	.-70     	; 0xd4 <usartSendDataString>
	
	//Program loop
	while(true)
	{
		if(!interruptOn)
 11a:	80 91 c1 01 	lds	r24, 0x01C1
 11e:	81 11       	cpse	r24, r1
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x30>
		{
			//echo received data
			byteOfData=usartReceiveByte();
 122:	d4 df       	rcall	.-88     	; 0xcc <usartReceiveByte>
 124:	80 93 c0 01 	sts	0x01C0, r24
			usartSendByte(byteOfData);
 128:	bf df       	rcall	.-130    	; 0xa8 <usartSendByte>
 12a:	f7 cf       	rjmp	.-18     	; 0x11a <main+0x2a>

0000012c <__vector_19>:
	}
}

//interrupt function
ISR (USART0_RXC_vect,ISR_BLOCK)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
	if (interruptOn)
 138:	80 91 c1 01 	lds	r24, 0x01C1
 13c:	88 23       	and	r24, r24
 13e:	21 f0       	breq	.+8      	; 0x148 <__vector_19+0x1c>
	{
		byteOfData=UDR0;//grab byte
 140:	8c b1       	in	r24, 0x0c	; 12
 142:	80 93 c0 01 	sts	0x01C0, r24
		UDR0=byteOfData;//echo grabbed byte
 146:	8c b9       	out	0x0c, r24	; 12
	}
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <fdevopen>:
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	8b 01       	movw	r16, r22
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	31 f4       	brne	.+12     	; 0x170 <fdevopen+0x1c>
 164:	61 15       	cp	r22, r1
 166:	71 05       	cpc	r23, r1
 168:	19 f4       	brne	.+6      	; 0x170 <fdevopen+0x1c>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	37 c0       	rjmp	.+110    	; 0x1de <fdevopen+0x8a>
 170:	6e e0       	ldi	r22, 0x0E	; 14
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	64 d0       	rcall	.+200    	; 0x242 <calloc>
 17a:	fc 01       	movw	r30, r24
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	a9 f3       	breq	.-22     	; 0x16a <fdevopen+0x16>
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	83 83       	std	Z+3, r24	; 0x03
 184:	01 15       	cp	r16, r1
 186:	11 05       	cpc	r17, r1
 188:	71 f0       	breq	.+28     	; 0x1a6 <fdevopen+0x52>
 18a:	13 87       	std	Z+11, r17	; 0x0b
 18c:	02 87       	std	Z+10, r16	; 0x0a
 18e:	81 e8       	ldi	r24, 0x81	; 129
 190:	83 83       	std	Z+3, r24	; 0x03
 192:	80 91 c2 01 	lds	r24, 0x01C2
 196:	90 91 c3 01 	lds	r25, 0x01C3
 19a:	89 2b       	or	r24, r25
 19c:	21 f4       	brne	.+8      	; 0x1a6 <fdevopen+0x52>
 19e:	f0 93 c3 01 	sts	0x01C3, r31
 1a2:	e0 93 c2 01 	sts	0x01C2, r30
 1a6:	20 97       	sbiw	r28, 0x00	; 0
 1a8:	c9 f0       	breq	.+50     	; 0x1dc <fdevopen+0x88>
 1aa:	d1 87       	std	Z+9, r29	; 0x09
 1ac:	c0 87       	std	Z+8, r28	; 0x08
 1ae:	83 81       	ldd	r24, Z+3	; 0x03
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	83 83       	std	Z+3, r24	; 0x03
 1b4:	80 91 c4 01 	lds	r24, 0x01C4
 1b8:	90 91 c5 01 	lds	r25, 0x01C5
 1bc:	89 2b       	or	r24, r25
 1be:	71 f4       	brne	.+28     	; 0x1dc <fdevopen+0x88>
 1c0:	f0 93 c5 01 	sts	0x01C5, r31
 1c4:	e0 93 c4 01 	sts	0x01C4, r30
 1c8:	80 91 c6 01 	lds	r24, 0x01C6
 1cc:	90 91 c7 01 	lds	r25, 0x01C7
 1d0:	89 2b       	or	r24, r25
 1d2:	21 f4       	brne	.+8      	; 0x1dc <fdevopen+0x88>
 1d4:	f0 93 c7 01 	sts	0x01C7, r31
 1d8:	e0 93 c6 01 	sts	0x01C6, r30
 1dc:	cf 01       	movw	r24, r30
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <puts>:
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	e0 91 c4 01 	lds	r30, 0x01C4
 1f4:	f0 91 c5 01 	lds	r31, 0x01C5
 1f8:	23 81       	ldd	r18, Z+3	; 0x03
 1fa:	21 ff       	sbrs	r18, 1
 1fc:	1b c0       	rjmp	.+54     	; 0x234 <puts+0x4c>
 1fe:	ec 01       	movw	r28, r24
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	89 91       	ld	r24, Y+
 206:	60 91 c4 01 	lds	r22, 0x01C4
 20a:	70 91 c5 01 	lds	r23, 0x01C5
 20e:	db 01       	movw	r26, r22
 210:	18 96       	adiw	r26, 0x08	; 8
 212:	ed 91       	ld	r30, X+
 214:	fc 91       	ld	r31, X
 216:	19 97       	sbiw	r26, 0x09	; 9
 218:	88 23       	and	r24, r24
 21a:	31 f0       	breq	.+12     	; 0x228 <puts+0x40>
 21c:	09 95       	icall
 21e:	89 2b       	or	r24, r25
 220:	89 f3       	breq	.-30     	; 0x204 <puts+0x1c>
 222:	0f ef       	ldi	r16, 0xFF	; 255
 224:	1f ef       	ldi	r17, 0xFF	; 255
 226:	ee cf       	rjmp	.-36     	; 0x204 <puts+0x1c>
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	09 95       	icall
 22c:	89 2b       	or	r24, r25
 22e:	11 f4       	brne	.+4      	; 0x234 <puts+0x4c>
 230:	c8 01       	movw	r24, r16
 232:	02 c0       	rjmp	.+4      	; 0x238 <puts+0x50>
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	9f ef       	ldi	r25, 0xFF	; 255
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <calloc>:
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	86 9f       	mul	r24, r22
 24c:	80 01       	movw	r16, r0
 24e:	87 9f       	mul	r24, r23
 250:	10 0d       	add	r17, r0
 252:	96 9f       	mul	r25, r22
 254:	10 0d       	add	r17, r0
 256:	11 24       	eor	r1, r1
 258:	c8 01       	movw	r24, r16
 25a:	0d d0       	rcall	.+26     	; 0x276 <malloc>
 25c:	ec 01       	movw	r28, r24
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	21 f0       	breq	.+8      	; 0x26a <calloc+0x28>
 262:	a8 01       	movw	r20, r16
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	2d d1       	rcall	.+602    	; 0x4c4 <memset>
 26a:	ce 01       	movw	r24, r28
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <malloc>:
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	91 05       	cpc	r25, r1
 27e:	10 f4       	brcc	.+4      	; 0x284 <malloc+0xe>
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	e0 91 ca 01 	lds	r30, 0x01CA
 288:	f0 91 cb 01 	lds	r31, 0x01CB
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	a0 e0       	ldi	r26, 0x00	; 0
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	30 97       	sbiw	r30, 0x00	; 0
 296:	39 f1       	breq	.+78     	; 0x2e6 <malloc+0x70>
 298:	40 81       	ld	r20, Z
 29a:	51 81       	ldd	r21, Z+1	; 0x01
 29c:	48 17       	cp	r20, r24
 29e:	59 07       	cpc	r21, r25
 2a0:	b8 f0       	brcs	.+46     	; 0x2d0 <malloc+0x5a>
 2a2:	48 17       	cp	r20, r24
 2a4:	59 07       	cpc	r21, r25
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <malloc+0x4e>
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	93 81       	ldd	r25, Z+3	; 0x03
 2ac:	10 97       	sbiw	r26, 0x00	; 0
 2ae:	29 f0       	breq	.+10     	; 0x2ba <malloc+0x44>
 2b0:	13 96       	adiw	r26, 0x03	; 3
 2b2:	9c 93       	st	X, r25
 2b4:	8e 93       	st	-X, r24
 2b6:	12 97       	sbiw	r26, 0x02	; 2
 2b8:	2c c0       	rjmp	.+88     	; 0x312 <malloc+0x9c>
 2ba:	90 93 cb 01 	sts	0x01CB, r25
 2be:	80 93 ca 01 	sts	0x01CA, r24
 2c2:	27 c0       	rjmp	.+78     	; 0x312 <malloc+0x9c>
 2c4:	21 15       	cp	r18, r1
 2c6:	31 05       	cpc	r19, r1
 2c8:	31 f0       	breq	.+12     	; 0x2d6 <malloc+0x60>
 2ca:	42 17       	cp	r20, r18
 2cc:	53 07       	cpc	r21, r19
 2ce:	18 f0       	brcs	.+6      	; 0x2d6 <malloc+0x60>
 2d0:	a9 01       	movw	r20, r18
 2d2:	db 01       	movw	r26, r22
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <malloc+0x62>
 2d6:	ef 01       	movw	r28, r30
 2d8:	9a 01       	movw	r18, r20
 2da:	bd 01       	movw	r22, r26
 2dc:	df 01       	movw	r26, r30
 2de:	02 80       	ldd	r0, Z+2	; 0x02
 2e0:	f3 81       	ldd	r31, Z+3	; 0x03
 2e2:	e0 2d       	mov	r30, r0
 2e4:	d7 cf       	rjmp	.-82     	; 0x294 <malloc+0x1e>
 2e6:	21 15       	cp	r18, r1
 2e8:	31 05       	cpc	r19, r1
 2ea:	f9 f0       	breq	.+62     	; 0x32a <malloc+0xb4>
 2ec:	28 1b       	sub	r18, r24
 2ee:	39 0b       	sbc	r19, r25
 2f0:	24 30       	cpi	r18, 0x04	; 4
 2f2:	31 05       	cpc	r19, r1
 2f4:	80 f4       	brcc	.+32     	; 0x316 <malloc+0xa0>
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	9b 81       	ldd	r25, Y+3	; 0x03
 2fa:	61 15       	cp	r22, r1
 2fc:	71 05       	cpc	r23, r1
 2fe:	21 f0       	breq	.+8      	; 0x308 <malloc+0x92>
 300:	fb 01       	movw	r30, r22
 302:	93 83       	std	Z+3, r25	; 0x03
 304:	82 83       	std	Z+2, r24	; 0x02
 306:	04 c0       	rjmp	.+8      	; 0x310 <malloc+0x9a>
 308:	90 93 cb 01 	sts	0x01CB, r25
 30c:	80 93 ca 01 	sts	0x01CA, r24
 310:	fe 01       	movw	r30, r28
 312:	32 96       	adiw	r30, 0x02	; 2
 314:	44 c0       	rjmp	.+136    	; 0x39e <malloc+0x128>
 316:	fe 01       	movw	r30, r28
 318:	e2 0f       	add	r30, r18
 31a:	f3 1f       	adc	r31, r19
 31c:	81 93       	st	Z+, r24
 31e:	91 93       	st	Z+, r25
 320:	22 50       	subi	r18, 0x02	; 2
 322:	31 09       	sbc	r19, r1
 324:	39 83       	std	Y+1, r19	; 0x01
 326:	28 83       	st	Y, r18
 328:	3a c0       	rjmp	.+116    	; 0x39e <malloc+0x128>
 32a:	20 91 c8 01 	lds	r18, 0x01C8
 32e:	30 91 c9 01 	lds	r19, 0x01C9
 332:	23 2b       	or	r18, r19
 334:	41 f4       	brne	.+16     	; 0x346 <malloc+0xd0>
 336:	20 91 02 01 	lds	r18, 0x0102
 33a:	30 91 03 01 	lds	r19, 0x0103
 33e:	30 93 c9 01 	sts	0x01C9, r19
 342:	20 93 c8 01 	sts	0x01C8, r18
 346:	20 91 00 01 	lds	r18, 0x0100
 34a:	30 91 01 01 	lds	r19, 0x0101
 34e:	21 15       	cp	r18, r1
 350:	31 05       	cpc	r19, r1
 352:	41 f4       	brne	.+16     	; 0x364 <malloc+0xee>
 354:	2d b7       	in	r18, 0x3d	; 61
 356:	3e b7       	in	r19, 0x3e	; 62
 358:	40 91 04 01 	lds	r20, 0x0104
 35c:	50 91 05 01 	lds	r21, 0x0105
 360:	24 1b       	sub	r18, r20
 362:	35 0b       	sbc	r19, r21
 364:	e0 91 c8 01 	lds	r30, 0x01C8
 368:	f0 91 c9 01 	lds	r31, 0x01C9
 36c:	e2 17       	cp	r30, r18
 36e:	f3 07       	cpc	r31, r19
 370:	a0 f4       	brcc	.+40     	; 0x39a <malloc+0x124>
 372:	2e 1b       	sub	r18, r30
 374:	3f 0b       	sbc	r19, r31
 376:	28 17       	cp	r18, r24
 378:	39 07       	cpc	r19, r25
 37a:	78 f0       	brcs	.+30     	; 0x39a <malloc+0x124>
 37c:	ac 01       	movw	r20, r24
 37e:	4e 5f       	subi	r20, 0xFE	; 254
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	24 17       	cp	r18, r20
 384:	35 07       	cpc	r19, r21
 386:	48 f0       	brcs	.+18     	; 0x39a <malloc+0x124>
 388:	4e 0f       	add	r20, r30
 38a:	5f 1f       	adc	r21, r31
 38c:	50 93 c9 01 	sts	0x01C9, r21
 390:	40 93 c8 01 	sts	0x01C8, r20
 394:	81 93       	st	Z+, r24
 396:	91 93       	st	Z+, r25
 398:	02 c0       	rjmp	.+4      	; 0x39e <malloc+0x128>
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	cf 01       	movw	r24, r30
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <free>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <free+0xa>
 3ae:	87 c0       	rjmp	.+270    	; 0x4be <free+0x118>
 3b0:	fc 01       	movw	r30, r24
 3b2:	32 97       	sbiw	r30, 0x02	; 2
 3b4:	13 82       	std	Z+3, r1	; 0x03
 3b6:	12 82       	std	Z+2, r1	; 0x02
 3b8:	c0 91 ca 01 	lds	r28, 0x01CA
 3bc:	d0 91 cb 01 	lds	r29, 0x01CB
 3c0:	20 97       	sbiw	r28, 0x00	; 0
 3c2:	81 f4       	brne	.+32     	; 0x3e4 <free+0x3e>
 3c4:	20 81       	ld	r18, Z
 3c6:	31 81       	ldd	r19, Z+1	; 0x01
 3c8:	28 0f       	add	r18, r24
 3ca:	39 1f       	adc	r19, r25
 3cc:	80 91 c8 01 	lds	r24, 0x01C8
 3d0:	90 91 c9 01 	lds	r25, 0x01C9
 3d4:	82 17       	cp	r24, r18
 3d6:	93 07       	cpc	r25, r19
 3d8:	79 f5       	brne	.+94     	; 0x438 <free+0x92>
 3da:	f0 93 c9 01 	sts	0x01C9, r31
 3de:	e0 93 c8 01 	sts	0x01C8, r30
 3e2:	6d c0       	rjmp	.+218    	; 0x4be <free+0x118>
 3e4:	de 01       	movw	r26, r28
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	ae 17       	cp	r26, r30
 3ec:	bf 07       	cpc	r27, r31
 3ee:	50 f4       	brcc	.+20     	; 0x404 <free+0x5e>
 3f0:	12 96       	adiw	r26, 0x02	; 2
 3f2:	4d 91       	ld	r20, X+
 3f4:	5c 91       	ld	r21, X
 3f6:	13 97       	sbiw	r26, 0x03	; 3
 3f8:	9d 01       	movw	r18, r26
 3fa:	41 15       	cp	r20, r1
 3fc:	51 05       	cpc	r21, r1
 3fe:	09 f1       	breq	.+66     	; 0x442 <free+0x9c>
 400:	da 01       	movw	r26, r20
 402:	f3 cf       	rjmp	.-26     	; 0x3ea <free+0x44>
 404:	b3 83       	std	Z+3, r27	; 0x03
 406:	a2 83       	std	Z+2, r26	; 0x02
 408:	40 81       	ld	r20, Z
 40a:	51 81       	ldd	r21, Z+1	; 0x01
 40c:	84 0f       	add	r24, r20
 40e:	95 1f       	adc	r25, r21
 410:	8a 17       	cp	r24, r26
 412:	9b 07       	cpc	r25, r27
 414:	71 f4       	brne	.+28     	; 0x432 <free+0x8c>
 416:	8d 91       	ld	r24, X+
 418:	9c 91       	ld	r25, X
 41a:	11 97       	sbiw	r26, 0x01	; 1
 41c:	84 0f       	add	r24, r20
 41e:	95 1f       	adc	r25, r21
 420:	02 96       	adiw	r24, 0x02	; 2
 422:	91 83       	std	Z+1, r25	; 0x01
 424:	80 83       	st	Z, r24
 426:	12 96       	adiw	r26, 0x02	; 2
 428:	8d 91       	ld	r24, X+
 42a:	9c 91       	ld	r25, X
 42c:	13 97       	sbiw	r26, 0x03	; 3
 42e:	93 83       	std	Z+3, r25	; 0x03
 430:	82 83       	std	Z+2, r24	; 0x02
 432:	21 15       	cp	r18, r1
 434:	31 05       	cpc	r19, r1
 436:	29 f4       	brne	.+10     	; 0x442 <free+0x9c>
 438:	f0 93 cb 01 	sts	0x01CB, r31
 43c:	e0 93 ca 01 	sts	0x01CA, r30
 440:	3e c0       	rjmp	.+124    	; 0x4be <free+0x118>
 442:	d9 01       	movw	r26, r18
 444:	13 96       	adiw	r26, 0x03	; 3
 446:	fc 93       	st	X, r31
 448:	ee 93       	st	-X, r30
 44a:	12 97       	sbiw	r26, 0x02	; 2
 44c:	4d 91       	ld	r20, X+
 44e:	5d 91       	ld	r21, X+
 450:	a4 0f       	add	r26, r20
 452:	b5 1f       	adc	r27, r21
 454:	ea 17       	cp	r30, r26
 456:	fb 07       	cpc	r31, r27
 458:	79 f4       	brne	.+30     	; 0x478 <free+0xd2>
 45a:	80 81       	ld	r24, Z
 45c:	91 81       	ldd	r25, Z+1	; 0x01
 45e:	84 0f       	add	r24, r20
 460:	95 1f       	adc	r25, r21
 462:	02 96       	adiw	r24, 0x02	; 2
 464:	d9 01       	movw	r26, r18
 466:	11 96       	adiw	r26, 0x01	; 1
 468:	9c 93       	st	X, r25
 46a:	8e 93       	st	-X, r24
 46c:	82 81       	ldd	r24, Z+2	; 0x02
 46e:	93 81       	ldd	r25, Z+3	; 0x03
 470:	13 96       	adiw	r26, 0x03	; 3
 472:	9c 93       	st	X, r25
 474:	8e 93       	st	-X, r24
 476:	12 97       	sbiw	r26, 0x02	; 2
 478:	e0 e0       	ldi	r30, 0x00	; 0
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	9b 81       	ldd	r25, Y+3	; 0x03
 480:	00 97       	sbiw	r24, 0x00	; 0
 482:	19 f0       	breq	.+6      	; 0x48a <free+0xe4>
 484:	fe 01       	movw	r30, r28
 486:	ec 01       	movw	r28, r24
 488:	f9 cf       	rjmp	.-14     	; 0x47c <free+0xd6>
 48a:	ce 01       	movw	r24, r28
 48c:	02 96       	adiw	r24, 0x02	; 2
 48e:	28 81       	ld	r18, Y
 490:	39 81       	ldd	r19, Y+1	; 0x01
 492:	82 0f       	add	r24, r18
 494:	93 1f       	adc	r25, r19
 496:	20 91 c8 01 	lds	r18, 0x01C8
 49a:	30 91 c9 01 	lds	r19, 0x01C9
 49e:	28 17       	cp	r18, r24
 4a0:	39 07       	cpc	r19, r25
 4a2:	69 f4       	brne	.+26     	; 0x4be <free+0x118>
 4a4:	30 97       	sbiw	r30, 0x00	; 0
 4a6:	29 f4       	brne	.+10     	; 0x4b2 <free+0x10c>
 4a8:	10 92 cb 01 	sts	0x01CB, r1
 4ac:	10 92 ca 01 	sts	0x01CA, r1
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <free+0x110>
 4b2:	13 82       	std	Z+3, r1	; 0x03
 4b4:	12 82       	std	Z+2, r1	; 0x02
 4b6:	d0 93 c9 01 	sts	0x01C9, r29
 4ba:	c0 93 c8 01 	sts	0x01C8, r28
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <memset>:
 4c4:	dc 01       	movw	r26, r24
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <memset+0x6>
 4c8:	6d 93       	st	X+, r22
 4ca:	41 50       	subi	r20, 0x01	; 1
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	e0 f7       	brcc	.-8      	; 0x4c8 <memset+0x4>
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
